#[doc = "Register `SDHC_WRAP__CTL_CFG__CTLCFG_autocmd_err_sts` reader"]
pub type R = crate::R<SdhcWrap_CtlCfg_CtlcfgAutocmdErrStsSpec>;
#[doc = "Register `SDHC_WRAP__CTL_CFG__CTLCFG_autocmd_err_sts` writer"]
pub type W = crate::W<SdhcWrap_CtlCfg_CtlcfgAutocmdErrStsSpec>;
#[doc = "Field `ACMD12_NOT_EXEC` reader - 0:0\\]
If memory multiple block data transfer is not started due to command error, this bit is not set because it is not necessary to issue Auto CMD12. Setting this bit to 1 means the HC cannot issue Auto CMD12 to stop memory multiple block transfer due to some error. If this bit is set to 1, other error status bits \\[D04 - D01\\]
are meaningless. This bit is set to 0 when Auto CMD Error is generated by Auto CMD23"]
pub type Acmd12NotExecR = crate::BitReader;
#[doc = "Field `ACMD12_NOT_EXEC` writer - 0:0\\]
If memory multiple block data transfer is not started due to command error, this bit is not set because it is not necessary to issue Auto CMD12. Setting this bit to 1 means the HC cannot issue Auto CMD12 to stop memory multiple block transfer due to some error. If this bit is set to 1, other error status bits \\[D04 - D01\\]
are meaningless. This bit is set to 0 when Auto CMD Error is generated by Auto CMD23"]
pub type Acmd12NotExecW<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `TIMEOUT` reader - 1:1\\]
Occurs if the no response is returned within 64 SDCLK cycles from the end bit of the command.If this bit is set to 1, the other error status bits \\[D04 - D02\\]
are meaningless."]
pub type TimeoutR = crate::BitReader;
#[doc = "Field `TIMEOUT` writer - 1:1\\]
Occurs if the no response is returned within 64 SDCLK cycles from the end bit of the command.If this bit is set to 1, the other error status bits \\[D04 - D02\\]
are meaningless."]
pub type TimeoutW<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `CRC` reader - 2:2\\]
Occurs when detecting a CRC error in the command response."]
pub type CrcR = crate::BitReader;
#[doc = "Field `CRC` writer - 2:2\\]
Occurs when detecting a CRC error in the command response."]
pub type CrcW<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `ENDBIT` reader - 3:3\\]
Occurs when detecting that the end bit of command response is 0."]
pub type EndbitR = crate::BitReader;
#[doc = "Field `ENDBIT` writer - 3:3\\]
Occurs when detecting that the end bit of command response is 0."]
pub type EndbitW<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `INDEX` reader - 4:4\\]
Occurs if the Command Index error occurs in response to a command."]
pub type IndexR = crate::BitReader;
#[doc = "Field `INDEX` writer - 4:4\\]
Occurs if the Command Index error occurs in response to a command."]
pub type IndexW<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `RESP` reader - 5:5\\]
This bit is set when Response Error Check Enable in the Transfer Mode register is set to 1 and an error is detected in R1 response of either Auto CMD12 or Auto CMD23. This status should be ignored if any bit of D00 to D04 is set to 1."]
pub type RespR = crate::BitReader;
#[doc = "Field `RESP` writer - 5:5\\]
This bit is set when Response Error Check Enable in the Transfer Mode register is set to 1 and an error is detected in R1 response of either Auto CMD12 or Auto CMD23. This status should be ignored if any bit of D00 to D04 is set to 1."]
pub type RespW<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `CMD_NOT_ISSUED` reader - 7:7\\]
Setting this bit to 1 means CMD_wo_DAT is not executed due to an Auto CMD12 error \\[D04- D01\\]
in this register. This bit is set to 0 when Auto CMD Error is generated by Auto CMD23."]
pub type CmdNotIssuedR = crate::BitReader;
#[doc = "Field `CMD_NOT_ISSUED` writer - 7:7\\]
Setting this bit to 1 means CMD_wo_DAT is not executed due to an Auto CMD12 error \\[D04- D01\\]
in this register. This bit is set to 0 when Auto CMD Error is generated by Auto CMD23."]
pub type CmdNotIssuedW<'a, REG> = crate::BitWriter<'a, REG>;
impl R {
    #[doc = "Bit 0 - 0:0\\]
If memory multiple block data transfer is not started due to command error, this bit is not set because it is not necessary to issue Auto CMD12. Setting this bit to 1 means the HC cannot issue Auto CMD12 to stop memory multiple block transfer due to some error. If this bit is set to 1, other error status bits \\[D04 - D01\\]
are meaningless. This bit is set to 0 when Auto CMD Error is generated by Auto CMD23"]
    #[inline(always)]
    pub fn acmd12_not_exec(&self) -> Acmd12NotExecR {
        Acmd12NotExecR::new((self.bits & 1) != 0)
    }
    #[doc = "Bit 1 - 1:1\\]
Occurs if the no response is returned within 64 SDCLK cycles from the end bit of the command.If this bit is set to 1, the other error status bits \\[D04 - D02\\]
are meaningless."]
    #[inline(always)]
    pub fn timeout(&self) -> TimeoutR {
        TimeoutR::new(((self.bits >> 1) & 1) != 0)
    }
    #[doc = "Bit 2 - 2:2\\]
Occurs when detecting a CRC error in the command response."]
    #[inline(always)]
    pub fn crc(&self) -> CrcR {
        CrcR::new(((self.bits >> 2) & 1) != 0)
    }
    #[doc = "Bit 3 - 3:3\\]
Occurs when detecting that the end bit of command response is 0."]
    #[inline(always)]
    pub fn endbit(&self) -> EndbitR {
        EndbitR::new(((self.bits >> 3) & 1) != 0)
    }
    #[doc = "Bit 4 - 4:4\\]
Occurs if the Command Index error occurs in response to a command."]
    #[inline(always)]
    pub fn index(&self) -> IndexR {
        IndexR::new(((self.bits >> 4) & 1) != 0)
    }
    #[doc = "Bit 5 - 5:5\\]
This bit is set when Response Error Check Enable in the Transfer Mode register is set to 1 and an error is detected in R1 response of either Auto CMD12 or Auto CMD23. This status should be ignored if any bit of D00 to D04 is set to 1."]
    #[inline(always)]
    pub fn resp(&self) -> RespR {
        RespR::new(((self.bits >> 5) & 1) != 0)
    }
    #[doc = "Bit 7 - 7:7\\]
Setting this bit to 1 means CMD_wo_DAT is not executed due to an Auto CMD12 error \\[D04- D01\\]
in this register. This bit is set to 0 when Auto CMD Error is generated by Auto CMD23."]
    #[inline(always)]
    pub fn cmd_not_issued(&self) -> CmdNotIssuedR {
        CmdNotIssuedR::new(((self.bits >> 7) & 1) != 0)
    }
}
impl W {
    #[doc = "Bit 0 - 0:0\\]
If memory multiple block data transfer is not started due to command error, this bit is not set because it is not necessary to issue Auto CMD12. Setting this bit to 1 means the HC cannot issue Auto CMD12 to stop memory multiple block transfer due to some error. If this bit is set to 1, other error status bits \\[D04 - D01\\]
are meaningless. This bit is set to 0 when Auto CMD Error is generated by Auto CMD23"]
    #[inline(always)]
    #[must_use]
    pub fn acmd12_not_exec(&mut self) -> Acmd12NotExecW<SdhcWrap_CtlCfg_CtlcfgAutocmdErrStsSpec> {
        Acmd12NotExecW::new(self, 0)
    }
    #[doc = "Bit 1 - 1:1\\]
Occurs if the no response is returned within 64 SDCLK cycles from the end bit of the command.If this bit is set to 1, the other error status bits \\[D04 - D02\\]
are meaningless."]
    #[inline(always)]
    #[must_use]
    pub fn timeout(&mut self) -> TimeoutW<SdhcWrap_CtlCfg_CtlcfgAutocmdErrStsSpec> {
        TimeoutW::new(self, 1)
    }
    #[doc = "Bit 2 - 2:2\\]
Occurs when detecting a CRC error in the command response."]
    #[inline(always)]
    #[must_use]
    pub fn crc(&mut self) -> CrcW<SdhcWrap_CtlCfg_CtlcfgAutocmdErrStsSpec> {
        CrcW::new(self, 2)
    }
    #[doc = "Bit 3 - 3:3\\]
Occurs when detecting that the end bit of command response is 0."]
    #[inline(always)]
    #[must_use]
    pub fn endbit(&mut self) -> EndbitW<SdhcWrap_CtlCfg_CtlcfgAutocmdErrStsSpec> {
        EndbitW::new(self, 3)
    }
    #[doc = "Bit 4 - 4:4\\]
Occurs if the Command Index error occurs in response to a command."]
    #[inline(always)]
    #[must_use]
    pub fn index(&mut self) -> IndexW<SdhcWrap_CtlCfg_CtlcfgAutocmdErrStsSpec> {
        IndexW::new(self, 4)
    }
    #[doc = "Bit 5 - 5:5\\]
This bit is set when Response Error Check Enable in the Transfer Mode register is set to 1 and an error is detected in R1 response of either Auto CMD12 or Auto CMD23. This status should be ignored if any bit of D00 to D04 is set to 1."]
    #[inline(always)]
    #[must_use]
    pub fn resp(&mut self) -> RespW<SdhcWrap_CtlCfg_CtlcfgAutocmdErrStsSpec> {
        RespW::new(self, 5)
    }
    #[doc = "Bit 7 - 7:7\\]
Setting this bit to 1 means CMD_wo_DAT is not executed due to an Auto CMD12 error \\[D04- D01\\]
in this register. This bit is set to 0 when Auto CMD Error is generated by Auto CMD23."]
    #[inline(always)]
    #[must_use]
    pub fn cmd_not_issued(&mut self) -> CmdNotIssuedW<SdhcWrap_CtlCfg_CtlcfgAutocmdErrStsSpec> {
        CmdNotIssuedW::new(self, 7)
    }
}
#[doc = "This register is used to indicate CMD12 response error of Auto CMD12 and CMD23 response error of Auto CMD 23\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`sdhc_wrap__ctl_cfg__ctlcfg_autocmd_err_sts::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`sdhc_wrap__ctl_cfg__ctlcfg_autocmd_err_sts::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
pub struct SdhcWrap_CtlCfg_CtlcfgAutocmdErrStsSpec;
impl crate::RegisterSpec for SdhcWrap_CtlCfg_CtlcfgAutocmdErrStsSpec {
    type Ux = u16;
}
#[doc = "`read()` method returns [`sdhc_wrap__ctl_cfg__ctlcfg_autocmd_err_sts::R`](R) reader structure"]
impl crate::Readable for SdhcWrap_CtlCfg_CtlcfgAutocmdErrStsSpec {}
#[doc = "`write(|w| ..)` method takes [`sdhc_wrap__ctl_cfg__ctlcfg_autocmd_err_sts::W`](W) writer structure"]
impl crate::Writable for SdhcWrap_CtlCfg_CtlcfgAutocmdErrStsSpec {
    type Safety = crate::Unsafe;
    const ZERO_TO_MODIFY_FIELDS_BITMAP: u16 = 0;
    const ONE_TO_MODIFY_FIELDS_BITMAP: u16 = 0;
}
#[doc = "`reset()` method sets SDHC_WRAP__CTL_CFG__CTLCFG_autocmd_err_sts to value 0"]
impl crate::Resettable for SdhcWrap_CtlCfg_CtlcfgAutocmdErrStsSpec {
    const RESET_VALUE: u16 = 0;
}
