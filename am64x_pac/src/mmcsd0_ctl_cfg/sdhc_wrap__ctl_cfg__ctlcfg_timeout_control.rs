#[doc = "Register `SDHC_WRAP__CTL_CFG__CTLCFG_timeout_control` reader"]
pub type R = crate::R<SdhcWrap_CtlCfg_CtlcfgTimeoutControlSpec>;
#[doc = "Register `SDHC_WRAP__CTL_CFG__CTLCFG_timeout_control` writer"]
pub type W = crate::W<SdhcWrap_CtlCfg_CtlcfgTimeoutControlSpec>;
#[doc = "Field `COUNTER_VALUE` reader - 3:0\\]
This value determines the interval by which DAT line time-outs are detected. Refer to the Data Time-out Error in the Error Interrupt Status register for information on factors that dictate time-out generation. Time-out clock frequency will be generated by dividing the sdclockTMCLK by this value. When setting this register, prevent inadvertent time-out events by clearing the Data Time-out Error Status Enable \\[in the Error Interrupt Status Enable register\\]. 1111 - Reserved 1110 - TMCLK * 2^27 -------------------- -------------------- 0001 - TMCLK * 2^14 0000 - TMCLK * 2^13"]
pub type CounterValueR = crate::FieldReader;
#[doc = "Field `COUNTER_VALUE` writer - 3:0\\]
This value determines the interval by which DAT line time-outs are detected. Refer to the Data Time-out Error in the Error Interrupt Status register for information on factors that dictate time-out generation. Time-out clock frequency will be generated by dividing the sdclockTMCLK by this value. When setting this register, prevent inadvertent time-out events by clearing the Data Time-out Error Status Enable \\[in the Error Interrupt Status Enable register\\]. 1111 - Reserved 1110 - TMCLK * 2^27 -------------------- -------------------- 0001 - TMCLK * 2^14 0000 - TMCLK * 2^13"]
pub type CounterValueW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
impl R {
    #[doc = "Bits 0:3 - 3:0\\]
This value determines the interval by which DAT line time-outs are detected. Refer to the Data Time-out Error in the Error Interrupt Status register for information on factors that dictate time-out generation. Time-out clock frequency will be generated by dividing the sdclockTMCLK by this value. When setting this register, prevent inadvertent time-out events by clearing the Data Time-out Error Status Enable \\[in the Error Interrupt Status Enable register\\]. 1111 - Reserved 1110 - TMCLK * 2^27 -------------------- -------------------- 0001 - TMCLK * 2^14 0000 - TMCLK * 2^13"]
    #[inline(always)]
    pub fn counter_value(&self) -> CounterValueR {
        CounterValueR::new(self.bits & 0x0f)
    }
}
impl W {
    #[doc = "Bits 0:3 - 3:0\\]
This value determines the interval by which DAT line time-outs are detected. Refer to the Data Time-out Error in the Error Interrupt Status register for information on factors that dictate time-out generation. Time-out clock frequency will be generated by dividing the sdclockTMCLK by this value. When setting this register, prevent inadvertent time-out events by clearing the Data Time-out Error Status Enable \\[in the Error Interrupt Status Enable register\\]. 1111 - Reserved 1110 - TMCLK * 2^27 -------------------- -------------------- 0001 - TMCLK * 2^14 0000 - TMCLK * 2^13"]
    #[inline(always)]
    #[must_use]
    pub fn counter_value(&mut self) -> CounterValueW<SdhcWrap_CtlCfg_CtlcfgTimeoutControlSpec> {
        CounterValueW::new(self, 0)
    }
}
#[doc = "The register sets the Data Timeout counter value\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`sdhc_wrap__ctl_cfg__ctlcfg_timeout_control::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`sdhc_wrap__ctl_cfg__ctlcfg_timeout_control::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
pub struct SdhcWrap_CtlCfg_CtlcfgTimeoutControlSpec;
impl crate::RegisterSpec for SdhcWrap_CtlCfg_CtlcfgTimeoutControlSpec {
    type Ux = u8;
}
#[doc = "`read()` method returns [`sdhc_wrap__ctl_cfg__ctlcfg_timeout_control::R`](R) reader structure"]
impl crate::Readable for SdhcWrap_CtlCfg_CtlcfgTimeoutControlSpec {}
#[doc = "`write(|w| ..)` method takes [`sdhc_wrap__ctl_cfg__ctlcfg_timeout_control::W`](W) writer structure"]
impl crate::Writable for SdhcWrap_CtlCfg_CtlcfgTimeoutControlSpec {
    type Safety = crate::Unsafe;
    const ZERO_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
    const ONE_TO_MODIFY_FIELDS_BITMAP: u8 = 0;
}
#[doc = "`reset()` method sets SDHC_WRAP__CTL_CFG__CTLCFG_timeout_control to value 0"]
impl crate::Resettable for SdhcWrap_CtlCfg_CtlcfgTimeoutControlSpec {
    const RESET_VALUE: u8 = 0;
}
