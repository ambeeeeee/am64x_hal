#[repr(C)]
#[doc = "Register block"]
pub struct RegisterBlock {
    _reserved0: [u8; 0x0400],
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_control:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion0Control,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_permission_0:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion0Permission0,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_permission_1:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion0Permission1,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_permission_2:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion0Permission2,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_start_address_l:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion0StartAddressL,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_start_address_h:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion0StartAddressH,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_end_address_l:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion0EndAddressL,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_end_address_h:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion0EndAddressH,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_control:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion1Control,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_permission_0:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion1Permission0,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_permission_1:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion1Permission1,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_permission_2:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion1Permission2,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_start_address_l:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion1StartAddressL,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_start_address_h:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion1StartAddressH,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_end_address_l:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion1EndAddressL,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_end_address_h:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion1EndAddressH,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_control:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion2Control,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_permission_0:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion2Permission0,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_permission_1:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion2Permission1,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_permission_2:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion2Permission2,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_start_address_l:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion2StartAddressL,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_start_address_h:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion2StartAddressH,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_end_address_l:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion2EndAddressL,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_end_address_h:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion2EndAddressH,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_control:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion3Control,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_permission_0:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion3Permission0,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_permission_1:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion3Permission1,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_permission_2:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion3Permission2,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_start_address_l:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion3StartAddressL,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_start_address_h:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion3StartAddressH,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_end_address_l:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion3EndAddressL,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_end_address_h:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion3EndAddressH,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_control:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion4Control,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_permission_0:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion4Permission0,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_permission_1:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion4Permission1,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_permission_2:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion4Permission2,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_start_address_l:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion4StartAddressL,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_start_address_h:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion4StartAddressH,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_end_address_l:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion4EndAddressL,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_end_address_h:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion4EndAddressH,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_control:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion5Control,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_permission_0:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion5Permission0,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_permission_1:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion5Permission1,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_permission_2:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion5Permission2,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_start_address_l:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion5StartAddressL,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_start_address_h:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion5StartAddressH,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_end_address_l:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion5EndAddressL,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_end_address_h:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion5EndAddressH,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_control:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion6Control,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_permission_0:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion6Permission0,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_permission_1:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion6Permission1,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_permission_2:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion6Permission2,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_start_address_l:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion6StartAddressL,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_start_address_h:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion6StartAddressH,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_end_address_l:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion6EndAddressL,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_end_address_h:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion6EndAddressH,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_control:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion7Control,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_permission_0:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion7Permission0,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_permission_1:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion7Permission1,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_permission_2:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion7Permission2,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_start_address_l:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion7StartAddressL,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_start_address_h:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion7StartAddressH,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_end_address_l:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion7EndAddressL,
    fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_end_address_h:
        FwRegsIsam64DdrWrapMain0DdrssFwRegion7EndAddressH,
    _reserved64: [u8; 0x0300],
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_control:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion0Control,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_permission_0:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion0Permission0,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_permission_1:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion0Permission1,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_permission_2:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion0Permission2,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_start_address_l:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion0StartAddressL,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_start_address_h:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion0StartAddressH,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_end_address_l:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion0EndAddressL,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_end_address_h:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion0EndAddressH,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_control:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion1Control,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_permission_0:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion1Permission0,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_permission_1:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion1Permission1,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_permission_2:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion1Permission2,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_start_address_l:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion1StartAddressL,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_start_address_h:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion1StartAddressH,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_end_address_l:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion1EndAddressL,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_end_address_h:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion1EndAddressH,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_control:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion2Control,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_permission_0:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion2Permission0,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_permission_1:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion2Permission1,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_permission_2:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion2Permission2,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_start_address_l:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion2StartAddressL,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_start_address_h:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion2StartAddressH,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_end_address_l:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion2EndAddressL,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_end_address_h:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion2EndAddressH,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_control:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion3Control,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_permission_0:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion3Permission0,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_permission_1:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion3Permission1,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_permission_2:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion3Permission2,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_start_address_l:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion3StartAddressL,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_start_address_h:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion3StartAddressH,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_end_address_l:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion3EndAddressL,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_end_address_h:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion3EndAddressH,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_control:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion4Control,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_permission_0:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion4Permission0,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_permission_1:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion4Permission1,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_permission_2:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion4Permission2,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_start_address_l:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion4StartAddressL,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_start_address_h:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion4StartAddressH,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_end_address_l:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion4EndAddressL,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_end_address_h:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion4EndAddressH,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_control:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion5Control,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_permission_0:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion5Permission0,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_permission_1:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion5Permission1,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_permission_2:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion5Permission2,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_start_address_l:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion5StartAddressL,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_start_address_h:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion5StartAddressH,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_end_address_l:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion5EndAddressL,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_end_address_h:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion5EndAddressH,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_control:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion6Control,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_permission_0:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion6Permission0,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_permission_1:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion6Permission1,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_permission_2:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion6Permission2,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_start_address_l:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion6StartAddressL,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_start_address_h:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion6StartAddressH,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_end_address_l:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion6EndAddressL,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_end_address_h:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion6EndAddressH,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_control:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion7Control,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_permission_0:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion7Permission0,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_permission_1:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion7Permission1,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_permission_2:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion7Permission2,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_start_address_l:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion7StartAddressL,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_start_address_h:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion7StartAddressH,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_end_address_l:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion7EndAddressL,
    fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_end_address_h:
        FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion7EndAddressH,
    _reserved128: [u8; 0x2f00],
    fw_regs_imsram32kx64e_main_0_slv_fw_region_0_control:
        FwRegsImsram32kx64eMain0SlvFwRegion0Control,
    fw_regs_imsram32kx64e_main_0_slv_fw_region_0_permission_0:
        FwRegsImsram32kx64eMain0SlvFwRegion0Permission0,
    fw_regs_imsram32kx64e_main_0_slv_fw_region_0_permission_1:
        FwRegsImsram32kx64eMain0SlvFwRegion0Permission1,
    fw_regs_imsram32kx64e_main_0_slv_fw_region_0_permission_2:
        FwRegsImsram32kx64eMain0SlvFwRegion0Permission2,
    fw_regs_imsram32kx64e_main_0_slv_fw_region_0_start_address_l:
        FwRegsImsram32kx64eMain0SlvFwRegion0StartAddressL,
    fw_regs_imsram32kx64e_main_0_slv_fw_region_0_start_address_h:
        FwRegsImsram32kx64eMain0SlvFwRegion0StartAddressH,
    fw_regs_imsram32kx64e_main_0_slv_fw_region_0_end_address_l:
        FwRegsImsram32kx64eMain0SlvFwRegion0EndAddressL,
    fw_regs_imsram32kx64e_main_0_slv_fw_region_0_end_address_h:
        FwRegsImsram32kx64eMain0SlvFwRegion0EndAddressH,
    fw_regs_imsram32kx64e_main_0_slv_fw_region_1_control:
        FwRegsImsram32kx64eMain0SlvFwRegion1Control,
    fw_regs_imsram32kx64e_main_0_slv_fw_region_1_permission_0:
        FwRegsImsram32kx64eMain0SlvFwRegion1Permission0,
    fw_regs_imsram32kx64e_main_0_slv_fw_region_1_permission_1:
        FwRegsImsram32kx64eMain0SlvFwRegion1Permission1,
    fw_regs_imsram32kx64e_main_0_slv_fw_region_1_permission_2:
        FwRegsImsram32kx64eMain0SlvFwRegion1Permission2,
    fw_regs_imsram32kx64e_main_0_slv_fw_region_1_start_address_l:
        FwRegsImsram32kx64eMain0SlvFwRegion1StartAddressL,
    fw_regs_imsram32kx64e_main_0_slv_fw_region_1_start_address_h:
        FwRegsImsram32kx64eMain0SlvFwRegion1StartAddressH,
    fw_regs_imsram32kx64e_main_0_slv_fw_region_1_end_address_l:
        FwRegsImsram32kx64eMain0SlvFwRegion1EndAddressL,
    fw_regs_imsram32kx64e_main_0_slv_fw_region_1_end_address_h:
        FwRegsImsram32kx64eMain0SlvFwRegion1EndAddressH,
    fw_regs_imsram32kx64e_main_0_slv_fw_region_2_control:
        FwRegsImsram32kx64eMain0SlvFwRegion2Control,
    fw_regs_imsram32kx64e_main_0_slv_fw_region_2_permission_0:
        FwRegsImsram32kx64eMain0SlvFwRegion2Permission0,
    fw_regs_imsram32kx64e_main_0_slv_fw_region_2_permission_1:
        FwRegsImsram32kx64eMain0SlvFwRegion2Permission1,
    fw_regs_imsram32kx64e_main_0_slv_fw_region_2_permission_2:
        FwRegsImsram32kx64eMain0SlvFwRegion2Permission2,
    fw_regs_imsram32kx64e_main_0_slv_fw_region_2_start_address_l:
        FwRegsImsram32kx64eMain0SlvFwRegion2StartAddressL,
    fw_regs_imsram32kx64e_main_0_slv_fw_region_2_start_address_h:
        FwRegsImsram32kx64eMain0SlvFwRegion2StartAddressH,
    fw_regs_imsram32kx64e_main_0_slv_fw_region_2_end_address_l:
        FwRegsImsram32kx64eMain0SlvFwRegion2EndAddressL,
    fw_regs_imsram32kx64e_main_0_slv_fw_region_2_end_address_h:
        FwRegsImsram32kx64eMain0SlvFwRegion2EndAddressH,
    fw_regs_imsram32kx64e_main_0_slv_fw_region_3_control:
        FwRegsImsram32kx64eMain0SlvFwRegion3Control,
    fw_regs_imsram32kx64e_main_0_slv_fw_region_3_permission_0:
        FwRegsImsram32kx64eMain0SlvFwRegion3Permission0,
    fw_regs_imsram32kx64e_main_0_slv_fw_region_3_permission_1:
        FwRegsImsram32kx64eMain0SlvFwRegion3Permission1,
    fw_regs_imsram32kx64e_main_0_slv_fw_region_3_permission_2:
        FwRegsImsram32kx64eMain0SlvFwRegion3Permission2,
    fw_regs_imsram32kx64e_main_0_slv_fw_region_3_start_address_l:
        FwRegsImsram32kx64eMain0SlvFwRegion3StartAddressL,
    fw_regs_imsram32kx64e_main_0_slv_fw_region_3_start_address_h:
        FwRegsImsram32kx64eMain0SlvFwRegion3StartAddressH,
    fw_regs_imsram32kx64e_main_0_slv_fw_region_3_end_address_l:
        FwRegsImsram32kx64eMain0SlvFwRegion3EndAddressL,
    fw_regs_imsram32kx64e_main_0_slv_fw_region_3_end_address_h:
        FwRegsImsram32kx64eMain0SlvFwRegion3EndAddressH,
    _reserved160: [u8; 0x0380],
    fw_regs_imsram32kx64e_main_1_slv_fw_region_0_control:
        FwRegsImsram32kx64eMain1SlvFwRegion0Control,
    fw_regs_imsram32kx64e_main_1_slv_fw_region_0_permission_0:
        FwRegsImsram32kx64eMain1SlvFwRegion0Permission0,
    fw_regs_imsram32kx64e_main_1_slv_fw_region_0_permission_1:
        FwRegsImsram32kx64eMain1SlvFwRegion0Permission1,
    fw_regs_imsram32kx64e_main_1_slv_fw_region_0_permission_2:
        FwRegsImsram32kx64eMain1SlvFwRegion0Permission2,
    fw_regs_imsram32kx64e_main_1_slv_fw_region_0_start_address_l:
        FwRegsImsram32kx64eMain1SlvFwRegion0StartAddressL,
    fw_regs_imsram32kx64e_main_1_slv_fw_region_0_start_address_h:
        FwRegsImsram32kx64eMain1SlvFwRegion0StartAddressH,
    fw_regs_imsram32kx64e_main_1_slv_fw_region_0_end_address_l:
        FwRegsImsram32kx64eMain1SlvFwRegion0EndAddressL,
    fw_regs_imsram32kx64e_main_1_slv_fw_region_0_end_address_h:
        FwRegsImsram32kx64eMain1SlvFwRegion0EndAddressH,
    fw_regs_imsram32kx64e_main_1_slv_fw_region_1_control:
        FwRegsImsram32kx64eMain1SlvFwRegion1Control,
    fw_regs_imsram32kx64e_main_1_slv_fw_region_1_permission_0:
        FwRegsImsram32kx64eMain1SlvFwRegion1Permission0,
    fw_regs_imsram32kx64e_main_1_slv_fw_region_1_permission_1:
        FwRegsImsram32kx64eMain1SlvFwRegion1Permission1,
    fw_regs_imsram32kx64e_main_1_slv_fw_region_1_permission_2:
        FwRegsImsram32kx64eMain1SlvFwRegion1Permission2,
    fw_regs_imsram32kx64e_main_1_slv_fw_region_1_start_address_l:
        FwRegsImsram32kx64eMain1SlvFwRegion1StartAddressL,
    fw_regs_imsram32kx64e_main_1_slv_fw_region_1_start_address_h:
        FwRegsImsram32kx64eMain1SlvFwRegion1StartAddressH,
    fw_regs_imsram32kx64e_main_1_slv_fw_region_1_end_address_l:
        FwRegsImsram32kx64eMain1SlvFwRegion1EndAddressL,
    fw_regs_imsram32kx64e_main_1_slv_fw_region_1_end_address_h:
        FwRegsImsram32kx64eMain1SlvFwRegion1EndAddressH,
    fw_regs_imsram32kx64e_main_1_slv_fw_region_2_control:
        FwRegsImsram32kx64eMain1SlvFwRegion2Control,
    fw_regs_imsram32kx64e_main_1_slv_fw_region_2_permission_0:
        FwRegsImsram32kx64eMain1SlvFwRegion2Permission0,
    fw_regs_imsram32kx64e_main_1_slv_fw_region_2_permission_1:
        FwRegsImsram32kx64eMain1SlvFwRegion2Permission1,
    fw_regs_imsram32kx64e_main_1_slv_fw_region_2_permission_2:
        FwRegsImsram32kx64eMain1SlvFwRegion2Permission2,
    fw_regs_imsram32kx64e_main_1_slv_fw_region_2_start_address_l:
        FwRegsImsram32kx64eMain1SlvFwRegion2StartAddressL,
    fw_regs_imsram32kx64e_main_1_slv_fw_region_2_start_address_h:
        FwRegsImsram32kx64eMain1SlvFwRegion2StartAddressH,
    fw_regs_imsram32kx64e_main_1_slv_fw_region_2_end_address_l:
        FwRegsImsram32kx64eMain1SlvFwRegion2EndAddressL,
    fw_regs_imsram32kx64e_main_1_slv_fw_region_2_end_address_h:
        FwRegsImsram32kx64eMain1SlvFwRegion2EndAddressH,
    fw_regs_imsram32kx64e_main_1_slv_fw_region_3_control:
        FwRegsImsram32kx64eMain1SlvFwRegion3Control,
    fw_regs_imsram32kx64e_main_1_slv_fw_region_3_permission_0:
        FwRegsImsram32kx64eMain1SlvFwRegion3Permission0,
    fw_regs_imsram32kx64e_main_1_slv_fw_region_3_permission_1:
        FwRegsImsram32kx64eMain1SlvFwRegion3Permission1,
    fw_regs_imsram32kx64e_main_1_slv_fw_region_3_permission_2:
        FwRegsImsram32kx64eMain1SlvFwRegion3Permission2,
    fw_regs_imsram32kx64e_main_1_slv_fw_region_3_start_address_l:
        FwRegsImsram32kx64eMain1SlvFwRegion3StartAddressL,
    fw_regs_imsram32kx64e_main_1_slv_fw_region_3_start_address_h:
        FwRegsImsram32kx64eMain1SlvFwRegion3StartAddressH,
    fw_regs_imsram32kx64e_main_1_slv_fw_region_3_end_address_l:
        FwRegsImsram32kx64eMain1SlvFwRegion3EndAddressL,
    fw_regs_imsram32kx64e_main_1_slv_fw_region_3_end_address_h:
        FwRegsImsram32kx64eMain1SlvFwRegion3EndAddressH,
    _reserved192: [u8; 0x0380],
    fw_regs_imsram32kx64e_main_2_slv_fw_region_0_control:
        FwRegsImsram32kx64eMain2SlvFwRegion0Control,
    fw_regs_imsram32kx64e_main_2_slv_fw_region_0_permission_0:
        FwRegsImsram32kx64eMain2SlvFwRegion0Permission0,
    fw_regs_imsram32kx64e_main_2_slv_fw_region_0_permission_1:
        FwRegsImsram32kx64eMain2SlvFwRegion0Permission1,
    fw_regs_imsram32kx64e_main_2_slv_fw_region_0_permission_2:
        FwRegsImsram32kx64eMain2SlvFwRegion0Permission2,
    fw_regs_imsram32kx64e_main_2_slv_fw_region_0_start_address_l:
        FwRegsImsram32kx64eMain2SlvFwRegion0StartAddressL,
    fw_regs_imsram32kx64e_main_2_slv_fw_region_0_start_address_h:
        FwRegsImsram32kx64eMain2SlvFwRegion0StartAddressH,
    fw_regs_imsram32kx64e_main_2_slv_fw_region_0_end_address_l:
        FwRegsImsram32kx64eMain2SlvFwRegion0EndAddressL,
    fw_regs_imsram32kx64e_main_2_slv_fw_region_0_end_address_h:
        FwRegsImsram32kx64eMain2SlvFwRegion0EndAddressH,
    fw_regs_imsram32kx64e_main_2_slv_fw_region_1_control:
        FwRegsImsram32kx64eMain2SlvFwRegion1Control,
    fw_regs_imsram32kx64e_main_2_slv_fw_region_1_permission_0:
        FwRegsImsram32kx64eMain2SlvFwRegion1Permission0,
    fw_regs_imsram32kx64e_main_2_slv_fw_region_1_permission_1:
        FwRegsImsram32kx64eMain2SlvFwRegion1Permission1,
    fw_regs_imsram32kx64e_main_2_slv_fw_region_1_permission_2:
        FwRegsImsram32kx64eMain2SlvFwRegion1Permission2,
    fw_regs_imsram32kx64e_main_2_slv_fw_region_1_start_address_l:
        FwRegsImsram32kx64eMain2SlvFwRegion1StartAddressL,
    fw_regs_imsram32kx64e_main_2_slv_fw_region_1_start_address_h:
        FwRegsImsram32kx64eMain2SlvFwRegion1StartAddressH,
    fw_regs_imsram32kx64e_main_2_slv_fw_region_1_end_address_l:
        FwRegsImsram32kx64eMain2SlvFwRegion1EndAddressL,
    fw_regs_imsram32kx64e_main_2_slv_fw_region_1_end_address_h:
        FwRegsImsram32kx64eMain2SlvFwRegion1EndAddressH,
    fw_regs_imsram32kx64e_main_2_slv_fw_region_2_control:
        FwRegsImsram32kx64eMain2SlvFwRegion2Control,
    fw_regs_imsram32kx64e_main_2_slv_fw_region_2_permission_0:
        FwRegsImsram32kx64eMain2SlvFwRegion2Permission0,
    fw_regs_imsram32kx64e_main_2_slv_fw_region_2_permission_1:
        FwRegsImsram32kx64eMain2SlvFwRegion2Permission1,
    fw_regs_imsram32kx64e_main_2_slv_fw_region_2_permission_2:
        FwRegsImsram32kx64eMain2SlvFwRegion2Permission2,
    fw_regs_imsram32kx64e_main_2_slv_fw_region_2_start_address_l:
        FwRegsImsram32kx64eMain2SlvFwRegion2StartAddressL,
    fw_regs_imsram32kx64e_main_2_slv_fw_region_2_start_address_h:
        FwRegsImsram32kx64eMain2SlvFwRegion2StartAddressH,
    fw_regs_imsram32kx64e_main_2_slv_fw_region_2_end_address_l:
        FwRegsImsram32kx64eMain2SlvFwRegion2EndAddressL,
    fw_regs_imsram32kx64e_main_2_slv_fw_region_2_end_address_h:
        FwRegsImsram32kx64eMain2SlvFwRegion2EndAddressH,
    fw_regs_imsram32kx64e_main_2_slv_fw_region_3_control:
        FwRegsImsram32kx64eMain2SlvFwRegion3Control,
    fw_regs_imsram32kx64e_main_2_slv_fw_region_3_permission_0:
        FwRegsImsram32kx64eMain2SlvFwRegion3Permission0,
    fw_regs_imsram32kx64e_main_2_slv_fw_region_3_permission_1:
        FwRegsImsram32kx64eMain2SlvFwRegion3Permission1,
    fw_regs_imsram32kx64e_main_2_slv_fw_region_3_permission_2:
        FwRegsImsram32kx64eMain2SlvFwRegion3Permission2,
    fw_regs_imsram32kx64e_main_2_slv_fw_region_3_start_address_l:
        FwRegsImsram32kx64eMain2SlvFwRegion3StartAddressL,
    fw_regs_imsram32kx64e_main_2_slv_fw_region_3_start_address_h:
        FwRegsImsram32kx64eMain2SlvFwRegion3StartAddressH,
    fw_regs_imsram32kx64e_main_2_slv_fw_region_3_end_address_l:
        FwRegsImsram32kx64eMain2SlvFwRegion3EndAddressL,
    fw_regs_imsram32kx64e_main_2_slv_fw_region_3_end_address_h:
        FwRegsImsram32kx64eMain2SlvFwRegion3EndAddressH,
    _reserved224: [u8; 0x0380],
    fw_regs_imsram32kx64e_main_5_slv_fw_region_0_control:
        FwRegsImsram32kx64eMain5SlvFwRegion0Control,
    fw_regs_imsram32kx64e_main_5_slv_fw_region_0_permission_0:
        FwRegsImsram32kx64eMain5SlvFwRegion0Permission0,
    fw_regs_imsram32kx64e_main_5_slv_fw_region_0_permission_1:
        FwRegsImsram32kx64eMain5SlvFwRegion0Permission1,
    fw_regs_imsram32kx64e_main_5_slv_fw_region_0_permission_2:
        FwRegsImsram32kx64eMain5SlvFwRegion0Permission2,
    fw_regs_imsram32kx64e_main_5_slv_fw_region_0_start_address_l:
        FwRegsImsram32kx64eMain5SlvFwRegion0StartAddressL,
    fw_regs_imsram32kx64e_main_5_slv_fw_region_0_start_address_h:
        FwRegsImsram32kx64eMain5SlvFwRegion0StartAddressH,
    fw_regs_imsram32kx64e_main_5_slv_fw_region_0_end_address_l:
        FwRegsImsram32kx64eMain5SlvFwRegion0EndAddressL,
    fw_regs_imsram32kx64e_main_5_slv_fw_region_0_end_address_h:
        FwRegsImsram32kx64eMain5SlvFwRegion0EndAddressH,
    fw_regs_imsram32kx64e_main_5_slv_fw_region_1_control:
        FwRegsImsram32kx64eMain5SlvFwRegion1Control,
    fw_regs_imsram32kx64e_main_5_slv_fw_region_1_permission_0:
        FwRegsImsram32kx64eMain5SlvFwRegion1Permission0,
    fw_regs_imsram32kx64e_main_5_slv_fw_region_1_permission_1:
        FwRegsImsram32kx64eMain5SlvFwRegion1Permission1,
    fw_regs_imsram32kx64e_main_5_slv_fw_region_1_permission_2:
        FwRegsImsram32kx64eMain5SlvFwRegion1Permission2,
    fw_regs_imsram32kx64e_main_5_slv_fw_region_1_start_address_l:
        FwRegsImsram32kx64eMain5SlvFwRegion1StartAddressL,
    fw_regs_imsram32kx64e_main_5_slv_fw_region_1_start_address_h:
        FwRegsImsram32kx64eMain5SlvFwRegion1StartAddressH,
    fw_regs_imsram32kx64e_main_5_slv_fw_region_1_end_address_l:
        FwRegsImsram32kx64eMain5SlvFwRegion1EndAddressL,
    fw_regs_imsram32kx64e_main_5_slv_fw_region_1_end_address_h:
        FwRegsImsram32kx64eMain5SlvFwRegion1EndAddressH,
    fw_regs_imsram32kx64e_main_5_slv_fw_region_2_control:
        FwRegsImsram32kx64eMain5SlvFwRegion2Control,
    fw_regs_imsram32kx64e_main_5_slv_fw_region_2_permission_0:
        FwRegsImsram32kx64eMain5SlvFwRegion2Permission0,
    fw_regs_imsram32kx64e_main_5_slv_fw_region_2_permission_1:
        FwRegsImsram32kx64eMain5SlvFwRegion2Permission1,
    fw_regs_imsram32kx64e_main_5_slv_fw_region_2_permission_2:
        FwRegsImsram32kx64eMain5SlvFwRegion2Permission2,
    fw_regs_imsram32kx64e_main_5_slv_fw_region_2_start_address_l:
        FwRegsImsram32kx64eMain5SlvFwRegion2StartAddressL,
    fw_regs_imsram32kx64e_main_5_slv_fw_region_2_start_address_h:
        FwRegsImsram32kx64eMain5SlvFwRegion2StartAddressH,
    fw_regs_imsram32kx64e_main_5_slv_fw_region_2_end_address_l:
        FwRegsImsram32kx64eMain5SlvFwRegion2EndAddressL,
    fw_regs_imsram32kx64e_main_5_slv_fw_region_2_end_address_h:
        FwRegsImsram32kx64eMain5SlvFwRegion2EndAddressH,
    fw_regs_imsram32kx64e_main_5_slv_fw_region_3_control:
        FwRegsImsram32kx64eMain5SlvFwRegion3Control,
    fw_regs_imsram32kx64e_main_5_slv_fw_region_3_permission_0:
        FwRegsImsram32kx64eMain5SlvFwRegion3Permission0,
    fw_regs_imsram32kx64e_main_5_slv_fw_region_3_permission_1:
        FwRegsImsram32kx64eMain5SlvFwRegion3Permission1,
    fw_regs_imsram32kx64e_main_5_slv_fw_region_3_permission_2:
        FwRegsImsram32kx64eMain5SlvFwRegion3Permission2,
    fw_regs_imsram32kx64e_main_5_slv_fw_region_3_start_address_l:
        FwRegsImsram32kx64eMain5SlvFwRegion3StartAddressL,
    fw_regs_imsram32kx64e_main_5_slv_fw_region_3_start_address_h:
        FwRegsImsram32kx64eMain5SlvFwRegion3StartAddressH,
    fw_regs_imsram32kx64e_main_5_slv_fw_region_3_end_address_l:
        FwRegsImsram32kx64eMain5SlvFwRegion3EndAddressL,
    fw_regs_imsram32kx64e_main_5_slv_fw_region_3_end_address_h:
        FwRegsImsram32kx64eMain5SlvFwRegion3EndAddressH,
    _reserved256: [u8; 0x0380],
    fw_regs_imsram32kx64e_main_4_slv_fw_region_0_control:
        FwRegsImsram32kx64eMain4SlvFwRegion0Control,
    fw_regs_imsram32kx64e_main_4_slv_fw_region_0_permission_0:
        FwRegsImsram32kx64eMain4SlvFwRegion0Permission0,
    fw_regs_imsram32kx64e_main_4_slv_fw_region_0_permission_1:
        FwRegsImsram32kx64eMain4SlvFwRegion0Permission1,
    fw_regs_imsram32kx64e_main_4_slv_fw_region_0_permission_2:
        FwRegsImsram32kx64eMain4SlvFwRegion0Permission2,
    fw_regs_imsram32kx64e_main_4_slv_fw_region_0_start_address_l:
        FwRegsImsram32kx64eMain4SlvFwRegion0StartAddressL,
    fw_regs_imsram32kx64e_main_4_slv_fw_region_0_start_address_h:
        FwRegsImsram32kx64eMain4SlvFwRegion0StartAddressH,
    fw_regs_imsram32kx64e_main_4_slv_fw_region_0_end_address_l:
        FwRegsImsram32kx64eMain4SlvFwRegion0EndAddressL,
    fw_regs_imsram32kx64e_main_4_slv_fw_region_0_end_address_h:
        FwRegsImsram32kx64eMain4SlvFwRegion0EndAddressH,
    fw_regs_imsram32kx64e_main_4_slv_fw_region_1_control:
        FwRegsImsram32kx64eMain4SlvFwRegion1Control,
    fw_regs_imsram32kx64e_main_4_slv_fw_region_1_permission_0:
        FwRegsImsram32kx64eMain4SlvFwRegion1Permission0,
    fw_regs_imsram32kx64e_main_4_slv_fw_region_1_permission_1:
        FwRegsImsram32kx64eMain4SlvFwRegion1Permission1,
    fw_regs_imsram32kx64e_main_4_slv_fw_region_1_permission_2:
        FwRegsImsram32kx64eMain4SlvFwRegion1Permission2,
    fw_regs_imsram32kx64e_main_4_slv_fw_region_1_start_address_l:
        FwRegsImsram32kx64eMain4SlvFwRegion1StartAddressL,
    fw_regs_imsram32kx64e_main_4_slv_fw_region_1_start_address_h:
        FwRegsImsram32kx64eMain4SlvFwRegion1StartAddressH,
    fw_regs_imsram32kx64e_main_4_slv_fw_region_1_end_address_l:
        FwRegsImsram32kx64eMain4SlvFwRegion1EndAddressL,
    fw_regs_imsram32kx64e_main_4_slv_fw_region_1_end_address_h:
        FwRegsImsram32kx64eMain4SlvFwRegion1EndAddressH,
    fw_regs_imsram32kx64e_main_4_slv_fw_region_2_control:
        FwRegsImsram32kx64eMain4SlvFwRegion2Control,
    fw_regs_imsram32kx64e_main_4_slv_fw_region_2_permission_0:
        FwRegsImsram32kx64eMain4SlvFwRegion2Permission0,
    fw_regs_imsram32kx64e_main_4_slv_fw_region_2_permission_1:
        FwRegsImsram32kx64eMain4SlvFwRegion2Permission1,
    fw_regs_imsram32kx64e_main_4_slv_fw_region_2_permission_2:
        FwRegsImsram32kx64eMain4SlvFwRegion2Permission2,
    fw_regs_imsram32kx64e_main_4_slv_fw_region_2_start_address_l:
        FwRegsImsram32kx64eMain4SlvFwRegion2StartAddressL,
    fw_regs_imsram32kx64e_main_4_slv_fw_region_2_start_address_h:
        FwRegsImsram32kx64eMain4SlvFwRegion2StartAddressH,
    fw_regs_imsram32kx64e_main_4_slv_fw_region_2_end_address_l:
        FwRegsImsram32kx64eMain4SlvFwRegion2EndAddressL,
    fw_regs_imsram32kx64e_main_4_slv_fw_region_2_end_address_h:
        FwRegsImsram32kx64eMain4SlvFwRegion2EndAddressH,
    fw_regs_imsram32kx64e_main_4_slv_fw_region_3_control:
        FwRegsImsram32kx64eMain4SlvFwRegion3Control,
    fw_regs_imsram32kx64e_main_4_slv_fw_region_3_permission_0:
        FwRegsImsram32kx64eMain4SlvFwRegion3Permission0,
    fw_regs_imsram32kx64e_main_4_slv_fw_region_3_permission_1:
        FwRegsImsram32kx64eMain4SlvFwRegion3Permission1,
    fw_regs_imsram32kx64e_main_4_slv_fw_region_3_permission_2:
        FwRegsImsram32kx64eMain4SlvFwRegion3Permission2,
    fw_regs_imsram32kx64e_main_4_slv_fw_region_3_start_address_l:
        FwRegsImsram32kx64eMain4SlvFwRegion3StartAddressL,
    fw_regs_imsram32kx64e_main_4_slv_fw_region_3_start_address_h:
        FwRegsImsram32kx64eMain4SlvFwRegion3StartAddressH,
    fw_regs_imsram32kx64e_main_4_slv_fw_region_3_end_address_l:
        FwRegsImsram32kx64eMain4SlvFwRegion3EndAddressL,
    fw_regs_imsram32kx64e_main_4_slv_fw_region_3_end_address_h:
        FwRegsImsram32kx64eMain4SlvFwRegion3EndAddressH,
    _reserved288: [u8; 0x0380],
    fw_regs_imsram32kx64e_main_3_slv_fw_region_0_control:
        FwRegsImsram32kx64eMain3SlvFwRegion0Control,
    fw_regs_imsram32kx64e_main_3_slv_fw_region_0_permission_0:
        FwRegsImsram32kx64eMain3SlvFwRegion0Permission0,
    fw_regs_imsram32kx64e_main_3_slv_fw_region_0_permission_1:
        FwRegsImsram32kx64eMain3SlvFwRegion0Permission1,
    fw_regs_imsram32kx64e_main_3_slv_fw_region_0_permission_2:
        FwRegsImsram32kx64eMain3SlvFwRegion0Permission2,
    fw_regs_imsram32kx64e_main_3_slv_fw_region_0_start_address_l:
        FwRegsImsram32kx64eMain3SlvFwRegion0StartAddressL,
    fw_regs_imsram32kx64e_main_3_slv_fw_region_0_start_address_h:
        FwRegsImsram32kx64eMain3SlvFwRegion0StartAddressH,
    fw_regs_imsram32kx64e_main_3_slv_fw_region_0_end_address_l:
        FwRegsImsram32kx64eMain3SlvFwRegion0EndAddressL,
    fw_regs_imsram32kx64e_main_3_slv_fw_region_0_end_address_h:
        FwRegsImsram32kx64eMain3SlvFwRegion0EndAddressH,
    fw_regs_imsram32kx64e_main_3_slv_fw_region_1_control:
        FwRegsImsram32kx64eMain3SlvFwRegion1Control,
    fw_regs_imsram32kx64e_main_3_slv_fw_region_1_permission_0:
        FwRegsImsram32kx64eMain3SlvFwRegion1Permission0,
    fw_regs_imsram32kx64e_main_3_slv_fw_region_1_permission_1:
        FwRegsImsram32kx64eMain3SlvFwRegion1Permission1,
    fw_regs_imsram32kx64e_main_3_slv_fw_region_1_permission_2:
        FwRegsImsram32kx64eMain3SlvFwRegion1Permission2,
    fw_regs_imsram32kx64e_main_3_slv_fw_region_1_start_address_l:
        FwRegsImsram32kx64eMain3SlvFwRegion1StartAddressL,
    fw_regs_imsram32kx64e_main_3_slv_fw_region_1_start_address_h:
        FwRegsImsram32kx64eMain3SlvFwRegion1StartAddressH,
    fw_regs_imsram32kx64e_main_3_slv_fw_region_1_end_address_l:
        FwRegsImsram32kx64eMain3SlvFwRegion1EndAddressL,
    fw_regs_imsram32kx64e_main_3_slv_fw_region_1_end_address_h:
        FwRegsImsram32kx64eMain3SlvFwRegion1EndAddressH,
    fw_regs_imsram32kx64e_main_3_slv_fw_region_2_control:
        FwRegsImsram32kx64eMain3SlvFwRegion2Control,
    fw_regs_imsram32kx64e_main_3_slv_fw_region_2_permission_0:
        FwRegsImsram32kx64eMain3SlvFwRegion2Permission0,
    fw_regs_imsram32kx64e_main_3_slv_fw_region_2_permission_1:
        FwRegsImsram32kx64eMain3SlvFwRegion2Permission1,
    fw_regs_imsram32kx64e_main_3_slv_fw_region_2_permission_2:
        FwRegsImsram32kx64eMain3SlvFwRegion2Permission2,
    fw_regs_imsram32kx64e_main_3_slv_fw_region_2_start_address_l:
        FwRegsImsram32kx64eMain3SlvFwRegion2StartAddressL,
    fw_regs_imsram32kx64e_main_3_slv_fw_region_2_start_address_h:
        FwRegsImsram32kx64eMain3SlvFwRegion2StartAddressH,
    fw_regs_imsram32kx64e_main_3_slv_fw_region_2_end_address_l:
        FwRegsImsram32kx64eMain3SlvFwRegion2EndAddressL,
    fw_regs_imsram32kx64e_main_3_slv_fw_region_2_end_address_h:
        FwRegsImsram32kx64eMain3SlvFwRegion2EndAddressH,
    fw_regs_imsram32kx64e_main_3_slv_fw_region_3_control:
        FwRegsImsram32kx64eMain3SlvFwRegion3Control,
    fw_regs_imsram32kx64e_main_3_slv_fw_region_3_permission_0:
        FwRegsImsram32kx64eMain3SlvFwRegion3Permission0,
    fw_regs_imsram32kx64e_main_3_slv_fw_region_3_permission_1:
        FwRegsImsram32kx64eMain3SlvFwRegion3Permission1,
    fw_regs_imsram32kx64e_main_3_slv_fw_region_3_permission_2:
        FwRegsImsram32kx64eMain3SlvFwRegion3Permission2,
    fw_regs_imsram32kx64e_main_3_slv_fw_region_3_start_address_l:
        FwRegsImsram32kx64eMain3SlvFwRegion3StartAddressL,
    fw_regs_imsram32kx64e_main_3_slv_fw_region_3_start_address_h:
        FwRegsImsram32kx64eMain3SlvFwRegion3StartAddressH,
    fw_regs_imsram32kx64e_main_3_slv_fw_region_3_end_address_l:
        FwRegsImsram32kx64eMain3SlvFwRegion3EndAddressL,
    fw_regs_imsram32kx64e_main_3_slv_fw_region_3_end_address_h:
        FwRegsImsram32kx64eMain3SlvFwRegion3EndAddressH,
    _reserved320: [u8; 0x0380],
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_control:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion0Control,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_permission_0:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion0Permission0,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_permission_1:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion0Permission1,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_permission_2:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion0Permission2,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_start_address_l:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion0StartAddressL,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_start_address_h:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion0StartAddressH,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_end_address_l:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion0EndAddressL,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_end_address_h:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion0EndAddressH,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_control:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion1Control,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_permission_0:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion1Permission0,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_permission_1:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion1Permission1,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_permission_2:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion1Permission2,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_start_address_l:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion1StartAddressL,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_start_address_h:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion1StartAddressH,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_end_address_l:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion1EndAddressL,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_end_address_h:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion1EndAddressH,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_control:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion2Control,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_permission_0:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion2Permission0,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_permission_1:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion2Permission1,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_permission_2:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion2Permission2,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_start_address_l:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion2StartAddressL,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_start_address_h:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion2StartAddressH,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_end_address_l:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion2EndAddressL,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_end_address_h:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion2EndAddressH,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_control:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion3Control,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_permission_0:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion3Permission0,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_permission_1:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion3Permission1,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_permission_2:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion3Permission2,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_start_address_l:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion3StartAddressL,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_start_address_h:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion3StartAddressH,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_end_address_l:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion3EndAddressL,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_end_address_h:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion3EndAddressH,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_control:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion4Control,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_permission_0:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion4Permission0,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_permission_1:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion4Permission1,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_permission_2:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion4Permission2,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_start_address_l:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion4StartAddressL,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_start_address_h:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion4StartAddressH,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_end_address_l:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion4EndAddressL,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_end_address_h:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion4EndAddressH,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_control:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion5Control,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_permission_0:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion5Permission0,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_permission_1:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion5Permission1,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_permission_2:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion5Permission2,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_start_address_l:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion5StartAddressL,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_start_address_h:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion5StartAddressH,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_end_address_l:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion5EndAddressL,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_end_address_h:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion5EndAddressH,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_control:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion6Control,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_permission_0:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion6Permission0,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_permission_1:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion6Permission1,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_permission_2:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion6Permission2,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_start_address_l:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion6StartAddressL,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_start_address_h:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion6StartAddressH,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_end_address_l:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion6EndAddressL,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_end_address_h:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion6EndAddressH,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_control:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion7Control,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_permission_0:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion7Permission0,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_permission_1:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion7Permission1,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_permission_2:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion7Permission2,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_start_address_l:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion7StartAddressL,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_start_address_h:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion7StartAddressH,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_end_address_l:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion7EndAddressL,
    fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_end_address_h:
        FwRegsIdmssAm64Main0IpcssVbmDstFwRegion7EndAddressH,
    _reserved384: [u8; 0x0300],
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_control:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion0Control,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_permission_0:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion0Permission0,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_permission_1:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion0Permission1,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_permission_2:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion0Permission2,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_start_address_l:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion0StartAddressL,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_start_address_h:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion0StartAddressH,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_end_address_l:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion0EndAddressL,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_end_address_h:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion0EndAddressH,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_control:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion1Control,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_permission_0:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion1Permission0,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_permission_1:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion1Permission1,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_permission_2:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion1Permission2,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_start_address_l:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion1StartAddressL,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_start_address_h:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion1StartAddressH,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_end_address_l:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion1EndAddressL,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_end_address_h:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion1EndAddressH,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_control:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion2Control,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_permission_0:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion2Permission0,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_permission_1:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion2Permission1,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_permission_2:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion2Permission2,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_start_address_l:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion2StartAddressL,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_start_address_h:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion2StartAddressH,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_end_address_l:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion2EndAddressL,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_end_address_h:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion2EndAddressH,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_control:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion3Control,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_permission_0:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion3Permission0,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_permission_1:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion3Permission1,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_permission_2:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion3Permission2,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_start_address_l:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion3StartAddressL,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_start_address_h:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion3StartAddressH,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_end_address_l:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion3EndAddressL,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_end_address_h:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion3EndAddressH,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_control:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion4Control,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_permission_0:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion4Permission0,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_permission_1:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion4Permission1,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_permission_2:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion4Permission2,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_start_address_l:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion4StartAddressL,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_start_address_h:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion4StartAddressH,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_end_address_l:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion4EndAddressL,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_end_address_h:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion4EndAddressH,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_control:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion5Control,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_permission_0:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion5Permission0,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_permission_1:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion5Permission1,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_permission_2:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion5Permission2,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_start_address_l:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion5StartAddressL,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_start_address_h:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion5StartAddressH,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_end_address_l:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion5EndAddressL,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_end_address_h:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion5EndAddressH,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_control:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion6Control,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_permission_0:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion6Permission0,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_permission_1:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion6Permission1,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_permission_2:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion6Permission2,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_start_address_l:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion6StartAddressL,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_start_address_h:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion6StartAddressH,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_end_address_l:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion6EndAddressL,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_end_address_h:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion6EndAddressH,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_control:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion7Control,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_permission_0:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion7Permission0,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_permission_1:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion7Permission1,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_permission_2:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion7Permission2,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_start_address_l:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion7StartAddressL,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_start_address_h:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion7StartAddressH,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_end_address_l:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion7EndAddressL,
    fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_end_address_h:
        FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion7EndAddressH,
    _reserved448: [u8; 0x0300],
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_control:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion0Control,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_permission_0:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion0Permission0,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_permission_1:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion0Permission1,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_permission_2:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion0Permission2,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_start_address_l:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion0StartAddressL,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_start_address_h:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion0StartAddressH,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_end_address_l:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion0EndAddressL,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_end_address_h:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion0EndAddressH,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_control:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion1Control,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_permission_0:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion1Permission0,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_permission_1:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion1Permission1,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_permission_2:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion1Permission2,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_start_address_l:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion1StartAddressL,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_start_address_h:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion1StartAddressH,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_end_address_l:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion1EndAddressL,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_end_address_h:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion1EndAddressH,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_control:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion2Control,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_permission_0:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion2Permission0,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_permission_1:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion2Permission1,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_permission_2:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion2Permission2,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_start_address_l:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion2StartAddressL,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_start_address_h:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion2StartAddressH,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_end_address_l:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion2EndAddressL,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_end_address_h:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion2EndAddressH,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_control:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion3Control,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_permission_0:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion3Permission0,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_permission_1:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion3Permission1,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_permission_2:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion3Permission2,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_start_address_l:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion3StartAddressL,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_start_address_h:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion3StartAddressH,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_end_address_l:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion3EndAddressL,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_end_address_h:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion3EndAddressH,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_control:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion4Control,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_permission_0:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion4Permission0,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_permission_1:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion4Permission1,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_permission_2:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion4Permission2,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_start_address_l:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion4StartAddressL,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_start_address_h:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion4StartAddressH,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_end_address_l:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion4EndAddressL,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_end_address_h:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion4EndAddressH,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_control:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion5Control,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_permission_0:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion5Permission0,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_permission_1:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion5Permission1,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_permission_2:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion5Permission2,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_start_address_l:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion5StartAddressL,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_start_address_h:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion5StartAddressH,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_end_address_l:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion5EndAddressL,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_end_address_h:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion5EndAddressH,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_control:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion6Control,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_permission_0:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion6Permission0,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_permission_1:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion6Permission1,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_permission_2:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion6Permission2,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_start_address_l:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion6StartAddressL,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_start_address_h:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion6StartAddressH,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_end_address_l:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion6EndAddressL,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_end_address_h:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion6EndAddressH,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_control:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion7Control,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_permission_0:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion7Permission0,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_permission_1:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion7Permission1,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_permission_2:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion7Permission2,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_start_address_l:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion7StartAddressL,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_start_address_h:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion7StartAddressH,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_end_address_l:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion7EndAddressL,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_end_address_h:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion7EndAddressH,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_control:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion8Control,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_permission_0:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion8Permission0,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_permission_1:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion8Permission1,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_permission_2:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion8Permission2,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_start_address_l:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion8StartAddressL,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_start_address_h:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion8StartAddressH,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_end_address_l:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion8EndAddressL,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_end_address_h:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion8EndAddressH,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_control:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion9Control,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_permission_0:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion9Permission0,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_permission_1:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion9Permission1,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_permission_2:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion9Permission2,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_start_address_l:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion9StartAddressL,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_start_address_h:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion9StartAddressH,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_end_address_l:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion9EndAddressL,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_end_address_h:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion9EndAddressH,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_control:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion10Control,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_permission_0:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion10Permission0,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_permission_1:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion10Permission1,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_permission_2:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion10Permission2,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_start_address_l:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion10StartAddressL,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_start_address_h:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion10StartAddressH,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_end_address_l:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion10EndAddressL,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_end_address_h:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion10EndAddressH,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_control:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion11Control,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_permission_0:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion11Permission0,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_permission_1:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion11Permission1,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_permission_2:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion11Permission2,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_start_address_l:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion11StartAddressL,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_start_address_h:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion11StartAddressH,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_end_address_l:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion11EndAddressL,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_end_address_h:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion11EndAddressH,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_control:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion12Control,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_permission_0:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion12Permission0,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_permission_1:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion12Permission1,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_permission_2:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion12Permission2,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_start_address_l:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion12StartAddressL,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_start_address_h:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion12StartAddressH,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_end_address_l:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion12EndAddressL,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_end_address_h:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion12EndAddressH,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_control:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion13Control,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_permission_0:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion13Permission0,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_permission_1:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion13Permission1,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_permission_2:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion13Permission2,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_start_address_l:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion13StartAddressL,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_start_address_h:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion13StartAddressH,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_end_address_l:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion13EndAddressL,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_end_address_h:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion13EndAddressH,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_control:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion14Control,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_permission_0:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion14Permission0,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_permission_1:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion14Permission1,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_permission_2:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion14Permission2,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_start_address_l:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion14StartAddressL,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_start_address_h:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion14StartAddressH,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_end_address_l:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion14EndAddressL,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_end_address_h:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion14EndAddressH,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_control:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion15Control,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_permission_0:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion15Permission0,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_permission_1:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion15Permission1,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_permission_2:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion15Permission2,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_start_address_l:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion15StartAddressL,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_start_address_h:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion15StartAddressH,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_end_address_l:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion15EndAddressL,
    fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_end_address_h:
        FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion15EndAddressH,
    _reserved576: [u8; 0x0200],
    fw_regs_imsram32kx64e_main_6_slv_fw_region_0_control:
        FwRegsImsram32kx64eMain6SlvFwRegion0Control,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_0_permission_0:
        FwRegsImsram32kx64eMain6SlvFwRegion0Permission0,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_0_permission_1:
        FwRegsImsram32kx64eMain6SlvFwRegion0Permission1,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_0_permission_2:
        FwRegsImsram32kx64eMain6SlvFwRegion0Permission2,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_0_start_address_l:
        FwRegsImsram32kx64eMain6SlvFwRegion0StartAddressL,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_0_start_address_h:
        FwRegsImsram32kx64eMain6SlvFwRegion0StartAddressH,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_0_end_address_l:
        FwRegsImsram32kx64eMain6SlvFwRegion0EndAddressL,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_0_end_address_h:
        FwRegsImsram32kx64eMain6SlvFwRegion0EndAddressH,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_1_control:
        FwRegsImsram32kx64eMain6SlvFwRegion1Control,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_1_permission_0:
        FwRegsImsram32kx64eMain6SlvFwRegion1Permission0,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_1_permission_1:
        FwRegsImsram32kx64eMain6SlvFwRegion1Permission1,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_1_permission_2:
        FwRegsImsram32kx64eMain6SlvFwRegion1Permission2,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_1_start_address_l:
        FwRegsImsram32kx64eMain6SlvFwRegion1StartAddressL,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_1_start_address_h:
        FwRegsImsram32kx64eMain6SlvFwRegion1StartAddressH,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_1_end_address_l:
        FwRegsImsram32kx64eMain6SlvFwRegion1EndAddressL,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_1_end_address_h:
        FwRegsImsram32kx64eMain6SlvFwRegion1EndAddressH,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_2_control:
        FwRegsImsram32kx64eMain6SlvFwRegion2Control,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_2_permission_0:
        FwRegsImsram32kx64eMain6SlvFwRegion2Permission0,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_2_permission_1:
        FwRegsImsram32kx64eMain6SlvFwRegion2Permission1,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_2_permission_2:
        FwRegsImsram32kx64eMain6SlvFwRegion2Permission2,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_2_start_address_l:
        FwRegsImsram32kx64eMain6SlvFwRegion2StartAddressL,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_2_start_address_h:
        FwRegsImsram32kx64eMain6SlvFwRegion2StartAddressH,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_2_end_address_l:
        FwRegsImsram32kx64eMain6SlvFwRegion2EndAddressL,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_2_end_address_h:
        FwRegsImsram32kx64eMain6SlvFwRegion2EndAddressH,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_3_control:
        FwRegsImsram32kx64eMain6SlvFwRegion3Control,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_3_permission_0:
        FwRegsImsram32kx64eMain6SlvFwRegion3Permission0,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_3_permission_1:
        FwRegsImsram32kx64eMain6SlvFwRegion3Permission1,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_3_permission_2:
        FwRegsImsram32kx64eMain6SlvFwRegion3Permission2,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_3_start_address_l:
        FwRegsImsram32kx64eMain6SlvFwRegion3StartAddressL,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_3_start_address_h:
        FwRegsImsram32kx64eMain6SlvFwRegion3StartAddressH,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_3_end_address_l:
        FwRegsImsram32kx64eMain6SlvFwRegion3EndAddressL,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_3_end_address_h:
        FwRegsImsram32kx64eMain6SlvFwRegion3EndAddressH,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_4_control:
        FwRegsImsram32kx64eMain6SlvFwRegion4Control,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_4_permission_0:
        FwRegsImsram32kx64eMain6SlvFwRegion4Permission0,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_4_permission_1:
        FwRegsImsram32kx64eMain6SlvFwRegion4Permission1,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_4_permission_2:
        FwRegsImsram32kx64eMain6SlvFwRegion4Permission2,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_4_start_address_l:
        FwRegsImsram32kx64eMain6SlvFwRegion4StartAddressL,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_4_start_address_h:
        FwRegsImsram32kx64eMain6SlvFwRegion4StartAddressH,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_4_end_address_l:
        FwRegsImsram32kx64eMain6SlvFwRegion4EndAddressL,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_4_end_address_h:
        FwRegsImsram32kx64eMain6SlvFwRegion4EndAddressH,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_5_control:
        FwRegsImsram32kx64eMain6SlvFwRegion5Control,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_5_permission_0:
        FwRegsImsram32kx64eMain6SlvFwRegion5Permission0,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_5_permission_1:
        FwRegsImsram32kx64eMain6SlvFwRegion5Permission1,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_5_permission_2:
        FwRegsImsram32kx64eMain6SlvFwRegion5Permission2,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_5_start_address_l:
        FwRegsImsram32kx64eMain6SlvFwRegion5StartAddressL,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_5_start_address_h:
        FwRegsImsram32kx64eMain6SlvFwRegion5StartAddressH,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_5_end_address_l:
        FwRegsImsram32kx64eMain6SlvFwRegion5EndAddressL,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_5_end_address_h:
        FwRegsImsram32kx64eMain6SlvFwRegion5EndAddressH,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_6_control:
        FwRegsImsram32kx64eMain6SlvFwRegion6Control,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_6_permission_0:
        FwRegsImsram32kx64eMain6SlvFwRegion6Permission0,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_6_permission_1:
        FwRegsImsram32kx64eMain6SlvFwRegion6Permission1,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_6_permission_2:
        FwRegsImsram32kx64eMain6SlvFwRegion6Permission2,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_6_start_address_l:
        FwRegsImsram32kx64eMain6SlvFwRegion6StartAddressL,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_6_start_address_h:
        FwRegsImsram32kx64eMain6SlvFwRegion6StartAddressH,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_6_end_address_l:
        FwRegsImsram32kx64eMain6SlvFwRegion6EndAddressL,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_6_end_address_h:
        FwRegsImsram32kx64eMain6SlvFwRegion6EndAddressH,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_7_control:
        FwRegsImsram32kx64eMain6SlvFwRegion7Control,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_7_permission_0:
        FwRegsImsram32kx64eMain6SlvFwRegion7Permission0,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_7_permission_1:
        FwRegsImsram32kx64eMain6SlvFwRegion7Permission1,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_7_permission_2:
        FwRegsImsram32kx64eMain6SlvFwRegion7Permission2,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_7_start_address_l:
        FwRegsImsram32kx64eMain6SlvFwRegion7StartAddressL,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_7_start_address_h:
        FwRegsImsram32kx64eMain6SlvFwRegion7StartAddressH,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_7_end_address_l:
        FwRegsImsram32kx64eMain6SlvFwRegion7EndAddressL,
    fw_regs_imsram32kx64e_main_6_slv_fw_region_7_end_address_h:
        FwRegsImsram32kx64eMain6SlvFwRegion7EndAddressH,
    _reserved640: [u8; 0x0300],
    fw_regs_imsram32kx64e_main_7_slv_fw_region_0_control:
        FwRegsImsram32kx64eMain7SlvFwRegion0Control,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_0_permission_0:
        FwRegsImsram32kx64eMain7SlvFwRegion0Permission0,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_0_permission_1:
        FwRegsImsram32kx64eMain7SlvFwRegion0Permission1,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_0_permission_2:
        FwRegsImsram32kx64eMain7SlvFwRegion0Permission2,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_0_start_address_l:
        FwRegsImsram32kx64eMain7SlvFwRegion0StartAddressL,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_0_start_address_h:
        FwRegsImsram32kx64eMain7SlvFwRegion0StartAddressH,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_0_end_address_l:
        FwRegsImsram32kx64eMain7SlvFwRegion0EndAddressL,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_0_end_address_h:
        FwRegsImsram32kx64eMain7SlvFwRegion0EndAddressH,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_1_control:
        FwRegsImsram32kx64eMain7SlvFwRegion1Control,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_1_permission_0:
        FwRegsImsram32kx64eMain7SlvFwRegion1Permission0,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_1_permission_1:
        FwRegsImsram32kx64eMain7SlvFwRegion1Permission1,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_1_permission_2:
        FwRegsImsram32kx64eMain7SlvFwRegion1Permission2,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_1_start_address_l:
        FwRegsImsram32kx64eMain7SlvFwRegion1StartAddressL,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_1_start_address_h:
        FwRegsImsram32kx64eMain7SlvFwRegion1StartAddressH,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_1_end_address_l:
        FwRegsImsram32kx64eMain7SlvFwRegion1EndAddressL,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_1_end_address_h:
        FwRegsImsram32kx64eMain7SlvFwRegion1EndAddressH,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_2_control:
        FwRegsImsram32kx64eMain7SlvFwRegion2Control,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_2_permission_0:
        FwRegsImsram32kx64eMain7SlvFwRegion2Permission0,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_2_permission_1:
        FwRegsImsram32kx64eMain7SlvFwRegion2Permission1,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_2_permission_2:
        FwRegsImsram32kx64eMain7SlvFwRegion2Permission2,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_2_start_address_l:
        FwRegsImsram32kx64eMain7SlvFwRegion2StartAddressL,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_2_start_address_h:
        FwRegsImsram32kx64eMain7SlvFwRegion2StartAddressH,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_2_end_address_l:
        FwRegsImsram32kx64eMain7SlvFwRegion2EndAddressL,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_2_end_address_h:
        FwRegsImsram32kx64eMain7SlvFwRegion2EndAddressH,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_3_control:
        FwRegsImsram32kx64eMain7SlvFwRegion3Control,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_3_permission_0:
        FwRegsImsram32kx64eMain7SlvFwRegion3Permission0,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_3_permission_1:
        FwRegsImsram32kx64eMain7SlvFwRegion3Permission1,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_3_permission_2:
        FwRegsImsram32kx64eMain7SlvFwRegion3Permission2,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_3_start_address_l:
        FwRegsImsram32kx64eMain7SlvFwRegion3StartAddressL,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_3_start_address_h:
        FwRegsImsram32kx64eMain7SlvFwRegion3StartAddressH,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_3_end_address_l:
        FwRegsImsram32kx64eMain7SlvFwRegion3EndAddressL,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_3_end_address_h:
        FwRegsImsram32kx64eMain7SlvFwRegion3EndAddressH,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_4_control:
        FwRegsImsram32kx64eMain7SlvFwRegion4Control,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_4_permission_0:
        FwRegsImsram32kx64eMain7SlvFwRegion4Permission0,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_4_permission_1:
        FwRegsImsram32kx64eMain7SlvFwRegion4Permission1,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_4_permission_2:
        FwRegsImsram32kx64eMain7SlvFwRegion4Permission2,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_4_start_address_l:
        FwRegsImsram32kx64eMain7SlvFwRegion4StartAddressL,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_4_start_address_h:
        FwRegsImsram32kx64eMain7SlvFwRegion4StartAddressH,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_4_end_address_l:
        FwRegsImsram32kx64eMain7SlvFwRegion4EndAddressL,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_4_end_address_h:
        FwRegsImsram32kx64eMain7SlvFwRegion4EndAddressH,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_5_control:
        FwRegsImsram32kx64eMain7SlvFwRegion5Control,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_5_permission_0:
        FwRegsImsram32kx64eMain7SlvFwRegion5Permission0,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_5_permission_1:
        FwRegsImsram32kx64eMain7SlvFwRegion5Permission1,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_5_permission_2:
        FwRegsImsram32kx64eMain7SlvFwRegion5Permission2,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_5_start_address_l:
        FwRegsImsram32kx64eMain7SlvFwRegion5StartAddressL,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_5_start_address_h:
        FwRegsImsram32kx64eMain7SlvFwRegion5StartAddressH,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_5_end_address_l:
        FwRegsImsram32kx64eMain7SlvFwRegion5EndAddressL,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_5_end_address_h:
        FwRegsImsram32kx64eMain7SlvFwRegion5EndAddressH,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_6_control:
        FwRegsImsram32kx64eMain7SlvFwRegion6Control,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_6_permission_0:
        FwRegsImsram32kx64eMain7SlvFwRegion6Permission0,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_6_permission_1:
        FwRegsImsram32kx64eMain7SlvFwRegion6Permission1,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_6_permission_2:
        FwRegsImsram32kx64eMain7SlvFwRegion6Permission2,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_6_start_address_l:
        FwRegsImsram32kx64eMain7SlvFwRegion6StartAddressL,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_6_start_address_h:
        FwRegsImsram32kx64eMain7SlvFwRegion6StartAddressH,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_6_end_address_l:
        FwRegsImsram32kx64eMain7SlvFwRegion6EndAddressL,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_6_end_address_h:
        FwRegsImsram32kx64eMain7SlvFwRegion6EndAddressH,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_7_control:
        FwRegsImsram32kx64eMain7SlvFwRegion7Control,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_7_permission_0:
        FwRegsImsram32kx64eMain7SlvFwRegion7Permission0,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_7_permission_1:
        FwRegsImsram32kx64eMain7SlvFwRegion7Permission1,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_7_permission_2:
        FwRegsImsram32kx64eMain7SlvFwRegion7Permission2,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_7_start_address_l:
        FwRegsImsram32kx64eMain7SlvFwRegion7StartAddressL,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_7_start_address_h:
        FwRegsImsram32kx64eMain7SlvFwRegion7StartAddressH,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_7_end_address_l:
        FwRegsImsram32kx64eMain7SlvFwRegion7EndAddressL,
    fw_regs_imsram32kx64e_main_7_slv_fw_region_7_end_address_h:
        FwRegsImsram32kx64eMain7SlvFwRegion7EndAddressH,
}
impl RegisterBlock {
    #[doc = "0x400 - The FW Region 0 Control Register defines the control fields for the slave Isam64_ddr_wrap_main_0.ddrss region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_control(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion0Control {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_control
    }
    #[doc = "0x404 - The FW Region 0 Permission 0 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_permission_0(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion0Permission0 {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_permission_0
    }
    #[doc = "0x408 - The FW Region 0 Permission 1 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_permission_1(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion0Permission1 {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_permission_1
    }
    #[doc = "0x40c - The FW Region 0 Permission 2 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_permission_2(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion0Permission2 {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_permission_2
    }
    #[doc = "0x410 - The FW Region 0 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_ddr_wrap_main_0.ddrss region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_start_address_l(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion0StartAddressL {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_start_address_l
    }
    #[doc = "0x414 - The FW Region 0 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_ddr_wrap_main_0.ddrss region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_start_address_h(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion0StartAddressH {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_start_address_h
    }
    #[doc = "0x418 - The FW Region 0 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_end_address_l(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion0EndAddressL {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_end_address_l
    }
    #[doc = "0x41c - The FW Region 0 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_end_address_h(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion0EndAddressH {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_end_address_h
    }
    #[doc = "0x420 - The FW Region 1 Control Register defines the control fields for the slave Isam64_ddr_wrap_main_0.ddrss region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_control(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion1Control {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_control
    }
    #[doc = "0x424 - The FW Region 1 Permission 0 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_permission_0(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion1Permission0 {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_permission_0
    }
    #[doc = "0x428 - The FW Region 1 Permission 1 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_permission_1(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion1Permission1 {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_permission_1
    }
    #[doc = "0x42c - The FW Region 1 Permission 2 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_permission_2(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion1Permission2 {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_permission_2
    }
    #[doc = "0x430 - The FW Region 1 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_ddr_wrap_main_0.ddrss region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_start_address_l(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion1StartAddressL {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_start_address_l
    }
    #[doc = "0x434 - The FW Region 1 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_ddr_wrap_main_0.ddrss region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_start_address_h(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion1StartAddressH {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_start_address_h
    }
    #[doc = "0x438 - The FW Region 1 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_end_address_l(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion1EndAddressL {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_end_address_l
    }
    #[doc = "0x43c - The FW Region 1 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_end_address_h(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion1EndAddressH {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_end_address_h
    }
    #[doc = "0x440 - The FW Region 2 Control Register defines the control fields for the slave Isam64_ddr_wrap_main_0.ddrss region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_control(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion2Control {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_control
    }
    #[doc = "0x444 - The FW Region 2 Permission 0 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_permission_0(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion2Permission0 {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_permission_0
    }
    #[doc = "0x448 - The FW Region 2 Permission 1 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_permission_1(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion2Permission1 {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_permission_1
    }
    #[doc = "0x44c - The FW Region 2 Permission 2 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_permission_2(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion2Permission2 {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_permission_2
    }
    #[doc = "0x450 - The FW Region 2 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_ddr_wrap_main_0.ddrss region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_start_address_l(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion2StartAddressL {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_start_address_l
    }
    #[doc = "0x454 - The FW Region 2 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_ddr_wrap_main_0.ddrss region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_start_address_h(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion2StartAddressH {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_start_address_h
    }
    #[doc = "0x458 - The FW Region 2 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_end_address_l(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion2EndAddressL {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_end_address_l
    }
    #[doc = "0x45c - The FW Region 2 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_end_address_h(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion2EndAddressH {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_end_address_h
    }
    #[doc = "0x460 - The FW Region 3 Control Register defines the control fields for the slave Isam64_ddr_wrap_main_0.ddrss region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_control(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion3Control {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_control
    }
    #[doc = "0x464 - The FW Region 3 Permission 0 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_permission_0(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion3Permission0 {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_permission_0
    }
    #[doc = "0x468 - The FW Region 3 Permission 1 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_permission_1(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion3Permission1 {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_permission_1
    }
    #[doc = "0x46c - The FW Region 3 Permission 2 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_permission_2(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion3Permission2 {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_permission_2
    }
    #[doc = "0x470 - The FW Region 3 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_ddr_wrap_main_0.ddrss region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_start_address_l(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion3StartAddressL {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_start_address_l
    }
    #[doc = "0x474 - The FW Region 3 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_ddr_wrap_main_0.ddrss region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_start_address_h(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion3StartAddressH {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_start_address_h
    }
    #[doc = "0x478 - The FW Region 3 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_end_address_l(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion3EndAddressL {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_end_address_l
    }
    #[doc = "0x47c - The FW Region 3 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_end_address_h(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion3EndAddressH {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_end_address_h
    }
    #[doc = "0x480 - The FW Region 4 Control Register defines the control fields for the slave Isam64_ddr_wrap_main_0.ddrss region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_control(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion4Control {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_control
    }
    #[doc = "0x484 - The FW Region 4 Permission 0 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_permission_0(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion4Permission0 {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_permission_0
    }
    #[doc = "0x488 - The FW Region 4 Permission 1 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_permission_1(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion4Permission1 {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_permission_1
    }
    #[doc = "0x48c - The FW Region 4 Permission 2 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_permission_2(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion4Permission2 {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_permission_2
    }
    #[doc = "0x490 - The FW Region 4 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_ddr_wrap_main_0.ddrss region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_start_address_l(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion4StartAddressL {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_start_address_l
    }
    #[doc = "0x494 - The FW Region 4 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_ddr_wrap_main_0.ddrss region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_start_address_h(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion4StartAddressH {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_start_address_h
    }
    #[doc = "0x498 - The FW Region 4 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_end_address_l(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion4EndAddressL {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_end_address_l
    }
    #[doc = "0x49c - The FW Region 4 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_end_address_h(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion4EndAddressH {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_end_address_h
    }
    #[doc = "0x4a0 - The FW Region 5 Control Register defines the control fields for the slave Isam64_ddr_wrap_main_0.ddrss region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_control(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion5Control {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_control
    }
    #[doc = "0x4a4 - The FW Region 5 Permission 0 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_permission_0(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion5Permission0 {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_permission_0
    }
    #[doc = "0x4a8 - The FW Region 5 Permission 1 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_permission_1(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion5Permission1 {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_permission_1
    }
    #[doc = "0x4ac - The FW Region 5 Permission 2 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_permission_2(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion5Permission2 {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_permission_2
    }
    #[doc = "0x4b0 - The FW Region 5 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_ddr_wrap_main_0.ddrss region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_start_address_l(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion5StartAddressL {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_start_address_l
    }
    #[doc = "0x4b4 - The FW Region 5 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_ddr_wrap_main_0.ddrss region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_start_address_h(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion5StartAddressH {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_start_address_h
    }
    #[doc = "0x4b8 - The FW Region 5 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_end_address_l(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion5EndAddressL {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_end_address_l
    }
    #[doc = "0x4bc - The FW Region 5 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_end_address_h(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion5EndAddressH {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_end_address_h
    }
    #[doc = "0x4c0 - The FW Region 6 Control Register defines the control fields for the slave Isam64_ddr_wrap_main_0.ddrss region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_control(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion6Control {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_control
    }
    #[doc = "0x4c4 - The FW Region 6 Permission 0 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_permission_0(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion6Permission0 {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_permission_0
    }
    #[doc = "0x4c8 - The FW Region 6 Permission 1 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_permission_1(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion6Permission1 {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_permission_1
    }
    #[doc = "0x4cc - The FW Region 6 Permission 2 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_permission_2(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion6Permission2 {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_permission_2
    }
    #[doc = "0x4d0 - The FW Region 6 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_ddr_wrap_main_0.ddrss region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_start_address_l(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion6StartAddressL {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_start_address_l
    }
    #[doc = "0x4d4 - The FW Region 6 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_ddr_wrap_main_0.ddrss region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_start_address_h(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion6StartAddressH {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_start_address_h
    }
    #[doc = "0x4d8 - The FW Region 6 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_end_address_l(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion6EndAddressL {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_end_address_l
    }
    #[doc = "0x4dc - The FW Region 6 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_end_address_h(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion6EndAddressH {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_end_address_h
    }
    #[doc = "0x4e0 - The FW Region 7 Control Register defines the control fields for the slave Isam64_ddr_wrap_main_0.ddrss region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_control(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion7Control {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_control
    }
    #[doc = "0x4e4 - The FW Region 7 Permission 0 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_permission_0(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion7Permission0 {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_permission_0
    }
    #[doc = "0x4e8 - The FW Region 7 Permission 1 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_permission_1(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion7Permission1 {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_permission_1
    }
    #[doc = "0x4ec - The FW Region 7 Permission 2 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_permission_2(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion7Permission2 {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_permission_2
    }
    #[doc = "0x4f0 - The FW Region 7 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_ddr_wrap_main_0.ddrss region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_start_address_l(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion7StartAddressL {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_start_address_l
    }
    #[doc = "0x4f4 - The FW Region 7 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_ddr_wrap_main_0.ddrss region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_start_address_h(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion7StartAddressH {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_start_address_h
    }
    #[doc = "0x4f8 - The FW Region 7 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_end_address_l(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion7EndAddressL {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_end_address_l
    }
    #[doc = "0x4fc - The FW Region 7 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_end_address_h(
        &self,
    ) -> &FwRegsIsam64DdrWrapMain0DdrssFwRegion7EndAddressH {
        &self.fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_end_address_h
    }
    #[doc = "0x800 - The FW Region 0 Control Register defines the control fields for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_control(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion0Control {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_control
    }
    #[doc = "0x804 - The FW Region 0 Permission 0 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_permission_0(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion0Permission0 {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_permission_0
    }
    #[doc = "0x808 - The FW Region 0 Permission 1 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_permission_1(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion0Permission1 {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_permission_1
    }
    #[doc = "0x80c - The FW Region 0 Permission 2 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_permission_2(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion0Permission2 {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_permission_2
    }
    #[doc = "0x810 - The FW Region 0 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_start_address_l(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion0StartAddressL {
        & self . fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_start_address_l
    }
    #[doc = "0x814 - The FW Region 0 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_start_address_h(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion0StartAddressH {
        & self . fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_start_address_h
    }
    #[doc = "0x818 - The FW Region 0 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_end_address_l(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion0EndAddressL {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_end_address_l
    }
    #[doc = "0x81c - The FW Region 0 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_end_address_h(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion0EndAddressH {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_end_address_h
    }
    #[doc = "0x820 - The FW Region 1 Control Register defines the control fields for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_control(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion1Control {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_control
    }
    #[doc = "0x824 - The FW Region 1 Permission 0 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_permission_0(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion1Permission0 {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_permission_0
    }
    #[doc = "0x828 - The FW Region 1 Permission 1 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_permission_1(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion1Permission1 {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_permission_1
    }
    #[doc = "0x82c - The FW Region 1 Permission 2 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_permission_2(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion1Permission2 {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_permission_2
    }
    #[doc = "0x830 - The FW Region 1 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_start_address_l(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion1StartAddressL {
        & self . fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_start_address_l
    }
    #[doc = "0x834 - The FW Region 1 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_start_address_h(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion1StartAddressH {
        & self . fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_start_address_h
    }
    #[doc = "0x838 - The FW Region 1 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_end_address_l(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion1EndAddressL {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_end_address_l
    }
    #[doc = "0x83c - The FW Region 1 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_end_address_h(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion1EndAddressH {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_end_address_h
    }
    #[doc = "0x840 - The FW Region 2 Control Register defines the control fields for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_control(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion2Control {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_control
    }
    #[doc = "0x844 - The FW Region 2 Permission 0 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_permission_0(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion2Permission0 {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_permission_0
    }
    #[doc = "0x848 - The FW Region 2 Permission 1 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_permission_1(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion2Permission1 {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_permission_1
    }
    #[doc = "0x84c - The FW Region 2 Permission 2 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_permission_2(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion2Permission2 {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_permission_2
    }
    #[doc = "0x850 - The FW Region 2 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_start_address_l(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion2StartAddressL {
        & self . fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_start_address_l
    }
    #[doc = "0x854 - The FW Region 2 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_start_address_h(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion2StartAddressH {
        & self . fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_start_address_h
    }
    #[doc = "0x858 - The FW Region 2 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_end_address_l(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion2EndAddressL {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_end_address_l
    }
    #[doc = "0x85c - The FW Region 2 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_end_address_h(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion2EndAddressH {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_end_address_h
    }
    #[doc = "0x860 - The FW Region 3 Control Register defines the control fields for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_control(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion3Control {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_control
    }
    #[doc = "0x864 - The FW Region 3 Permission 0 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_permission_0(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion3Permission0 {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_permission_0
    }
    #[doc = "0x868 - The FW Region 3 Permission 1 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_permission_1(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion3Permission1 {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_permission_1
    }
    #[doc = "0x86c - The FW Region 3 Permission 2 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_permission_2(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion3Permission2 {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_permission_2
    }
    #[doc = "0x870 - The FW Region 3 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_start_address_l(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion3StartAddressL {
        & self . fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_start_address_l
    }
    #[doc = "0x874 - The FW Region 3 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_start_address_h(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion3StartAddressH {
        & self . fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_start_address_h
    }
    #[doc = "0x878 - The FW Region 3 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_end_address_l(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion3EndAddressL {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_end_address_l
    }
    #[doc = "0x87c - The FW Region 3 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_end_address_h(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion3EndAddressH {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_end_address_h
    }
    #[doc = "0x880 - The FW Region 4 Control Register defines the control fields for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_control(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion4Control {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_control
    }
    #[doc = "0x884 - The FW Region 4 Permission 0 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_permission_0(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion4Permission0 {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_permission_0
    }
    #[doc = "0x888 - The FW Region 4 Permission 1 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_permission_1(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion4Permission1 {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_permission_1
    }
    #[doc = "0x88c - The FW Region 4 Permission 2 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_permission_2(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion4Permission2 {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_permission_2
    }
    #[doc = "0x890 - The FW Region 4 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_start_address_l(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion4StartAddressL {
        & self . fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_start_address_l
    }
    #[doc = "0x894 - The FW Region 4 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_start_address_h(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion4StartAddressH {
        & self . fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_start_address_h
    }
    #[doc = "0x898 - The FW Region 4 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_end_address_l(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion4EndAddressL {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_end_address_l
    }
    #[doc = "0x89c - The FW Region 4 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_end_address_h(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion4EndAddressH {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_end_address_h
    }
    #[doc = "0x8a0 - The FW Region 5 Control Register defines the control fields for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_control(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion5Control {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_control
    }
    #[doc = "0x8a4 - The FW Region 5 Permission 0 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_permission_0(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion5Permission0 {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_permission_0
    }
    #[doc = "0x8a8 - The FW Region 5 Permission 1 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_permission_1(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion5Permission1 {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_permission_1
    }
    #[doc = "0x8ac - The FW Region 5 Permission 2 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_permission_2(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion5Permission2 {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_permission_2
    }
    #[doc = "0x8b0 - The FW Region 5 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_start_address_l(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion5StartAddressL {
        & self . fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_start_address_l
    }
    #[doc = "0x8b4 - The FW Region 5 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_start_address_h(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion5StartAddressH {
        & self . fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_start_address_h
    }
    #[doc = "0x8b8 - The FW Region 5 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_end_address_l(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion5EndAddressL {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_end_address_l
    }
    #[doc = "0x8bc - The FW Region 5 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_end_address_h(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion5EndAddressH {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_end_address_h
    }
    #[doc = "0x8c0 - The FW Region 6 Control Register defines the control fields for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_control(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion6Control {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_control
    }
    #[doc = "0x8c4 - The FW Region 6 Permission 0 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_permission_0(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion6Permission0 {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_permission_0
    }
    #[doc = "0x8c8 - The FW Region 6 Permission 1 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_permission_1(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion6Permission1 {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_permission_1
    }
    #[doc = "0x8cc - The FW Region 6 Permission 2 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_permission_2(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion6Permission2 {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_permission_2
    }
    #[doc = "0x8d0 - The FW Region 6 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_start_address_l(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion6StartAddressL {
        & self . fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_start_address_l
    }
    #[doc = "0x8d4 - The FW Region 6 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_start_address_h(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion6StartAddressH {
        & self . fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_start_address_h
    }
    #[doc = "0x8d8 - The FW Region 6 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_end_address_l(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion6EndAddressL {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_end_address_l
    }
    #[doc = "0x8dc - The FW Region 6 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_end_address_h(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion6EndAddressH {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_end_address_h
    }
    #[doc = "0x8e0 - The FW Region 7 Control Register defines the control fields for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_control(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion7Control {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_control
    }
    #[doc = "0x8e4 - The FW Region 7 Permission 0 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_permission_0(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion7Permission0 {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_permission_0
    }
    #[doc = "0x8e8 - The FW Region 7 Permission 1 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_permission_1(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion7Permission1 {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_permission_1
    }
    #[doc = "0x8ec - The FW Region 7 Permission 2 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_permission_2(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion7Permission2 {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_permission_2
    }
    #[doc = "0x8f0 - The FW Region 7 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_start_address_l(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion7StartAddressL {
        & self . fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_start_address_l
    }
    #[doc = "0x8f4 - The FW Region 7 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_start_address_h(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion7StartAddressH {
        & self . fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_start_address_h
    }
    #[doc = "0x8f8 - The FW Region 7 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_end_address_l(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion7EndAddressL {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_end_address_l
    }
    #[doc = "0x8fc - The FW Region 7 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_end_address_h(
        &self,
    ) -> &FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion7EndAddressH {
        &self.fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_end_address_h
    }
    #[doc = "0x3800 - The FW Region 0 Control Register defines the control fields for the slave Imsram32kx64e_main_0.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_0_slv_fw_region_0_control(
        &self,
    ) -> &FwRegsImsram32kx64eMain0SlvFwRegion0Control {
        &self.fw_regs_imsram32kx64e_main_0_slv_fw_region_0_control
    }
    #[doc = "0x3804 - The FW Region 0 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_0.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_0_slv_fw_region_0_permission_0(
        &self,
    ) -> &FwRegsImsram32kx64eMain0SlvFwRegion0Permission0 {
        &self.fw_regs_imsram32kx64e_main_0_slv_fw_region_0_permission_0
    }
    #[doc = "0x3808 - The FW Region 0 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_0.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_0_slv_fw_region_0_permission_1(
        &self,
    ) -> &FwRegsImsram32kx64eMain0SlvFwRegion0Permission1 {
        &self.fw_regs_imsram32kx64e_main_0_slv_fw_region_0_permission_1
    }
    #[doc = "0x380c - The FW Region 0 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_0.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_0_slv_fw_region_0_permission_2(
        &self,
    ) -> &FwRegsImsram32kx64eMain0SlvFwRegion0Permission2 {
        &self.fw_regs_imsram32kx64e_main_0_slv_fw_region_0_permission_2
    }
    #[doc = "0x3810 - The FW Region 0 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_0.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_0_slv_fw_region_0_start_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain0SlvFwRegion0StartAddressL {
        &self.fw_regs_imsram32kx64e_main_0_slv_fw_region_0_start_address_l
    }
    #[doc = "0x3814 - The FW Region 0 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_0.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_0_slv_fw_region_0_start_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain0SlvFwRegion0StartAddressH {
        &self.fw_regs_imsram32kx64e_main_0_slv_fw_region_0_start_address_h
    }
    #[doc = "0x3818 - The FW Region 0 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_0.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_0_slv_fw_region_0_end_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain0SlvFwRegion0EndAddressL {
        &self.fw_regs_imsram32kx64e_main_0_slv_fw_region_0_end_address_l
    }
    #[doc = "0x381c - The FW Region 0 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_0.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_0_slv_fw_region_0_end_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain0SlvFwRegion0EndAddressH {
        &self.fw_regs_imsram32kx64e_main_0_slv_fw_region_0_end_address_h
    }
    #[doc = "0x3820 - The FW Region 1 Control Register defines the control fields for the slave Imsram32kx64e_main_0.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_0_slv_fw_region_1_control(
        &self,
    ) -> &FwRegsImsram32kx64eMain0SlvFwRegion1Control {
        &self.fw_regs_imsram32kx64e_main_0_slv_fw_region_1_control
    }
    #[doc = "0x3824 - The FW Region 1 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_0.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_0_slv_fw_region_1_permission_0(
        &self,
    ) -> &FwRegsImsram32kx64eMain0SlvFwRegion1Permission0 {
        &self.fw_regs_imsram32kx64e_main_0_slv_fw_region_1_permission_0
    }
    #[doc = "0x3828 - The FW Region 1 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_0.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_0_slv_fw_region_1_permission_1(
        &self,
    ) -> &FwRegsImsram32kx64eMain0SlvFwRegion1Permission1 {
        &self.fw_regs_imsram32kx64e_main_0_slv_fw_region_1_permission_1
    }
    #[doc = "0x382c - The FW Region 1 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_0.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_0_slv_fw_region_1_permission_2(
        &self,
    ) -> &FwRegsImsram32kx64eMain0SlvFwRegion1Permission2 {
        &self.fw_regs_imsram32kx64e_main_0_slv_fw_region_1_permission_2
    }
    #[doc = "0x3830 - The FW Region 1 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_0.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_0_slv_fw_region_1_start_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain0SlvFwRegion1StartAddressL {
        &self.fw_regs_imsram32kx64e_main_0_slv_fw_region_1_start_address_l
    }
    #[doc = "0x3834 - The FW Region 1 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_0.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_0_slv_fw_region_1_start_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain0SlvFwRegion1StartAddressH {
        &self.fw_regs_imsram32kx64e_main_0_slv_fw_region_1_start_address_h
    }
    #[doc = "0x3838 - The FW Region 1 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_0.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_0_slv_fw_region_1_end_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain0SlvFwRegion1EndAddressL {
        &self.fw_regs_imsram32kx64e_main_0_slv_fw_region_1_end_address_l
    }
    #[doc = "0x383c - The FW Region 1 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_0.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_0_slv_fw_region_1_end_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain0SlvFwRegion1EndAddressH {
        &self.fw_regs_imsram32kx64e_main_0_slv_fw_region_1_end_address_h
    }
    #[doc = "0x3840 - The FW Region 2 Control Register defines the control fields for the slave Imsram32kx64e_main_0.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_0_slv_fw_region_2_control(
        &self,
    ) -> &FwRegsImsram32kx64eMain0SlvFwRegion2Control {
        &self.fw_regs_imsram32kx64e_main_0_slv_fw_region_2_control
    }
    #[doc = "0x3844 - The FW Region 2 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_0.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_0_slv_fw_region_2_permission_0(
        &self,
    ) -> &FwRegsImsram32kx64eMain0SlvFwRegion2Permission0 {
        &self.fw_regs_imsram32kx64e_main_0_slv_fw_region_2_permission_0
    }
    #[doc = "0x3848 - The FW Region 2 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_0.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_0_slv_fw_region_2_permission_1(
        &self,
    ) -> &FwRegsImsram32kx64eMain0SlvFwRegion2Permission1 {
        &self.fw_regs_imsram32kx64e_main_0_slv_fw_region_2_permission_1
    }
    #[doc = "0x384c - The FW Region 2 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_0.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_0_slv_fw_region_2_permission_2(
        &self,
    ) -> &FwRegsImsram32kx64eMain0SlvFwRegion2Permission2 {
        &self.fw_regs_imsram32kx64e_main_0_slv_fw_region_2_permission_2
    }
    #[doc = "0x3850 - The FW Region 2 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_0.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_0_slv_fw_region_2_start_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain0SlvFwRegion2StartAddressL {
        &self.fw_regs_imsram32kx64e_main_0_slv_fw_region_2_start_address_l
    }
    #[doc = "0x3854 - The FW Region 2 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_0.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_0_slv_fw_region_2_start_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain0SlvFwRegion2StartAddressH {
        &self.fw_regs_imsram32kx64e_main_0_slv_fw_region_2_start_address_h
    }
    #[doc = "0x3858 - The FW Region 2 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_0.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_0_slv_fw_region_2_end_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain0SlvFwRegion2EndAddressL {
        &self.fw_regs_imsram32kx64e_main_0_slv_fw_region_2_end_address_l
    }
    #[doc = "0x385c - The FW Region 2 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_0.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_0_slv_fw_region_2_end_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain0SlvFwRegion2EndAddressH {
        &self.fw_regs_imsram32kx64e_main_0_slv_fw_region_2_end_address_h
    }
    #[doc = "0x3860 - The FW Region 3 Control Register defines the control fields for the slave Imsram32kx64e_main_0.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_0_slv_fw_region_3_control(
        &self,
    ) -> &FwRegsImsram32kx64eMain0SlvFwRegion3Control {
        &self.fw_regs_imsram32kx64e_main_0_slv_fw_region_3_control
    }
    #[doc = "0x3864 - The FW Region 3 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_0.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_0_slv_fw_region_3_permission_0(
        &self,
    ) -> &FwRegsImsram32kx64eMain0SlvFwRegion3Permission0 {
        &self.fw_regs_imsram32kx64e_main_0_slv_fw_region_3_permission_0
    }
    #[doc = "0x3868 - The FW Region 3 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_0.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_0_slv_fw_region_3_permission_1(
        &self,
    ) -> &FwRegsImsram32kx64eMain0SlvFwRegion3Permission1 {
        &self.fw_regs_imsram32kx64e_main_0_slv_fw_region_3_permission_1
    }
    #[doc = "0x386c - The FW Region 3 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_0.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_0_slv_fw_region_3_permission_2(
        &self,
    ) -> &FwRegsImsram32kx64eMain0SlvFwRegion3Permission2 {
        &self.fw_regs_imsram32kx64e_main_0_slv_fw_region_3_permission_2
    }
    #[doc = "0x3870 - The FW Region 3 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_0.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_0_slv_fw_region_3_start_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain0SlvFwRegion3StartAddressL {
        &self.fw_regs_imsram32kx64e_main_0_slv_fw_region_3_start_address_l
    }
    #[doc = "0x3874 - The FW Region 3 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_0.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_0_slv_fw_region_3_start_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain0SlvFwRegion3StartAddressH {
        &self.fw_regs_imsram32kx64e_main_0_slv_fw_region_3_start_address_h
    }
    #[doc = "0x3878 - The FW Region 3 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_0.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_0_slv_fw_region_3_end_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain0SlvFwRegion3EndAddressL {
        &self.fw_regs_imsram32kx64e_main_0_slv_fw_region_3_end_address_l
    }
    #[doc = "0x387c - The FW Region 3 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_0.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_0_slv_fw_region_3_end_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain0SlvFwRegion3EndAddressH {
        &self.fw_regs_imsram32kx64e_main_0_slv_fw_region_3_end_address_h
    }
    #[doc = "0x3c00 - The FW Region 0 Control Register defines the control fields for the slave Imsram32kx64e_main_1.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_1_slv_fw_region_0_control(
        &self,
    ) -> &FwRegsImsram32kx64eMain1SlvFwRegion0Control {
        &self.fw_regs_imsram32kx64e_main_1_slv_fw_region_0_control
    }
    #[doc = "0x3c04 - The FW Region 0 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_1.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_1_slv_fw_region_0_permission_0(
        &self,
    ) -> &FwRegsImsram32kx64eMain1SlvFwRegion0Permission0 {
        &self.fw_regs_imsram32kx64e_main_1_slv_fw_region_0_permission_0
    }
    #[doc = "0x3c08 - The FW Region 0 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_1.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_1_slv_fw_region_0_permission_1(
        &self,
    ) -> &FwRegsImsram32kx64eMain1SlvFwRegion0Permission1 {
        &self.fw_regs_imsram32kx64e_main_1_slv_fw_region_0_permission_1
    }
    #[doc = "0x3c0c - The FW Region 0 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_1.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_1_slv_fw_region_0_permission_2(
        &self,
    ) -> &FwRegsImsram32kx64eMain1SlvFwRegion0Permission2 {
        &self.fw_regs_imsram32kx64e_main_1_slv_fw_region_0_permission_2
    }
    #[doc = "0x3c10 - The FW Region 0 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_1.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_1_slv_fw_region_0_start_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain1SlvFwRegion0StartAddressL {
        &self.fw_regs_imsram32kx64e_main_1_slv_fw_region_0_start_address_l
    }
    #[doc = "0x3c14 - The FW Region 0 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_1.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_1_slv_fw_region_0_start_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain1SlvFwRegion0StartAddressH {
        &self.fw_regs_imsram32kx64e_main_1_slv_fw_region_0_start_address_h
    }
    #[doc = "0x3c18 - The FW Region 0 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_1.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_1_slv_fw_region_0_end_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain1SlvFwRegion0EndAddressL {
        &self.fw_regs_imsram32kx64e_main_1_slv_fw_region_0_end_address_l
    }
    #[doc = "0x3c1c - The FW Region 0 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_1.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_1_slv_fw_region_0_end_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain1SlvFwRegion0EndAddressH {
        &self.fw_regs_imsram32kx64e_main_1_slv_fw_region_0_end_address_h
    }
    #[doc = "0x3c20 - The FW Region 1 Control Register defines the control fields for the slave Imsram32kx64e_main_1.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_1_slv_fw_region_1_control(
        &self,
    ) -> &FwRegsImsram32kx64eMain1SlvFwRegion1Control {
        &self.fw_regs_imsram32kx64e_main_1_slv_fw_region_1_control
    }
    #[doc = "0x3c24 - The FW Region 1 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_1.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_1_slv_fw_region_1_permission_0(
        &self,
    ) -> &FwRegsImsram32kx64eMain1SlvFwRegion1Permission0 {
        &self.fw_regs_imsram32kx64e_main_1_slv_fw_region_1_permission_0
    }
    #[doc = "0x3c28 - The FW Region 1 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_1.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_1_slv_fw_region_1_permission_1(
        &self,
    ) -> &FwRegsImsram32kx64eMain1SlvFwRegion1Permission1 {
        &self.fw_regs_imsram32kx64e_main_1_slv_fw_region_1_permission_1
    }
    #[doc = "0x3c2c - The FW Region 1 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_1.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_1_slv_fw_region_1_permission_2(
        &self,
    ) -> &FwRegsImsram32kx64eMain1SlvFwRegion1Permission2 {
        &self.fw_regs_imsram32kx64e_main_1_slv_fw_region_1_permission_2
    }
    #[doc = "0x3c30 - The FW Region 1 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_1.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_1_slv_fw_region_1_start_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain1SlvFwRegion1StartAddressL {
        &self.fw_regs_imsram32kx64e_main_1_slv_fw_region_1_start_address_l
    }
    #[doc = "0x3c34 - The FW Region 1 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_1.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_1_slv_fw_region_1_start_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain1SlvFwRegion1StartAddressH {
        &self.fw_regs_imsram32kx64e_main_1_slv_fw_region_1_start_address_h
    }
    #[doc = "0x3c38 - The FW Region 1 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_1.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_1_slv_fw_region_1_end_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain1SlvFwRegion1EndAddressL {
        &self.fw_regs_imsram32kx64e_main_1_slv_fw_region_1_end_address_l
    }
    #[doc = "0x3c3c - The FW Region 1 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_1.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_1_slv_fw_region_1_end_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain1SlvFwRegion1EndAddressH {
        &self.fw_regs_imsram32kx64e_main_1_slv_fw_region_1_end_address_h
    }
    #[doc = "0x3c40 - The FW Region 2 Control Register defines the control fields for the slave Imsram32kx64e_main_1.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_1_slv_fw_region_2_control(
        &self,
    ) -> &FwRegsImsram32kx64eMain1SlvFwRegion2Control {
        &self.fw_regs_imsram32kx64e_main_1_slv_fw_region_2_control
    }
    #[doc = "0x3c44 - The FW Region 2 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_1.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_1_slv_fw_region_2_permission_0(
        &self,
    ) -> &FwRegsImsram32kx64eMain1SlvFwRegion2Permission0 {
        &self.fw_regs_imsram32kx64e_main_1_slv_fw_region_2_permission_0
    }
    #[doc = "0x3c48 - The FW Region 2 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_1.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_1_slv_fw_region_2_permission_1(
        &self,
    ) -> &FwRegsImsram32kx64eMain1SlvFwRegion2Permission1 {
        &self.fw_regs_imsram32kx64e_main_1_slv_fw_region_2_permission_1
    }
    #[doc = "0x3c4c - The FW Region 2 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_1.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_1_slv_fw_region_2_permission_2(
        &self,
    ) -> &FwRegsImsram32kx64eMain1SlvFwRegion2Permission2 {
        &self.fw_regs_imsram32kx64e_main_1_slv_fw_region_2_permission_2
    }
    #[doc = "0x3c50 - The FW Region 2 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_1.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_1_slv_fw_region_2_start_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain1SlvFwRegion2StartAddressL {
        &self.fw_regs_imsram32kx64e_main_1_slv_fw_region_2_start_address_l
    }
    #[doc = "0x3c54 - The FW Region 2 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_1.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_1_slv_fw_region_2_start_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain1SlvFwRegion2StartAddressH {
        &self.fw_regs_imsram32kx64e_main_1_slv_fw_region_2_start_address_h
    }
    #[doc = "0x3c58 - The FW Region 2 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_1.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_1_slv_fw_region_2_end_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain1SlvFwRegion2EndAddressL {
        &self.fw_regs_imsram32kx64e_main_1_slv_fw_region_2_end_address_l
    }
    #[doc = "0x3c5c - The FW Region 2 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_1.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_1_slv_fw_region_2_end_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain1SlvFwRegion2EndAddressH {
        &self.fw_regs_imsram32kx64e_main_1_slv_fw_region_2_end_address_h
    }
    #[doc = "0x3c60 - The FW Region 3 Control Register defines the control fields for the slave Imsram32kx64e_main_1.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_1_slv_fw_region_3_control(
        &self,
    ) -> &FwRegsImsram32kx64eMain1SlvFwRegion3Control {
        &self.fw_regs_imsram32kx64e_main_1_slv_fw_region_3_control
    }
    #[doc = "0x3c64 - The FW Region 3 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_1.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_1_slv_fw_region_3_permission_0(
        &self,
    ) -> &FwRegsImsram32kx64eMain1SlvFwRegion3Permission0 {
        &self.fw_regs_imsram32kx64e_main_1_slv_fw_region_3_permission_0
    }
    #[doc = "0x3c68 - The FW Region 3 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_1.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_1_slv_fw_region_3_permission_1(
        &self,
    ) -> &FwRegsImsram32kx64eMain1SlvFwRegion3Permission1 {
        &self.fw_regs_imsram32kx64e_main_1_slv_fw_region_3_permission_1
    }
    #[doc = "0x3c6c - The FW Region 3 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_1.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_1_slv_fw_region_3_permission_2(
        &self,
    ) -> &FwRegsImsram32kx64eMain1SlvFwRegion3Permission2 {
        &self.fw_regs_imsram32kx64e_main_1_slv_fw_region_3_permission_2
    }
    #[doc = "0x3c70 - The FW Region 3 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_1.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_1_slv_fw_region_3_start_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain1SlvFwRegion3StartAddressL {
        &self.fw_regs_imsram32kx64e_main_1_slv_fw_region_3_start_address_l
    }
    #[doc = "0x3c74 - The FW Region 3 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_1.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_1_slv_fw_region_3_start_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain1SlvFwRegion3StartAddressH {
        &self.fw_regs_imsram32kx64e_main_1_slv_fw_region_3_start_address_h
    }
    #[doc = "0x3c78 - The FW Region 3 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_1.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_1_slv_fw_region_3_end_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain1SlvFwRegion3EndAddressL {
        &self.fw_regs_imsram32kx64e_main_1_slv_fw_region_3_end_address_l
    }
    #[doc = "0x3c7c - The FW Region 3 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_1.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_1_slv_fw_region_3_end_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain1SlvFwRegion3EndAddressH {
        &self.fw_regs_imsram32kx64e_main_1_slv_fw_region_3_end_address_h
    }
    #[doc = "0x4000 - The FW Region 0 Control Register defines the control fields for the slave Imsram32kx64e_main_2.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_2_slv_fw_region_0_control(
        &self,
    ) -> &FwRegsImsram32kx64eMain2SlvFwRegion0Control {
        &self.fw_regs_imsram32kx64e_main_2_slv_fw_region_0_control
    }
    #[doc = "0x4004 - The FW Region 0 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_2.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_2_slv_fw_region_0_permission_0(
        &self,
    ) -> &FwRegsImsram32kx64eMain2SlvFwRegion0Permission0 {
        &self.fw_regs_imsram32kx64e_main_2_slv_fw_region_0_permission_0
    }
    #[doc = "0x4008 - The FW Region 0 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_2.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_2_slv_fw_region_0_permission_1(
        &self,
    ) -> &FwRegsImsram32kx64eMain2SlvFwRegion0Permission1 {
        &self.fw_regs_imsram32kx64e_main_2_slv_fw_region_0_permission_1
    }
    #[doc = "0x400c - The FW Region 0 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_2.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_2_slv_fw_region_0_permission_2(
        &self,
    ) -> &FwRegsImsram32kx64eMain2SlvFwRegion0Permission2 {
        &self.fw_regs_imsram32kx64e_main_2_slv_fw_region_0_permission_2
    }
    #[doc = "0x4010 - The FW Region 0 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_2.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_2_slv_fw_region_0_start_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain2SlvFwRegion0StartAddressL {
        &self.fw_regs_imsram32kx64e_main_2_slv_fw_region_0_start_address_l
    }
    #[doc = "0x4014 - The FW Region 0 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_2.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_2_slv_fw_region_0_start_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain2SlvFwRegion0StartAddressH {
        &self.fw_regs_imsram32kx64e_main_2_slv_fw_region_0_start_address_h
    }
    #[doc = "0x4018 - The FW Region 0 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_2.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_2_slv_fw_region_0_end_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain2SlvFwRegion0EndAddressL {
        &self.fw_regs_imsram32kx64e_main_2_slv_fw_region_0_end_address_l
    }
    #[doc = "0x401c - The FW Region 0 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_2.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_2_slv_fw_region_0_end_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain2SlvFwRegion0EndAddressH {
        &self.fw_regs_imsram32kx64e_main_2_slv_fw_region_0_end_address_h
    }
    #[doc = "0x4020 - The FW Region 1 Control Register defines the control fields for the slave Imsram32kx64e_main_2.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_2_slv_fw_region_1_control(
        &self,
    ) -> &FwRegsImsram32kx64eMain2SlvFwRegion1Control {
        &self.fw_regs_imsram32kx64e_main_2_slv_fw_region_1_control
    }
    #[doc = "0x4024 - The FW Region 1 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_2.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_2_slv_fw_region_1_permission_0(
        &self,
    ) -> &FwRegsImsram32kx64eMain2SlvFwRegion1Permission0 {
        &self.fw_regs_imsram32kx64e_main_2_slv_fw_region_1_permission_0
    }
    #[doc = "0x4028 - The FW Region 1 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_2.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_2_slv_fw_region_1_permission_1(
        &self,
    ) -> &FwRegsImsram32kx64eMain2SlvFwRegion1Permission1 {
        &self.fw_regs_imsram32kx64e_main_2_slv_fw_region_1_permission_1
    }
    #[doc = "0x402c - The FW Region 1 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_2.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_2_slv_fw_region_1_permission_2(
        &self,
    ) -> &FwRegsImsram32kx64eMain2SlvFwRegion1Permission2 {
        &self.fw_regs_imsram32kx64e_main_2_slv_fw_region_1_permission_2
    }
    #[doc = "0x4030 - The FW Region 1 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_2.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_2_slv_fw_region_1_start_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain2SlvFwRegion1StartAddressL {
        &self.fw_regs_imsram32kx64e_main_2_slv_fw_region_1_start_address_l
    }
    #[doc = "0x4034 - The FW Region 1 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_2.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_2_slv_fw_region_1_start_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain2SlvFwRegion1StartAddressH {
        &self.fw_regs_imsram32kx64e_main_2_slv_fw_region_1_start_address_h
    }
    #[doc = "0x4038 - The FW Region 1 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_2.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_2_slv_fw_region_1_end_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain2SlvFwRegion1EndAddressL {
        &self.fw_regs_imsram32kx64e_main_2_slv_fw_region_1_end_address_l
    }
    #[doc = "0x403c - The FW Region 1 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_2.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_2_slv_fw_region_1_end_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain2SlvFwRegion1EndAddressH {
        &self.fw_regs_imsram32kx64e_main_2_slv_fw_region_1_end_address_h
    }
    #[doc = "0x4040 - The FW Region 2 Control Register defines the control fields for the slave Imsram32kx64e_main_2.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_2_slv_fw_region_2_control(
        &self,
    ) -> &FwRegsImsram32kx64eMain2SlvFwRegion2Control {
        &self.fw_regs_imsram32kx64e_main_2_slv_fw_region_2_control
    }
    #[doc = "0x4044 - The FW Region 2 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_2.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_2_slv_fw_region_2_permission_0(
        &self,
    ) -> &FwRegsImsram32kx64eMain2SlvFwRegion2Permission0 {
        &self.fw_regs_imsram32kx64e_main_2_slv_fw_region_2_permission_0
    }
    #[doc = "0x4048 - The FW Region 2 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_2.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_2_slv_fw_region_2_permission_1(
        &self,
    ) -> &FwRegsImsram32kx64eMain2SlvFwRegion2Permission1 {
        &self.fw_regs_imsram32kx64e_main_2_slv_fw_region_2_permission_1
    }
    #[doc = "0x404c - The FW Region 2 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_2.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_2_slv_fw_region_2_permission_2(
        &self,
    ) -> &FwRegsImsram32kx64eMain2SlvFwRegion2Permission2 {
        &self.fw_regs_imsram32kx64e_main_2_slv_fw_region_2_permission_2
    }
    #[doc = "0x4050 - The FW Region 2 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_2.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_2_slv_fw_region_2_start_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain2SlvFwRegion2StartAddressL {
        &self.fw_regs_imsram32kx64e_main_2_slv_fw_region_2_start_address_l
    }
    #[doc = "0x4054 - The FW Region 2 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_2.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_2_slv_fw_region_2_start_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain2SlvFwRegion2StartAddressH {
        &self.fw_regs_imsram32kx64e_main_2_slv_fw_region_2_start_address_h
    }
    #[doc = "0x4058 - The FW Region 2 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_2.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_2_slv_fw_region_2_end_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain2SlvFwRegion2EndAddressL {
        &self.fw_regs_imsram32kx64e_main_2_slv_fw_region_2_end_address_l
    }
    #[doc = "0x405c - The FW Region 2 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_2.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_2_slv_fw_region_2_end_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain2SlvFwRegion2EndAddressH {
        &self.fw_regs_imsram32kx64e_main_2_slv_fw_region_2_end_address_h
    }
    #[doc = "0x4060 - The FW Region 3 Control Register defines the control fields for the slave Imsram32kx64e_main_2.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_2_slv_fw_region_3_control(
        &self,
    ) -> &FwRegsImsram32kx64eMain2SlvFwRegion3Control {
        &self.fw_regs_imsram32kx64e_main_2_slv_fw_region_3_control
    }
    #[doc = "0x4064 - The FW Region 3 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_2.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_2_slv_fw_region_3_permission_0(
        &self,
    ) -> &FwRegsImsram32kx64eMain2SlvFwRegion3Permission0 {
        &self.fw_regs_imsram32kx64e_main_2_slv_fw_region_3_permission_0
    }
    #[doc = "0x4068 - The FW Region 3 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_2.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_2_slv_fw_region_3_permission_1(
        &self,
    ) -> &FwRegsImsram32kx64eMain2SlvFwRegion3Permission1 {
        &self.fw_regs_imsram32kx64e_main_2_slv_fw_region_3_permission_1
    }
    #[doc = "0x406c - The FW Region 3 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_2.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_2_slv_fw_region_3_permission_2(
        &self,
    ) -> &FwRegsImsram32kx64eMain2SlvFwRegion3Permission2 {
        &self.fw_regs_imsram32kx64e_main_2_slv_fw_region_3_permission_2
    }
    #[doc = "0x4070 - The FW Region 3 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_2.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_2_slv_fw_region_3_start_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain2SlvFwRegion3StartAddressL {
        &self.fw_regs_imsram32kx64e_main_2_slv_fw_region_3_start_address_l
    }
    #[doc = "0x4074 - The FW Region 3 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_2.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_2_slv_fw_region_3_start_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain2SlvFwRegion3StartAddressH {
        &self.fw_regs_imsram32kx64e_main_2_slv_fw_region_3_start_address_h
    }
    #[doc = "0x4078 - The FW Region 3 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_2.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_2_slv_fw_region_3_end_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain2SlvFwRegion3EndAddressL {
        &self.fw_regs_imsram32kx64e_main_2_slv_fw_region_3_end_address_l
    }
    #[doc = "0x407c - The FW Region 3 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_2.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_2_slv_fw_region_3_end_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain2SlvFwRegion3EndAddressH {
        &self.fw_regs_imsram32kx64e_main_2_slv_fw_region_3_end_address_h
    }
    #[doc = "0x4400 - The FW Region 0 Control Register defines the control fields for the slave Imsram32kx64e_main_5.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_5_slv_fw_region_0_control(
        &self,
    ) -> &FwRegsImsram32kx64eMain5SlvFwRegion0Control {
        &self.fw_regs_imsram32kx64e_main_5_slv_fw_region_0_control
    }
    #[doc = "0x4404 - The FW Region 0 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_5.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_5_slv_fw_region_0_permission_0(
        &self,
    ) -> &FwRegsImsram32kx64eMain5SlvFwRegion0Permission0 {
        &self.fw_regs_imsram32kx64e_main_5_slv_fw_region_0_permission_0
    }
    #[doc = "0x4408 - The FW Region 0 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_5.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_5_slv_fw_region_0_permission_1(
        &self,
    ) -> &FwRegsImsram32kx64eMain5SlvFwRegion0Permission1 {
        &self.fw_regs_imsram32kx64e_main_5_slv_fw_region_0_permission_1
    }
    #[doc = "0x440c - The FW Region 0 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_5.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_5_slv_fw_region_0_permission_2(
        &self,
    ) -> &FwRegsImsram32kx64eMain5SlvFwRegion0Permission2 {
        &self.fw_regs_imsram32kx64e_main_5_slv_fw_region_0_permission_2
    }
    #[doc = "0x4410 - The FW Region 0 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_5.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_5_slv_fw_region_0_start_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain5SlvFwRegion0StartAddressL {
        &self.fw_regs_imsram32kx64e_main_5_slv_fw_region_0_start_address_l
    }
    #[doc = "0x4414 - The FW Region 0 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_5.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_5_slv_fw_region_0_start_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain5SlvFwRegion0StartAddressH {
        &self.fw_regs_imsram32kx64e_main_5_slv_fw_region_0_start_address_h
    }
    #[doc = "0x4418 - The FW Region 0 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_5.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_5_slv_fw_region_0_end_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain5SlvFwRegion0EndAddressL {
        &self.fw_regs_imsram32kx64e_main_5_slv_fw_region_0_end_address_l
    }
    #[doc = "0x441c - The FW Region 0 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_5.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_5_slv_fw_region_0_end_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain5SlvFwRegion0EndAddressH {
        &self.fw_regs_imsram32kx64e_main_5_slv_fw_region_0_end_address_h
    }
    #[doc = "0x4420 - The FW Region 1 Control Register defines the control fields for the slave Imsram32kx64e_main_5.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_5_slv_fw_region_1_control(
        &self,
    ) -> &FwRegsImsram32kx64eMain5SlvFwRegion1Control {
        &self.fw_regs_imsram32kx64e_main_5_slv_fw_region_1_control
    }
    #[doc = "0x4424 - The FW Region 1 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_5.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_5_slv_fw_region_1_permission_0(
        &self,
    ) -> &FwRegsImsram32kx64eMain5SlvFwRegion1Permission0 {
        &self.fw_regs_imsram32kx64e_main_5_slv_fw_region_1_permission_0
    }
    #[doc = "0x4428 - The FW Region 1 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_5.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_5_slv_fw_region_1_permission_1(
        &self,
    ) -> &FwRegsImsram32kx64eMain5SlvFwRegion1Permission1 {
        &self.fw_regs_imsram32kx64e_main_5_slv_fw_region_1_permission_1
    }
    #[doc = "0x442c - The FW Region 1 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_5.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_5_slv_fw_region_1_permission_2(
        &self,
    ) -> &FwRegsImsram32kx64eMain5SlvFwRegion1Permission2 {
        &self.fw_regs_imsram32kx64e_main_5_slv_fw_region_1_permission_2
    }
    #[doc = "0x4430 - The FW Region 1 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_5.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_5_slv_fw_region_1_start_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain5SlvFwRegion1StartAddressL {
        &self.fw_regs_imsram32kx64e_main_5_slv_fw_region_1_start_address_l
    }
    #[doc = "0x4434 - The FW Region 1 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_5.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_5_slv_fw_region_1_start_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain5SlvFwRegion1StartAddressH {
        &self.fw_regs_imsram32kx64e_main_5_slv_fw_region_1_start_address_h
    }
    #[doc = "0x4438 - The FW Region 1 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_5.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_5_slv_fw_region_1_end_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain5SlvFwRegion1EndAddressL {
        &self.fw_regs_imsram32kx64e_main_5_slv_fw_region_1_end_address_l
    }
    #[doc = "0x443c - The FW Region 1 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_5.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_5_slv_fw_region_1_end_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain5SlvFwRegion1EndAddressH {
        &self.fw_regs_imsram32kx64e_main_5_slv_fw_region_1_end_address_h
    }
    #[doc = "0x4440 - The FW Region 2 Control Register defines the control fields for the slave Imsram32kx64e_main_5.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_5_slv_fw_region_2_control(
        &self,
    ) -> &FwRegsImsram32kx64eMain5SlvFwRegion2Control {
        &self.fw_regs_imsram32kx64e_main_5_slv_fw_region_2_control
    }
    #[doc = "0x4444 - The FW Region 2 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_5.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_5_slv_fw_region_2_permission_0(
        &self,
    ) -> &FwRegsImsram32kx64eMain5SlvFwRegion2Permission0 {
        &self.fw_regs_imsram32kx64e_main_5_slv_fw_region_2_permission_0
    }
    #[doc = "0x4448 - The FW Region 2 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_5.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_5_slv_fw_region_2_permission_1(
        &self,
    ) -> &FwRegsImsram32kx64eMain5SlvFwRegion2Permission1 {
        &self.fw_regs_imsram32kx64e_main_5_slv_fw_region_2_permission_1
    }
    #[doc = "0x444c - The FW Region 2 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_5.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_5_slv_fw_region_2_permission_2(
        &self,
    ) -> &FwRegsImsram32kx64eMain5SlvFwRegion2Permission2 {
        &self.fw_regs_imsram32kx64e_main_5_slv_fw_region_2_permission_2
    }
    #[doc = "0x4450 - The FW Region 2 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_5.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_5_slv_fw_region_2_start_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain5SlvFwRegion2StartAddressL {
        &self.fw_regs_imsram32kx64e_main_5_slv_fw_region_2_start_address_l
    }
    #[doc = "0x4454 - The FW Region 2 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_5.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_5_slv_fw_region_2_start_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain5SlvFwRegion2StartAddressH {
        &self.fw_regs_imsram32kx64e_main_5_slv_fw_region_2_start_address_h
    }
    #[doc = "0x4458 - The FW Region 2 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_5.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_5_slv_fw_region_2_end_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain5SlvFwRegion2EndAddressL {
        &self.fw_regs_imsram32kx64e_main_5_slv_fw_region_2_end_address_l
    }
    #[doc = "0x445c - The FW Region 2 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_5.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_5_slv_fw_region_2_end_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain5SlvFwRegion2EndAddressH {
        &self.fw_regs_imsram32kx64e_main_5_slv_fw_region_2_end_address_h
    }
    #[doc = "0x4460 - The FW Region 3 Control Register defines the control fields for the slave Imsram32kx64e_main_5.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_5_slv_fw_region_3_control(
        &self,
    ) -> &FwRegsImsram32kx64eMain5SlvFwRegion3Control {
        &self.fw_regs_imsram32kx64e_main_5_slv_fw_region_3_control
    }
    #[doc = "0x4464 - The FW Region 3 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_5.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_5_slv_fw_region_3_permission_0(
        &self,
    ) -> &FwRegsImsram32kx64eMain5SlvFwRegion3Permission0 {
        &self.fw_regs_imsram32kx64e_main_5_slv_fw_region_3_permission_0
    }
    #[doc = "0x4468 - The FW Region 3 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_5.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_5_slv_fw_region_3_permission_1(
        &self,
    ) -> &FwRegsImsram32kx64eMain5SlvFwRegion3Permission1 {
        &self.fw_regs_imsram32kx64e_main_5_slv_fw_region_3_permission_1
    }
    #[doc = "0x446c - The FW Region 3 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_5.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_5_slv_fw_region_3_permission_2(
        &self,
    ) -> &FwRegsImsram32kx64eMain5SlvFwRegion3Permission2 {
        &self.fw_regs_imsram32kx64e_main_5_slv_fw_region_3_permission_2
    }
    #[doc = "0x4470 - The FW Region 3 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_5.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_5_slv_fw_region_3_start_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain5SlvFwRegion3StartAddressL {
        &self.fw_regs_imsram32kx64e_main_5_slv_fw_region_3_start_address_l
    }
    #[doc = "0x4474 - The FW Region 3 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_5.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_5_slv_fw_region_3_start_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain5SlvFwRegion3StartAddressH {
        &self.fw_regs_imsram32kx64e_main_5_slv_fw_region_3_start_address_h
    }
    #[doc = "0x4478 - The FW Region 3 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_5.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_5_slv_fw_region_3_end_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain5SlvFwRegion3EndAddressL {
        &self.fw_regs_imsram32kx64e_main_5_slv_fw_region_3_end_address_l
    }
    #[doc = "0x447c - The FW Region 3 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_5.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_5_slv_fw_region_3_end_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain5SlvFwRegion3EndAddressH {
        &self.fw_regs_imsram32kx64e_main_5_slv_fw_region_3_end_address_h
    }
    #[doc = "0x4800 - The FW Region 0 Control Register defines the control fields for the slave Imsram32kx64e_main_4.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_4_slv_fw_region_0_control(
        &self,
    ) -> &FwRegsImsram32kx64eMain4SlvFwRegion0Control {
        &self.fw_regs_imsram32kx64e_main_4_slv_fw_region_0_control
    }
    #[doc = "0x4804 - The FW Region 0 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_4.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_4_slv_fw_region_0_permission_0(
        &self,
    ) -> &FwRegsImsram32kx64eMain4SlvFwRegion0Permission0 {
        &self.fw_regs_imsram32kx64e_main_4_slv_fw_region_0_permission_0
    }
    #[doc = "0x4808 - The FW Region 0 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_4.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_4_slv_fw_region_0_permission_1(
        &self,
    ) -> &FwRegsImsram32kx64eMain4SlvFwRegion0Permission1 {
        &self.fw_regs_imsram32kx64e_main_4_slv_fw_region_0_permission_1
    }
    #[doc = "0x480c - The FW Region 0 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_4.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_4_slv_fw_region_0_permission_2(
        &self,
    ) -> &FwRegsImsram32kx64eMain4SlvFwRegion0Permission2 {
        &self.fw_regs_imsram32kx64e_main_4_slv_fw_region_0_permission_2
    }
    #[doc = "0x4810 - The FW Region 0 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_4.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_4_slv_fw_region_0_start_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain4SlvFwRegion0StartAddressL {
        &self.fw_regs_imsram32kx64e_main_4_slv_fw_region_0_start_address_l
    }
    #[doc = "0x4814 - The FW Region 0 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_4.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_4_slv_fw_region_0_start_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain4SlvFwRegion0StartAddressH {
        &self.fw_regs_imsram32kx64e_main_4_slv_fw_region_0_start_address_h
    }
    #[doc = "0x4818 - The FW Region 0 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_4.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_4_slv_fw_region_0_end_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain4SlvFwRegion0EndAddressL {
        &self.fw_regs_imsram32kx64e_main_4_slv_fw_region_0_end_address_l
    }
    #[doc = "0x481c - The FW Region 0 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_4.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_4_slv_fw_region_0_end_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain4SlvFwRegion0EndAddressH {
        &self.fw_regs_imsram32kx64e_main_4_slv_fw_region_0_end_address_h
    }
    #[doc = "0x4820 - The FW Region 1 Control Register defines the control fields for the slave Imsram32kx64e_main_4.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_4_slv_fw_region_1_control(
        &self,
    ) -> &FwRegsImsram32kx64eMain4SlvFwRegion1Control {
        &self.fw_regs_imsram32kx64e_main_4_slv_fw_region_1_control
    }
    #[doc = "0x4824 - The FW Region 1 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_4.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_4_slv_fw_region_1_permission_0(
        &self,
    ) -> &FwRegsImsram32kx64eMain4SlvFwRegion1Permission0 {
        &self.fw_regs_imsram32kx64e_main_4_slv_fw_region_1_permission_0
    }
    #[doc = "0x4828 - The FW Region 1 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_4.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_4_slv_fw_region_1_permission_1(
        &self,
    ) -> &FwRegsImsram32kx64eMain4SlvFwRegion1Permission1 {
        &self.fw_regs_imsram32kx64e_main_4_slv_fw_region_1_permission_1
    }
    #[doc = "0x482c - The FW Region 1 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_4.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_4_slv_fw_region_1_permission_2(
        &self,
    ) -> &FwRegsImsram32kx64eMain4SlvFwRegion1Permission2 {
        &self.fw_regs_imsram32kx64e_main_4_slv_fw_region_1_permission_2
    }
    #[doc = "0x4830 - The FW Region 1 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_4.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_4_slv_fw_region_1_start_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain4SlvFwRegion1StartAddressL {
        &self.fw_regs_imsram32kx64e_main_4_slv_fw_region_1_start_address_l
    }
    #[doc = "0x4834 - The FW Region 1 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_4.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_4_slv_fw_region_1_start_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain4SlvFwRegion1StartAddressH {
        &self.fw_regs_imsram32kx64e_main_4_slv_fw_region_1_start_address_h
    }
    #[doc = "0x4838 - The FW Region 1 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_4.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_4_slv_fw_region_1_end_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain4SlvFwRegion1EndAddressL {
        &self.fw_regs_imsram32kx64e_main_4_slv_fw_region_1_end_address_l
    }
    #[doc = "0x483c - The FW Region 1 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_4.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_4_slv_fw_region_1_end_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain4SlvFwRegion1EndAddressH {
        &self.fw_regs_imsram32kx64e_main_4_slv_fw_region_1_end_address_h
    }
    #[doc = "0x4840 - The FW Region 2 Control Register defines the control fields for the slave Imsram32kx64e_main_4.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_4_slv_fw_region_2_control(
        &self,
    ) -> &FwRegsImsram32kx64eMain4SlvFwRegion2Control {
        &self.fw_regs_imsram32kx64e_main_4_slv_fw_region_2_control
    }
    #[doc = "0x4844 - The FW Region 2 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_4.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_4_slv_fw_region_2_permission_0(
        &self,
    ) -> &FwRegsImsram32kx64eMain4SlvFwRegion2Permission0 {
        &self.fw_regs_imsram32kx64e_main_4_slv_fw_region_2_permission_0
    }
    #[doc = "0x4848 - The FW Region 2 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_4.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_4_slv_fw_region_2_permission_1(
        &self,
    ) -> &FwRegsImsram32kx64eMain4SlvFwRegion2Permission1 {
        &self.fw_regs_imsram32kx64e_main_4_slv_fw_region_2_permission_1
    }
    #[doc = "0x484c - The FW Region 2 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_4.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_4_slv_fw_region_2_permission_2(
        &self,
    ) -> &FwRegsImsram32kx64eMain4SlvFwRegion2Permission2 {
        &self.fw_regs_imsram32kx64e_main_4_slv_fw_region_2_permission_2
    }
    #[doc = "0x4850 - The FW Region 2 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_4.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_4_slv_fw_region_2_start_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain4SlvFwRegion2StartAddressL {
        &self.fw_regs_imsram32kx64e_main_4_slv_fw_region_2_start_address_l
    }
    #[doc = "0x4854 - The FW Region 2 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_4.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_4_slv_fw_region_2_start_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain4SlvFwRegion2StartAddressH {
        &self.fw_regs_imsram32kx64e_main_4_slv_fw_region_2_start_address_h
    }
    #[doc = "0x4858 - The FW Region 2 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_4.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_4_slv_fw_region_2_end_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain4SlvFwRegion2EndAddressL {
        &self.fw_regs_imsram32kx64e_main_4_slv_fw_region_2_end_address_l
    }
    #[doc = "0x485c - The FW Region 2 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_4.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_4_slv_fw_region_2_end_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain4SlvFwRegion2EndAddressH {
        &self.fw_regs_imsram32kx64e_main_4_slv_fw_region_2_end_address_h
    }
    #[doc = "0x4860 - The FW Region 3 Control Register defines the control fields for the slave Imsram32kx64e_main_4.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_4_slv_fw_region_3_control(
        &self,
    ) -> &FwRegsImsram32kx64eMain4SlvFwRegion3Control {
        &self.fw_regs_imsram32kx64e_main_4_slv_fw_region_3_control
    }
    #[doc = "0x4864 - The FW Region 3 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_4.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_4_slv_fw_region_3_permission_0(
        &self,
    ) -> &FwRegsImsram32kx64eMain4SlvFwRegion3Permission0 {
        &self.fw_regs_imsram32kx64e_main_4_slv_fw_region_3_permission_0
    }
    #[doc = "0x4868 - The FW Region 3 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_4.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_4_slv_fw_region_3_permission_1(
        &self,
    ) -> &FwRegsImsram32kx64eMain4SlvFwRegion3Permission1 {
        &self.fw_regs_imsram32kx64e_main_4_slv_fw_region_3_permission_1
    }
    #[doc = "0x486c - The FW Region 3 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_4.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_4_slv_fw_region_3_permission_2(
        &self,
    ) -> &FwRegsImsram32kx64eMain4SlvFwRegion3Permission2 {
        &self.fw_regs_imsram32kx64e_main_4_slv_fw_region_3_permission_2
    }
    #[doc = "0x4870 - The FW Region 3 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_4.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_4_slv_fw_region_3_start_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain4SlvFwRegion3StartAddressL {
        &self.fw_regs_imsram32kx64e_main_4_slv_fw_region_3_start_address_l
    }
    #[doc = "0x4874 - The FW Region 3 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_4.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_4_slv_fw_region_3_start_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain4SlvFwRegion3StartAddressH {
        &self.fw_regs_imsram32kx64e_main_4_slv_fw_region_3_start_address_h
    }
    #[doc = "0x4878 - The FW Region 3 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_4.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_4_slv_fw_region_3_end_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain4SlvFwRegion3EndAddressL {
        &self.fw_regs_imsram32kx64e_main_4_slv_fw_region_3_end_address_l
    }
    #[doc = "0x487c - The FW Region 3 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_4.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_4_slv_fw_region_3_end_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain4SlvFwRegion3EndAddressH {
        &self.fw_regs_imsram32kx64e_main_4_slv_fw_region_3_end_address_h
    }
    #[doc = "0x4c00 - The FW Region 0 Control Register defines the control fields for the slave Imsram32kx64e_main_3.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_3_slv_fw_region_0_control(
        &self,
    ) -> &FwRegsImsram32kx64eMain3SlvFwRegion0Control {
        &self.fw_regs_imsram32kx64e_main_3_slv_fw_region_0_control
    }
    #[doc = "0x4c04 - The FW Region 0 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_3.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_3_slv_fw_region_0_permission_0(
        &self,
    ) -> &FwRegsImsram32kx64eMain3SlvFwRegion0Permission0 {
        &self.fw_regs_imsram32kx64e_main_3_slv_fw_region_0_permission_0
    }
    #[doc = "0x4c08 - The FW Region 0 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_3.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_3_slv_fw_region_0_permission_1(
        &self,
    ) -> &FwRegsImsram32kx64eMain3SlvFwRegion0Permission1 {
        &self.fw_regs_imsram32kx64e_main_3_slv_fw_region_0_permission_1
    }
    #[doc = "0x4c0c - The FW Region 0 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_3.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_3_slv_fw_region_0_permission_2(
        &self,
    ) -> &FwRegsImsram32kx64eMain3SlvFwRegion0Permission2 {
        &self.fw_regs_imsram32kx64e_main_3_slv_fw_region_0_permission_2
    }
    #[doc = "0x4c10 - The FW Region 0 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_3.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_3_slv_fw_region_0_start_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain3SlvFwRegion0StartAddressL {
        &self.fw_regs_imsram32kx64e_main_3_slv_fw_region_0_start_address_l
    }
    #[doc = "0x4c14 - The FW Region 0 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_3.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_3_slv_fw_region_0_start_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain3SlvFwRegion0StartAddressH {
        &self.fw_regs_imsram32kx64e_main_3_slv_fw_region_0_start_address_h
    }
    #[doc = "0x4c18 - The FW Region 0 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_3.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_3_slv_fw_region_0_end_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain3SlvFwRegion0EndAddressL {
        &self.fw_regs_imsram32kx64e_main_3_slv_fw_region_0_end_address_l
    }
    #[doc = "0x4c1c - The FW Region 0 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_3.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_3_slv_fw_region_0_end_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain3SlvFwRegion0EndAddressH {
        &self.fw_regs_imsram32kx64e_main_3_slv_fw_region_0_end_address_h
    }
    #[doc = "0x4c20 - The FW Region 1 Control Register defines the control fields for the slave Imsram32kx64e_main_3.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_3_slv_fw_region_1_control(
        &self,
    ) -> &FwRegsImsram32kx64eMain3SlvFwRegion1Control {
        &self.fw_regs_imsram32kx64e_main_3_slv_fw_region_1_control
    }
    #[doc = "0x4c24 - The FW Region 1 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_3.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_3_slv_fw_region_1_permission_0(
        &self,
    ) -> &FwRegsImsram32kx64eMain3SlvFwRegion1Permission0 {
        &self.fw_regs_imsram32kx64e_main_3_slv_fw_region_1_permission_0
    }
    #[doc = "0x4c28 - The FW Region 1 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_3.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_3_slv_fw_region_1_permission_1(
        &self,
    ) -> &FwRegsImsram32kx64eMain3SlvFwRegion1Permission1 {
        &self.fw_regs_imsram32kx64e_main_3_slv_fw_region_1_permission_1
    }
    #[doc = "0x4c2c - The FW Region 1 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_3.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_3_slv_fw_region_1_permission_2(
        &self,
    ) -> &FwRegsImsram32kx64eMain3SlvFwRegion1Permission2 {
        &self.fw_regs_imsram32kx64e_main_3_slv_fw_region_1_permission_2
    }
    #[doc = "0x4c30 - The FW Region 1 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_3.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_3_slv_fw_region_1_start_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain3SlvFwRegion1StartAddressL {
        &self.fw_regs_imsram32kx64e_main_3_slv_fw_region_1_start_address_l
    }
    #[doc = "0x4c34 - The FW Region 1 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_3.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_3_slv_fw_region_1_start_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain3SlvFwRegion1StartAddressH {
        &self.fw_regs_imsram32kx64e_main_3_slv_fw_region_1_start_address_h
    }
    #[doc = "0x4c38 - The FW Region 1 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_3.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_3_slv_fw_region_1_end_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain3SlvFwRegion1EndAddressL {
        &self.fw_regs_imsram32kx64e_main_3_slv_fw_region_1_end_address_l
    }
    #[doc = "0x4c3c - The FW Region 1 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_3.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_3_slv_fw_region_1_end_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain3SlvFwRegion1EndAddressH {
        &self.fw_regs_imsram32kx64e_main_3_slv_fw_region_1_end_address_h
    }
    #[doc = "0x4c40 - The FW Region 2 Control Register defines the control fields for the slave Imsram32kx64e_main_3.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_3_slv_fw_region_2_control(
        &self,
    ) -> &FwRegsImsram32kx64eMain3SlvFwRegion2Control {
        &self.fw_regs_imsram32kx64e_main_3_slv_fw_region_2_control
    }
    #[doc = "0x4c44 - The FW Region 2 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_3.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_3_slv_fw_region_2_permission_0(
        &self,
    ) -> &FwRegsImsram32kx64eMain3SlvFwRegion2Permission0 {
        &self.fw_regs_imsram32kx64e_main_3_slv_fw_region_2_permission_0
    }
    #[doc = "0x4c48 - The FW Region 2 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_3.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_3_slv_fw_region_2_permission_1(
        &self,
    ) -> &FwRegsImsram32kx64eMain3SlvFwRegion2Permission1 {
        &self.fw_regs_imsram32kx64e_main_3_slv_fw_region_2_permission_1
    }
    #[doc = "0x4c4c - The FW Region 2 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_3.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_3_slv_fw_region_2_permission_2(
        &self,
    ) -> &FwRegsImsram32kx64eMain3SlvFwRegion2Permission2 {
        &self.fw_regs_imsram32kx64e_main_3_slv_fw_region_2_permission_2
    }
    #[doc = "0x4c50 - The FW Region 2 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_3.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_3_slv_fw_region_2_start_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain3SlvFwRegion2StartAddressL {
        &self.fw_regs_imsram32kx64e_main_3_slv_fw_region_2_start_address_l
    }
    #[doc = "0x4c54 - The FW Region 2 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_3.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_3_slv_fw_region_2_start_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain3SlvFwRegion2StartAddressH {
        &self.fw_regs_imsram32kx64e_main_3_slv_fw_region_2_start_address_h
    }
    #[doc = "0x4c58 - The FW Region 2 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_3.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_3_slv_fw_region_2_end_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain3SlvFwRegion2EndAddressL {
        &self.fw_regs_imsram32kx64e_main_3_slv_fw_region_2_end_address_l
    }
    #[doc = "0x4c5c - The FW Region 2 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_3.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_3_slv_fw_region_2_end_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain3SlvFwRegion2EndAddressH {
        &self.fw_regs_imsram32kx64e_main_3_slv_fw_region_2_end_address_h
    }
    #[doc = "0x4c60 - The FW Region 3 Control Register defines the control fields for the slave Imsram32kx64e_main_3.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_3_slv_fw_region_3_control(
        &self,
    ) -> &FwRegsImsram32kx64eMain3SlvFwRegion3Control {
        &self.fw_regs_imsram32kx64e_main_3_slv_fw_region_3_control
    }
    #[doc = "0x4c64 - The FW Region 3 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_3.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_3_slv_fw_region_3_permission_0(
        &self,
    ) -> &FwRegsImsram32kx64eMain3SlvFwRegion3Permission0 {
        &self.fw_regs_imsram32kx64e_main_3_slv_fw_region_3_permission_0
    }
    #[doc = "0x4c68 - The FW Region 3 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_3.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_3_slv_fw_region_3_permission_1(
        &self,
    ) -> &FwRegsImsram32kx64eMain3SlvFwRegion3Permission1 {
        &self.fw_regs_imsram32kx64e_main_3_slv_fw_region_3_permission_1
    }
    #[doc = "0x4c6c - The FW Region 3 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_3.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_3_slv_fw_region_3_permission_2(
        &self,
    ) -> &FwRegsImsram32kx64eMain3SlvFwRegion3Permission2 {
        &self.fw_regs_imsram32kx64e_main_3_slv_fw_region_3_permission_2
    }
    #[doc = "0x4c70 - The FW Region 3 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_3.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_3_slv_fw_region_3_start_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain3SlvFwRegion3StartAddressL {
        &self.fw_regs_imsram32kx64e_main_3_slv_fw_region_3_start_address_l
    }
    #[doc = "0x4c74 - The FW Region 3 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_3.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_3_slv_fw_region_3_start_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain3SlvFwRegion3StartAddressH {
        &self.fw_regs_imsram32kx64e_main_3_slv_fw_region_3_start_address_h
    }
    #[doc = "0x4c78 - The FW Region 3 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_3.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_3_slv_fw_region_3_end_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain3SlvFwRegion3EndAddressL {
        &self.fw_regs_imsram32kx64e_main_3_slv_fw_region_3_end_address_l
    }
    #[doc = "0x4c7c - The FW Region 3 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_3.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_3_slv_fw_region_3_end_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain3SlvFwRegion3EndAddressH {
        &self.fw_regs_imsram32kx64e_main_3_slv_fw_region_3_end_address_h
    }
    #[doc = "0x5000 - The FW Region 0 Control Register defines the control fields for the slave Idmss_am64_main_0.ipcss_vbm_dst region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_control(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion0Control {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_control
    }
    #[doc = "0x5004 - The FW Region 0 Permission 0 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_permission_0(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion0Permission0 {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_permission_0
    }
    #[doc = "0x5008 - The FW Region 0 Permission 1 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_permission_1(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion0Permission1 {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_permission_1
    }
    #[doc = "0x500c - The FW Region 0 Permission 2 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_permission_2(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion0Permission2 {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_permission_2
    }
    #[doc = "0x5010 - The FW Region 0 Start Address Low Register defines the start address bits 31 to 0 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_start_address_l(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion0StartAddressL {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_start_address_l
    }
    #[doc = "0x5014 - The FW Region 0 Start Address High Register defines the start address bits 47 to 32 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_start_address_h(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion0StartAddressH {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_start_address_h
    }
    #[doc = "0x5018 - The FW Region 0 End Address Low Register defines the end address bits 31 to 0 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_end_address_l(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion0EndAddressL {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_end_address_l
    }
    #[doc = "0x501c - The FW Region 0 End Address High Register defines the end address bits 47 to 32 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_end_address_h(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion0EndAddressH {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_end_address_h
    }
    #[doc = "0x5020 - The FW Region 1 Control Register defines the control fields for the slave Idmss_am64_main_0.ipcss_vbm_dst region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_control(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion1Control {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_control
    }
    #[doc = "0x5024 - The FW Region 1 Permission 0 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_permission_0(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion1Permission0 {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_permission_0
    }
    #[doc = "0x5028 - The FW Region 1 Permission 1 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_permission_1(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion1Permission1 {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_permission_1
    }
    #[doc = "0x502c - The FW Region 1 Permission 2 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_permission_2(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion1Permission2 {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_permission_2
    }
    #[doc = "0x5030 - The FW Region 1 Start Address Low Register defines the start address bits 31 to 0 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_start_address_l(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion1StartAddressL {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_start_address_l
    }
    #[doc = "0x5034 - The FW Region 1 Start Address High Register defines the start address bits 47 to 32 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_start_address_h(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion1StartAddressH {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_start_address_h
    }
    #[doc = "0x5038 - The FW Region 1 End Address Low Register defines the end address bits 31 to 0 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_end_address_l(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion1EndAddressL {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_end_address_l
    }
    #[doc = "0x503c - The FW Region 1 End Address High Register defines the end address bits 47 to 32 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_end_address_h(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion1EndAddressH {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_end_address_h
    }
    #[doc = "0x5040 - The FW Region 2 Control Register defines the control fields for the slave Idmss_am64_main_0.ipcss_vbm_dst region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_control(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion2Control {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_control
    }
    #[doc = "0x5044 - The FW Region 2 Permission 0 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_permission_0(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion2Permission0 {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_permission_0
    }
    #[doc = "0x5048 - The FW Region 2 Permission 1 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_permission_1(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion2Permission1 {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_permission_1
    }
    #[doc = "0x504c - The FW Region 2 Permission 2 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_permission_2(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion2Permission2 {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_permission_2
    }
    #[doc = "0x5050 - The FW Region 2 Start Address Low Register defines the start address bits 31 to 0 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_start_address_l(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion2StartAddressL {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_start_address_l
    }
    #[doc = "0x5054 - The FW Region 2 Start Address High Register defines the start address bits 47 to 32 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_start_address_h(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion2StartAddressH {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_start_address_h
    }
    #[doc = "0x5058 - The FW Region 2 End Address Low Register defines the end address bits 31 to 0 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_end_address_l(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion2EndAddressL {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_end_address_l
    }
    #[doc = "0x505c - The FW Region 2 End Address High Register defines the end address bits 47 to 32 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_end_address_h(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion2EndAddressH {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_end_address_h
    }
    #[doc = "0x5060 - The FW Region 3 Control Register defines the control fields for the slave Idmss_am64_main_0.ipcss_vbm_dst region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_control(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion3Control {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_control
    }
    #[doc = "0x5064 - The FW Region 3 Permission 0 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_permission_0(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion3Permission0 {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_permission_0
    }
    #[doc = "0x5068 - The FW Region 3 Permission 1 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_permission_1(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion3Permission1 {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_permission_1
    }
    #[doc = "0x506c - The FW Region 3 Permission 2 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_permission_2(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion3Permission2 {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_permission_2
    }
    #[doc = "0x5070 - The FW Region 3 Start Address Low Register defines the start address bits 31 to 0 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_start_address_l(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion3StartAddressL {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_start_address_l
    }
    #[doc = "0x5074 - The FW Region 3 Start Address High Register defines the start address bits 47 to 32 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_start_address_h(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion3StartAddressH {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_start_address_h
    }
    #[doc = "0x5078 - The FW Region 3 End Address Low Register defines the end address bits 31 to 0 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_end_address_l(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion3EndAddressL {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_end_address_l
    }
    #[doc = "0x507c - The FW Region 3 End Address High Register defines the end address bits 47 to 32 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_end_address_h(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion3EndAddressH {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_end_address_h
    }
    #[doc = "0x5080 - The FW Region 4 Control Register defines the control fields for the slave Idmss_am64_main_0.ipcss_vbm_dst region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_control(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion4Control {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_control
    }
    #[doc = "0x5084 - The FW Region 4 Permission 0 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_permission_0(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion4Permission0 {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_permission_0
    }
    #[doc = "0x5088 - The FW Region 4 Permission 1 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_permission_1(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion4Permission1 {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_permission_1
    }
    #[doc = "0x508c - The FW Region 4 Permission 2 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_permission_2(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion4Permission2 {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_permission_2
    }
    #[doc = "0x5090 - The FW Region 4 Start Address Low Register defines the start address bits 31 to 0 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_start_address_l(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion4StartAddressL {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_start_address_l
    }
    #[doc = "0x5094 - The FW Region 4 Start Address High Register defines the start address bits 47 to 32 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_start_address_h(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion4StartAddressH {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_start_address_h
    }
    #[doc = "0x5098 - The FW Region 4 End Address Low Register defines the end address bits 31 to 0 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_end_address_l(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion4EndAddressL {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_end_address_l
    }
    #[doc = "0x509c - The FW Region 4 End Address High Register defines the end address bits 47 to 32 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_end_address_h(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion4EndAddressH {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_end_address_h
    }
    #[doc = "0x50a0 - The FW Region 5 Control Register defines the control fields for the slave Idmss_am64_main_0.ipcss_vbm_dst region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_control(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion5Control {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_control
    }
    #[doc = "0x50a4 - The FW Region 5 Permission 0 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_permission_0(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion5Permission0 {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_permission_0
    }
    #[doc = "0x50a8 - The FW Region 5 Permission 1 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_permission_1(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion5Permission1 {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_permission_1
    }
    #[doc = "0x50ac - The FW Region 5 Permission 2 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_permission_2(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion5Permission2 {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_permission_2
    }
    #[doc = "0x50b0 - The FW Region 5 Start Address Low Register defines the start address bits 31 to 0 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_start_address_l(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion5StartAddressL {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_start_address_l
    }
    #[doc = "0x50b4 - The FW Region 5 Start Address High Register defines the start address bits 47 to 32 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_start_address_h(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion5StartAddressH {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_start_address_h
    }
    #[doc = "0x50b8 - The FW Region 5 End Address Low Register defines the end address bits 31 to 0 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_end_address_l(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion5EndAddressL {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_end_address_l
    }
    #[doc = "0x50bc - The FW Region 5 End Address High Register defines the end address bits 47 to 32 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_end_address_h(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion5EndAddressH {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_end_address_h
    }
    #[doc = "0x50c0 - The FW Region 6 Control Register defines the control fields for the slave Idmss_am64_main_0.ipcss_vbm_dst region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_control(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion6Control {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_control
    }
    #[doc = "0x50c4 - The FW Region 6 Permission 0 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_permission_0(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion6Permission0 {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_permission_0
    }
    #[doc = "0x50c8 - The FW Region 6 Permission 1 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_permission_1(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion6Permission1 {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_permission_1
    }
    #[doc = "0x50cc - The FW Region 6 Permission 2 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_permission_2(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion6Permission2 {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_permission_2
    }
    #[doc = "0x50d0 - The FW Region 6 Start Address Low Register defines the start address bits 31 to 0 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_start_address_l(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion6StartAddressL {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_start_address_l
    }
    #[doc = "0x50d4 - The FW Region 6 Start Address High Register defines the start address bits 47 to 32 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_start_address_h(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion6StartAddressH {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_start_address_h
    }
    #[doc = "0x50d8 - The FW Region 6 End Address Low Register defines the end address bits 31 to 0 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_end_address_l(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion6EndAddressL {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_end_address_l
    }
    #[doc = "0x50dc - The FW Region 6 End Address High Register defines the end address bits 47 to 32 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_end_address_h(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion6EndAddressH {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_end_address_h
    }
    #[doc = "0x50e0 - The FW Region 7 Control Register defines the control fields for the slave Idmss_am64_main_0.ipcss_vbm_dst region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_control(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion7Control {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_control
    }
    #[doc = "0x50e4 - The FW Region 7 Permission 0 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_permission_0(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion7Permission0 {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_permission_0
    }
    #[doc = "0x50e8 - The FW Region 7 Permission 1 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_permission_1(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion7Permission1 {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_permission_1
    }
    #[doc = "0x50ec - The FW Region 7 Permission 2 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_permission_2(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion7Permission2 {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_permission_2
    }
    #[doc = "0x50f0 - The FW Region 7 Start Address Low Register defines the start address bits 31 to 0 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_start_address_l(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion7StartAddressL {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_start_address_l
    }
    #[doc = "0x50f4 - The FW Region 7 Start Address High Register defines the start address bits 47 to 32 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_start_address_h(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion7StartAddressH {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_start_address_h
    }
    #[doc = "0x50f8 - The FW Region 7 End Address Low Register defines the end address bits 31 to 0 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_end_address_l(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion7EndAddressL {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_end_address_l
    }
    #[doc = "0x50fc - The FW Region 7 End Address High Register defines the end address bits 47 to 32 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_end_address_h(
        &self,
    ) -> &FwRegsIdmssAm64Main0IpcssVbmDstFwRegion7EndAddressH {
        &self.fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_end_address_h
    }
    #[doc = "0x5400 - The FW Region 0 Control Register defines the control fields for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_control(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion0Control {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_control
    }
    #[doc = "0x5404 - The FW Region 0 Permission 0 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_permission_0(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion0Permission0 {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_permission_0
    }
    #[doc = "0x5408 - The FW Region 0 Permission 1 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_permission_1(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion0Permission1 {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_permission_1
    }
    #[doc = "0x540c - The FW Region 0 Permission 2 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_permission_2(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion0Permission2 {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_permission_2
    }
    #[doc = "0x5410 - The FW Region 0 Start Address Low Register defines the start address bits 31 to 0 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_start_address_l(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion0StartAddressL {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_start_address_l
    }
    #[doc = "0x5414 - The FW Region 0 Start Address High Register defines the start address bits 47 to 32 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_start_address_h(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion0StartAddressH {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_start_address_h
    }
    #[doc = "0x5418 - The FW Region 0 End Address Low Register defines the end address bits 31 to 0 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_end_address_l(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion0EndAddressL {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_end_address_l
    }
    #[doc = "0x541c - The FW Region 0 End Address High Register defines the end address bits 47 to 32 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_end_address_h(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion0EndAddressH {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_end_address_h
    }
    #[doc = "0x5420 - The FW Region 1 Control Register defines the control fields for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_control(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion1Control {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_control
    }
    #[doc = "0x5424 - The FW Region 1 Permission 0 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_permission_0(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion1Permission0 {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_permission_0
    }
    #[doc = "0x5428 - The FW Region 1 Permission 1 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_permission_1(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion1Permission1 {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_permission_1
    }
    #[doc = "0x542c - The FW Region 1 Permission 2 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_permission_2(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion1Permission2 {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_permission_2
    }
    #[doc = "0x5430 - The FW Region 1 Start Address Low Register defines the start address bits 31 to 0 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_start_address_l(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion1StartAddressL {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_start_address_l
    }
    #[doc = "0x5434 - The FW Region 1 Start Address High Register defines the start address bits 47 to 32 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_start_address_h(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion1StartAddressH {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_start_address_h
    }
    #[doc = "0x5438 - The FW Region 1 End Address Low Register defines the end address bits 31 to 0 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_end_address_l(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion1EndAddressL {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_end_address_l
    }
    #[doc = "0x543c - The FW Region 1 End Address High Register defines the end address bits 47 to 32 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_end_address_h(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion1EndAddressH {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_end_address_h
    }
    #[doc = "0x5440 - The FW Region 2 Control Register defines the control fields for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_control(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion2Control {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_control
    }
    #[doc = "0x5444 - The FW Region 2 Permission 0 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_permission_0(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion2Permission0 {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_permission_0
    }
    #[doc = "0x5448 - The FW Region 2 Permission 1 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_permission_1(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion2Permission1 {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_permission_1
    }
    #[doc = "0x544c - The FW Region 2 Permission 2 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_permission_2(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion2Permission2 {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_permission_2
    }
    #[doc = "0x5450 - The FW Region 2 Start Address Low Register defines the start address bits 31 to 0 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_start_address_l(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion2StartAddressL {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_start_address_l
    }
    #[doc = "0x5454 - The FW Region 2 Start Address High Register defines the start address bits 47 to 32 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_start_address_h(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion2StartAddressH {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_start_address_h
    }
    #[doc = "0x5458 - The FW Region 2 End Address Low Register defines the end address bits 31 to 0 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_end_address_l(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion2EndAddressL {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_end_address_l
    }
    #[doc = "0x545c - The FW Region 2 End Address High Register defines the end address bits 47 to 32 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_end_address_h(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion2EndAddressH {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_end_address_h
    }
    #[doc = "0x5460 - The FW Region 3 Control Register defines the control fields for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_control(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion3Control {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_control
    }
    #[doc = "0x5464 - The FW Region 3 Permission 0 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_permission_0(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion3Permission0 {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_permission_0
    }
    #[doc = "0x5468 - The FW Region 3 Permission 1 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_permission_1(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion3Permission1 {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_permission_1
    }
    #[doc = "0x546c - The FW Region 3 Permission 2 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_permission_2(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion3Permission2 {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_permission_2
    }
    #[doc = "0x5470 - The FW Region 3 Start Address Low Register defines the start address bits 31 to 0 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_start_address_l(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion3StartAddressL {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_start_address_l
    }
    #[doc = "0x5474 - The FW Region 3 Start Address High Register defines the start address bits 47 to 32 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_start_address_h(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion3StartAddressH {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_start_address_h
    }
    #[doc = "0x5478 - The FW Region 3 End Address Low Register defines the end address bits 31 to 0 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_end_address_l(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion3EndAddressL {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_end_address_l
    }
    #[doc = "0x547c - The FW Region 3 End Address High Register defines the end address bits 47 to 32 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_end_address_h(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion3EndAddressH {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_end_address_h
    }
    #[doc = "0x5480 - The FW Region 4 Control Register defines the control fields for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_control(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion4Control {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_control
    }
    #[doc = "0x5484 - The FW Region 4 Permission 0 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_permission_0(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion4Permission0 {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_permission_0
    }
    #[doc = "0x5488 - The FW Region 4 Permission 1 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_permission_1(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion4Permission1 {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_permission_1
    }
    #[doc = "0x548c - The FW Region 4 Permission 2 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_permission_2(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion4Permission2 {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_permission_2
    }
    #[doc = "0x5490 - The FW Region 4 Start Address Low Register defines the start address bits 31 to 0 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_start_address_l(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion4StartAddressL {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_start_address_l
    }
    #[doc = "0x5494 - The FW Region 4 Start Address High Register defines the start address bits 47 to 32 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_start_address_h(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion4StartAddressH {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_start_address_h
    }
    #[doc = "0x5498 - The FW Region 4 End Address Low Register defines the end address bits 31 to 0 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_end_address_l(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion4EndAddressL {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_end_address_l
    }
    #[doc = "0x549c - The FW Region 4 End Address High Register defines the end address bits 47 to 32 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_end_address_h(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion4EndAddressH {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_end_address_h
    }
    #[doc = "0x54a0 - The FW Region 5 Control Register defines the control fields for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_control(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion5Control {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_control
    }
    #[doc = "0x54a4 - The FW Region 5 Permission 0 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_permission_0(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion5Permission0 {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_permission_0
    }
    #[doc = "0x54a8 - The FW Region 5 Permission 1 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_permission_1(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion5Permission1 {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_permission_1
    }
    #[doc = "0x54ac - The FW Region 5 Permission 2 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_permission_2(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion5Permission2 {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_permission_2
    }
    #[doc = "0x54b0 - The FW Region 5 Start Address Low Register defines the start address bits 31 to 0 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_start_address_l(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion5StartAddressL {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_start_address_l
    }
    #[doc = "0x54b4 - The FW Region 5 Start Address High Register defines the start address bits 47 to 32 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_start_address_h(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion5StartAddressH {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_start_address_h
    }
    #[doc = "0x54b8 - The FW Region 5 End Address Low Register defines the end address bits 31 to 0 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_end_address_l(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion5EndAddressL {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_end_address_l
    }
    #[doc = "0x54bc - The FW Region 5 End Address High Register defines the end address bits 47 to 32 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_end_address_h(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion5EndAddressH {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_end_address_h
    }
    #[doc = "0x54c0 - The FW Region 6 Control Register defines the control fields for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_control(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion6Control {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_control
    }
    #[doc = "0x54c4 - The FW Region 6 Permission 0 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_permission_0(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion6Permission0 {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_permission_0
    }
    #[doc = "0x54c8 - The FW Region 6 Permission 1 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_permission_1(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion6Permission1 {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_permission_1
    }
    #[doc = "0x54cc - The FW Region 6 Permission 2 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_permission_2(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion6Permission2 {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_permission_2
    }
    #[doc = "0x54d0 - The FW Region 6 Start Address Low Register defines the start address bits 31 to 0 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_start_address_l(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion6StartAddressL {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_start_address_l
    }
    #[doc = "0x54d4 - The FW Region 6 Start Address High Register defines the start address bits 47 to 32 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_start_address_h(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion6StartAddressH {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_start_address_h
    }
    #[doc = "0x54d8 - The FW Region 6 End Address Low Register defines the end address bits 31 to 0 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_end_address_l(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion6EndAddressL {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_end_address_l
    }
    #[doc = "0x54dc - The FW Region 6 End Address High Register defines the end address bits 47 to 32 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_end_address_h(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion6EndAddressH {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_end_address_h
    }
    #[doc = "0x54e0 - The FW Region 7 Control Register defines the control fields for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_control(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion7Control {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_control
    }
    #[doc = "0x54e4 - The FW Region 7 Permission 0 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_permission_0(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion7Permission0 {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_permission_0
    }
    #[doc = "0x54e8 - The FW Region 7 Permission 1 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_permission_1(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion7Permission1 {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_permission_1
    }
    #[doc = "0x54ec - The FW Region 7 Permission 2 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_permission_2(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion7Permission2 {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_permission_2
    }
    #[doc = "0x54f0 - The FW Region 7 Start Address Low Register defines the start address bits 31 to 0 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_start_address_l(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion7StartAddressL {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_start_address_l
    }
    #[doc = "0x54f4 - The FW Region 7 Start Address High Register defines the start address bits 47 to 32 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_start_address_h(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion7StartAddressH {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_start_address_h
    }
    #[doc = "0x54f8 - The FW Region 7 End Address Low Register defines the end address bits 31 to 0 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_end_address_l(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion7EndAddressL {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_end_address_l
    }
    #[doc = "0x54fc - The FW Region 7 End Address High Register defines the end address bits 47 to 32 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_end_address_h(
        &self,
    ) -> &FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion7EndAddressH {
        &self.fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_end_address_h
    }
    #[doc = "0x5800 - The FW Region 0 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_control(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion0Control {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_control
    }
    #[doc = "0x5804 - The FW Region 0 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_permission_0(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion0Permission0 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_permission_0
    }
    #[doc = "0x5808 - The FW Region 0 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_permission_1(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion0Permission1 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_permission_1
    }
    #[doc = "0x580c - The FW Region 0 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_permission_2(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion0Permission2 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_permission_2
    }
    #[doc = "0x5810 - The FW Region 0 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_start_address_l(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion0StartAddressL {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_start_address_l
    }
    #[doc = "0x5814 - The FW Region 0 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_start_address_h(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion0StartAddressH {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_start_address_h
    }
    #[doc = "0x5818 - The FW Region 0 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_end_address_l(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion0EndAddressL {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_end_address_l
    }
    #[doc = "0x581c - The FW Region 0 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_end_address_h(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion0EndAddressH {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_end_address_h
    }
    #[doc = "0x5820 - The FW Region 1 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_control(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion1Control {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_control
    }
    #[doc = "0x5824 - The FW Region 1 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_permission_0(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion1Permission0 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_permission_0
    }
    #[doc = "0x5828 - The FW Region 1 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_permission_1(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion1Permission1 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_permission_1
    }
    #[doc = "0x582c - The FW Region 1 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_permission_2(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion1Permission2 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_permission_2
    }
    #[doc = "0x5830 - The FW Region 1 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_start_address_l(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion1StartAddressL {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_start_address_l
    }
    #[doc = "0x5834 - The FW Region 1 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_start_address_h(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion1StartAddressH {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_start_address_h
    }
    #[doc = "0x5838 - The FW Region 1 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_end_address_l(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion1EndAddressL {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_end_address_l
    }
    #[doc = "0x583c - The FW Region 1 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_end_address_h(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion1EndAddressH {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_end_address_h
    }
    #[doc = "0x5840 - The FW Region 2 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_control(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion2Control {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_control
    }
    #[doc = "0x5844 - The FW Region 2 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_permission_0(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion2Permission0 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_permission_0
    }
    #[doc = "0x5848 - The FW Region 2 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_permission_1(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion2Permission1 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_permission_1
    }
    #[doc = "0x584c - The FW Region 2 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_permission_2(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion2Permission2 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_permission_2
    }
    #[doc = "0x5850 - The FW Region 2 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_start_address_l(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion2StartAddressL {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_start_address_l
    }
    #[doc = "0x5854 - The FW Region 2 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_start_address_h(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion2StartAddressH {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_start_address_h
    }
    #[doc = "0x5858 - The FW Region 2 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_end_address_l(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion2EndAddressL {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_end_address_l
    }
    #[doc = "0x585c - The FW Region 2 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_end_address_h(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion2EndAddressH {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_end_address_h
    }
    #[doc = "0x5860 - The FW Region 3 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_control(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion3Control {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_control
    }
    #[doc = "0x5864 - The FW Region 3 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_permission_0(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion3Permission0 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_permission_0
    }
    #[doc = "0x5868 - The FW Region 3 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_permission_1(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion3Permission1 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_permission_1
    }
    #[doc = "0x586c - The FW Region 3 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_permission_2(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion3Permission2 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_permission_2
    }
    #[doc = "0x5870 - The FW Region 3 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_start_address_l(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion3StartAddressL {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_start_address_l
    }
    #[doc = "0x5874 - The FW Region 3 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_start_address_h(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion3StartAddressH {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_start_address_h
    }
    #[doc = "0x5878 - The FW Region 3 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_end_address_l(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion3EndAddressL {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_end_address_l
    }
    #[doc = "0x587c - The FW Region 3 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_end_address_h(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion3EndAddressH {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_end_address_h
    }
    #[doc = "0x5880 - The FW Region 4 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_control(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion4Control {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_control
    }
    #[doc = "0x5884 - The FW Region 4 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_permission_0(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion4Permission0 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_permission_0
    }
    #[doc = "0x5888 - The FW Region 4 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_permission_1(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion4Permission1 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_permission_1
    }
    #[doc = "0x588c - The FW Region 4 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_permission_2(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion4Permission2 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_permission_2
    }
    #[doc = "0x5890 - The FW Region 4 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_start_address_l(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion4StartAddressL {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_start_address_l
    }
    #[doc = "0x5894 - The FW Region 4 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_start_address_h(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion4StartAddressH {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_start_address_h
    }
    #[doc = "0x5898 - The FW Region 4 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_end_address_l(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion4EndAddressL {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_end_address_l
    }
    #[doc = "0x589c - The FW Region 4 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_end_address_h(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion4EndAddressH {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_end_address_h
    }
    #[doc = "0x58a0 - The FW Region 5 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_control(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion5Control {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_control
    }
    #[doc = "0x58a4 - The FW Region 5 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_permission_0(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion5Permission0 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_permission_0
    }
    #[doc = "0x58a8 - The FW Region 5 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_permission_1(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion5Permission1 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_permission_1
    }
    #[doc = "0x58ac - The FW Region 5 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_permission_2(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion5Permission2 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_permission_2
    }
    #[doc = "0x58b0 - The FW Region 5 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_start_address_l(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion5StartAddressL {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_start_address_l
    }
    #[doc = "0x58b4 - The FW Region 5 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_start_address_h(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion5StartAddressH {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_start_address_h
    }
    #[doc = "0x58b8 - The FW Region 5 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_end_address_l(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion5EndAddressL {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_end_address_l
    }
    #[doc = "0x58bc - The FW Region 5 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_end_address_h(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion5EndAddressH {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_end_address_h
    }
    #[doc = "0x58c0 - The FW Region 6 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_control(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion6Control {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_control
    }
    #[doc = "0x58c4 - The FW Region 6 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_permission_0(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion6Permission0 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_permission_0
    }
    #[doc = "0x58c8 - The FW Region 6 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_permission_1(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion6Permission1 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_permission_1
    }
    #[doc = "0x58cc - The FW Region 6 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_permission_2(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion6Permission2 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_permission_2
    }
    #[doc = "0x58d0 - The FW Region 6 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_start_address_l(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion6StartAddressL {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_start_address_l
    }
    #[doc = "0x58d4 - The FW Region 6 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_start_address_h(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion6StartAddressH {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_start_address_h
    }
    #[doc = "0x58d8 - The FW Region 6 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_end_address_l(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion6EndAddressL {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_end_address_l
    }
    #[doc = "0x58dc - The FW Region 6 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_end_address_h(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion6EndAddressH {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_end_address_h
    }
    #[doc = "0x58e0 - The FW Region 7 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_control(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion7Control {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_control
    }
    #[doc = "0x58e4 - The FW Region 7 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_permission_0(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion7Permission0 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_permission_0
    }
    #[doc = "0x58e8 - The FW Region 7 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_permission_1(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion7Permission1 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_permission_1
    }
    #[doc = "0x58ec - The FW Region 7 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_permission_2(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion7Permission2 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_permission_2
    }
    #[doc = "0x58f0 - The FW Region 7 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_start_address_l(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion7StartAddressL {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_start_address_l
    }
    #[doc = "0x58f4 - The FW Region 7 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_start_address_h(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion7StartAddressH {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_start_address_h
    }
    #[doc = "0x58f8 - The FW Region 7 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_end_address_l(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion7EndAddressL {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_end_address_l
    }
    #[doc = "0x58fc - The FW Region 7 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_end_address_h(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion7EndAddressH {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_end_address_h
    }
    #[doc = "0x5900 - The FW Region 8 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 8 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_control(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion8Control {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_control
    }
    #[doc = "0x5904 - The FW Region 8 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 8 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_permission_0(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion8Permission0 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_permission_0
    }
    #[doc = "0x5908 - The FW Region 8 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 8 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_permission_1(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion8Permission1 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_permission_1
    }
    #[doc = "0x590c - The FW Region 8 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 8 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_permission_2(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion8Permission2 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_permission_2
    }
    #[doc = "0x5910 - The FW Region 8 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 8 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_start_address_l(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion8StartAddressL {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_start_address_l
    }
    #[doc = "0x5914 - The FW Region 8 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 8 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_start_address_h(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion8StartAddressH {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_start_address_h
    }
    #[doc = "0x5918 - The FW Region 8 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 8 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_end_address_l(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion8EndAddressL {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_end_address_l
    }
    #[doc = "0x591c - The FW Region 8 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 8 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_end_address_h(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion8EndAddressH {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_end_address_h
    }
    #[doc = "0x5920 - The FW Region 9 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 9 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_control(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion9Control {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_control
    }
    #[doc = "0x5924 - The FW Region 9 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 9 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_permission_0(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion9Permission0 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_permission_0
    }
    #[doc = "0x5928 - The FW Region 9 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 9 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_permission_1(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion9Permission1 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_permission_1
    }
    #[doc = "0x592c - The FW Region 9 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 9 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_permission_2(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion9Permission2 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_permission_2
    }
    #[doc = "0x5930 - The FW Region 9 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 9 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_start_address_l(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion9StartAddressL {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_start_address_l
    }
    #[doc = "0x5934 - The FW Region 9 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 9 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_start_address_h(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion9StartAddressH {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_start_address_h
    }
    #[doc = "0x5938 - The FW Region 9 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 9 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_end_address_l(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion9EndAddressL {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_end_address_l
    }
    #[doc = "0x593c - The FW Region 9 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 9 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_end_address_h(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion9EndAddressH {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_end_address_h
    }
    #[doc = "0x5940 - The FW Region 10 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 10 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_control(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion10Control {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_control
    }
    #[doc = "0x5944 - The FW Region 10 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 10 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_permission_0(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion10Permission0 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_permission_0
    }
    #[doc = "0x5948 - The FW Region 10 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 10 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_permission_1(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion10Permission1 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_permission_1
    }
    #[doc = "0x594c - The FW Region 10 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 10 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_permission_2(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion10Permission2 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_permission_2
    }
    #[doc = "0x5950 - The FW Region 10 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 10 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_start_address_l(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion10StartAddressL {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_start_address_l
    }
    #[doc = "0x5954 - The FW Region 10 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 10 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_start_address_h(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion10StartAddressH {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_start_address_h
    }
    #[doc = "0x5958 - The FW Region 10 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 10 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_end_address_l(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion10EndAddressL {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_end_address_l
    }
    #[doc = "0x595c - The FW Region 10 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 10 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_end_address_h(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion10EndAddressH {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_end_address_h
    }
    #[doc = "0x5960 - The FW Region 11 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 11 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_control(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion11Control {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_control
    }
    #[doc = "0x5964 - The FW Region 11 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 11 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_permission_0(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion11Permission0 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_permission_0
    }
    #[doc = "0x5968 - The FW Region 11 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 11 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_permission_1(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion11Permission1 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_permission_1
    }
    #[doc = "0x596c - The FW Region 11 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 11 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_permission_2(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion11Permission2 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_permission_2
    }
    #[doc = "0x5970 - The FW Region 11 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 11 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_start_address_l(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion11StartAddressL {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_start_address_l
    }
    #[doc = "0x5974 - The FW Region 11 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 11 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_start_address_h(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion11StartAddressH {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_start_address_h
    }
    #[doc = "0x5978 - The FW Region 11 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 11 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_end_address_l(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion11EndAddressL {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_end_address_l
    }
    #[doc = "0x597c - The FW Region 11 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 11 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_end_address_h(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion11EndAddressH {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_end_address_h
    }
    #[doc = "0x5980 - The FW Region 12 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 12 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_control(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion12Control {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_control
    }
    #[doc = "0x5984 - The FW Region 12 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 12 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_permission_0(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion12Permission0 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_permission_0
    }
    #[doc = "0x5988 - The FW Region 12 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 12 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_permission_1(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion12Permission1 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_permission_1
    }
    #[doc = "0x598c - The FW Region 12 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 12 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_permission_2(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion12Permission2 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_permission_2
    }
    #[doc = "0x5990 - The FW Region 12 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 12 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_start_address_l(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion12StartAddressL {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_start_address_l
    }
    #[doc = "0x5994 - The FW Region 12 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 12 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_start_address_h(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion12StartAddressH {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_start_address_h
    }
    #[doc = "0x5998 - The FW Region 12 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 12 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_end_address_l(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion12EndAddressL {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_end_address_l
    }
    #[doc = "0x599c - The FW Region 12 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 12 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_end_address_h(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion12EndAddressH {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_end_address_h
    }
    #[doc = "0x59a0 - The FW Region 13 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 13 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_control(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion13Control {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_control
    }
    #[doc = "0x59a4 - The FW Region 13 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 13 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_permission_0(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion13Permission0 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_permission_0
    }
    #[doc = "0x59a8 - The FW Region 13 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 13 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_permission_1(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion13Permission1 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_permission_1
    }
    #[doc = "0x59ac - The FW Region 13 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 13 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_permission_2(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion13Permission2 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_permission_2
    }
    #[doc = "0x59b0 - The FW Region 13 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 13 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_start_address_l(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion13StartAddressL {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_start_address_l
    }
    #[doc = "0x59b4 - The FW Region 13 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 13 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_start_address_h(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion13StartAddressH {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_start_address_h
    }
    #[doc = "0x59b8 - The FW Region 13 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 13 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_end_address_l(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion13EndAddressL {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_end_address_l
    }
    #[doc = "0x59bc - The FW Region 13 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 13 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_end_address_h(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion13EndAddressH {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_end_address_h
    }
    #[doc = "0x59c0 - The FW Region 14 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 14 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_control(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion14Control {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_control
    }
    #[doc = "0x59c4 - The FW Region 14 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 14 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_permission_0(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion14Permission0 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_permission_0
    }
    #[doc = "0x59c8 - The FW Region 14 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 14 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_permission_1(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion14Permission1 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_permission_1
    }
    #[doc = "0x59cc - The FW Region 14 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 14 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_permission_2(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion14Permission2 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_permission_2
    }
    #[doc = "0x59d0 - The FW Region 14 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 14 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_start_address_l(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion14StartAddressL {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_start_address_l
    }
    #[doc = "0x59d4 - The FW Region 14 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 14 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_start_address_h(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion14StartAddressH {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_start_address_h
    }
    #[doc = "0x59d8 - The FW Region 14 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 14 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_end_address_l(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion14EndAddressL {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_end_address_l
    }
    #[doc = "0x59dc - The FW Region 14 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 14 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_end_address_h(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion14EndAddressH {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_end_address_h
    }
    #[doc = "0x59e0 - The FW Region 15 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 15 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_control(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion15Control {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_control
    }
    #[doc = "0x59e4 - The FW Region 15 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 15 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_permission_0(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion15Permission0 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_permission_0
    }
    #[doc = "0x59e8 - The FW Region 15 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 15 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_permission_1(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion15Permission1 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_permission_1
    }
    #[doc = "0x59ec - The FW Region 15 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 15 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_permission_2(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion15Permission2 {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_permission_2
    }
    #[doc = "0x59f0 - The FW Region 15 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 15 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_start_address_l(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion15StartAddressL {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_start_address_l
    }
    #[doc = "0x59f4 - The FW Region 15 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 15 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_start_address_h(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion15StartAddressH {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_start_address_h
    }
    #[doc = "0x59f8 - The FW Region 15 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 15 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_end_address_l(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion15EndAddressL {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_end_address_l
    }
    #[doc = "0x59fc - The FW Region 15 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 15 firewall."]
    #[inline(always)]
    pub const fn fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_end_address_h(
        &self,
    ) -> &FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion15EndAddressH {
        &self.fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_end_address_h
    }
    #[doc = "0x5c00 - The FW Region 0 Control Register defines the control fields for the slave Imsram32kx64e_main_6.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_0_control(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion0Control {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_0_control
    }
    #[doc = "0x5c04 - The FW Region 0 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_0_permission_0(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion0Permission0 {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_0_permission_0
    }
    #[doc = "0x5c08 - The FW Region 0 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_0_permission_1(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion0Permission1 {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_0_permission_1
    }
    #[doc = "0x5c0c - The FW Region 0 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_0_permission_2(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion0Permission2 {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_0_permission_2
    }
    #[doc = "0x5c10 - The FW Region 0 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_6.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_0_start_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion0StartAddressL {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_0_start_address_l
    }
    #[doc = "0x5c14 - The FW Region 0 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_6.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_0_start_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion0StartAddressH {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_0_start_address_h
    }
    #[doc = "0x5c18 - The FW Region 0 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_6.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_0_end_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion0EndAddressL {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_0_end_address_l
    }
    #[doc = "0x5c1c - The FW Region 0 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_6.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_0_end_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion0EndAddressH {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_0_end_address_h
    }
    #[doc = "0x5c20 - The FW Region 1 Control Register defines the control fields for the slave Imsram32kx64e_main_6.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_1_control(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion1Control {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_1_control
    }
    #[doc = "0x5c24 - The FW Region 1 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_1_permission_0(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion1Permission0 {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_1_permission_0
    }
    #[doc = "0x5c28 - The FW Region 1 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_1_permission_1(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion1Permission1 {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_1_permission_1
    }
    #[doc = "0x5c2c - The FW Region 1 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_1_permission_2(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion1Permission2 {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_1_permission_2
    }
    #[doc = "0x5c30 - The FW Region 1 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_6.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_1_start_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion1StartAddressL {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_1_start_address_l
    }
    #[doc = "0x5c34 - The FW Region 1 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_6.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_1_start_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion1StartAddressH {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_1_start_address_h
    }
    #[doc = "0x5c38 - The FW Region 1 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_6.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_1_end_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion1EndAddressL {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_1_end_address_l
    }
    #[doc = "0x5c3c - The FW Region 1 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_6.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_1_end_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion1EndAddressH {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_1_end_address_h
    }
    #[doc = "0x5c40 - The FW Region 2 Control Register defines the control fields for the slave Imsram32kx64e_main_6.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_2_control(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion2Control {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_2_control
    }
    #[doc = "0x5c44 - The FW Region 2 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_2_permission_0(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion2Permission0 {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_2_permission_0
    }
    #[doc = "0x5c48 - The FW Region 2 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_2_permission_1(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion2Permission1 {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_2_permission_1
    }
    #[doc = "0x5c4c - The FW Region 2 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_2_permission_2(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion2Permission2 {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_2_permission_2
    }
    #[doc = "0x5c50 - The FW Region 2 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_6.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_2_start_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion2StartAddressL {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_2_start_address_l
    }
    #[doc = "0x5c54 - The FW Region 2 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_6.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_2_start_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion2StartAddressH {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_2_start_address_h
    }
    #[doc = "0x5c58 - The FW Region 2 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_6.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_2_end_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion2EndAddressL {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_2_end_address_l
    }
    #[doc = "0x5c5c - The FW Region 2 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_6.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_2_end_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion2EndAddressH {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_2_end_address_h
    }
    #[doc = "0x5c60 - The FW Region 3 Control Register defines the control fields for the slave Imsram32kx64e_main_6.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_3_control(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion3Control {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_3_control
    }
    #[doc = "0x5c64 - The FW Region 3 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_3_permission_0(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion3Permission0 {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_3_permission_0
    }
    #[doc = "0x5c68 - The FW Region 3 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_3_permission_1(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion3Permission1 {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_3_permission_1
    }
    #[doc = "0x5c6c - The FW Region 3 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_3_permission_2(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion3Permission2 {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_3_permission_2
    }
    #[doc = "0x5c70 - The FW Region 3 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_6.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_3_start_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion3StartAddressL {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_3_start_address_l
    }
    #[doc = "0x5c74 - The FW Region 3 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_6.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_3_start_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion3StartAddressH {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_3_start_address_h
    }
    #[doc = "0x5c78 - The FW Region 3 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_6.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_3_end_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion3EndAddressL {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_3_end_address_l
    }
    #[doc = "0x5c7c - The FW Region 3 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_6.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_3_end_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion3EndAddressH {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_3_end_address_h
    }
    #[doc = "0x5c80 - The FW Region 4 Control Register defines the control fields for the slave Imsram32kx64e_main_6.slv region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_4_control(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion4Control {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_4_control
    }
    #[doc = "0x5c84 - The FW Region 4 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_4_permission_0(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion4Permission0 {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_4_permission_0
    }
    #[doc = "0x5c88 - The FW Region 4 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_4_permission_1(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion4Permission1 {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_4_permission_1
    }
    #[doc = "0x5c8c - The FW Region 4 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_4_permission_2(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion4Permission2 {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_4_permission_2
    }
    #[doc = "0x5c90 - The FW Region 4 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_6.slv region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_4_start_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion4StartAddressL {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_4_start_address_l
    }
    #[doc = "0x5c94 - The FW Region 4 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_6.slv region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_4_start_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion4StartAddressH {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_4_start_address_h
    }
    #[doc = "0x5c98 - The FW Region 4 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_6.slv region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_4_end_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion4EndAddressL {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_4_end_address_l
    }
    #[doc = "0x5c9c - The FW Region 4 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_6.slv region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_4_end_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion4EndAddressH {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_4_end_address_h
    }
    #[doc = "0x5ca0 - The FW Region 5 Control Register defines the control fields for the slave Imsram32kx64e_main_6.slv region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_5_control(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion5Control {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_5_control
    }
    #[doc = "0x5ca4 - The FW Region 5 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_5_permission_0(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion5Permission0 {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_5_permission_0
    }
    #[doc = "0x5ca8 - The FW Region 5 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_5_permission_1(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion5Permission1 {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_5_permission_1
    }
    #[doc = "0x5cac - The FW Region 5 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_5_permission_2(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion5Permission2 {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_5_permission_2
    }
    #[doc = "0x5cb0 - The FW Region 5 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_6.slv region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_5_start_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion5StartAddressL {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_5_start_address_l
    }
    #[doc = "0x5cb4 - The FW Region 5 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_6.slv region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_5_start_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion5StartAddressH {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_5_start_address_h
    }
    #[doc = "0x5cb8 - The FW Region 5 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_6.slv region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_5_end_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion5EndAddressL {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_5_end_address_l
    }
    #[doc = "0x5cbc - The FW Region 5 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_6.slv region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_5_end_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion5EndAddressH {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_5_end_address_h
    }
    #[doc = "0x5cc0 - The FW Region 6 Control Register defines the control fields for the slave Imsram32kx64e_main_6.slv region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_6_control(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion6Control {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_6_control
    }
    #[doc = "0x5cc4 - The FW Region 6 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_6_permission_0(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion6Permission0 {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_6_permission_0
    }
    #[doc = "0x5cc8 - The FW Region 6 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_6_permission_1(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion6Permission1 {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_6_permission_1
    }
    #[doc = "0x5ccc - The FW Region 6 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_6_permission_2(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion6Permission2 {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_6_permission_2
    }
    #[doc = "0x5cd0 - The FW Region 6 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_6.slv region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_6_start_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion6StartAddressL {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_6_start_address_l
    }
    #[doc = "0x5cd4 - The FW Region 6 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_6.slv region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_6_start_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion6StartAddressH {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_6_start_address_h
    }
    #[doc = "0x5cd8 - The FW Region 6 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_6.slv region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_6_end_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion6EndAddressL {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_6_end_address_l
    }
    #[doc = "0x5cdc - The FW Region 6 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_6.slv region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_6_end_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion6EndAddressH {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_6_end_address_h
    }
    #[doc = "0x5ce0 - The FW Region 7 Control Register defines the control fields for the slave Imsram32kx64e_main_6.slv region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_7_control(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion7Control {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_7_control
    }
    #[doc = "0x5ce4 - The FW Region 7 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_7_permission_0(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion7Permission0 {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_7_permission_0
    }
    #[doc = "0x5ce8 - The FW Region 7 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_7_permission_1(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion7Permission1 {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_7_permission_1
    }
    #[doc = "0x5cec - The FW Region 7 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_7_permission_2(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion7Permission2 {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_7_permission_2
    }
    #[doc = "0x5cf0 - The FW Region 7 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_6.slv region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_7_start_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion7StartAddressL {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_7_start_address_l
    }
    #[doc = "0x5cf4 - The FW Region 7 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_6.slv region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_7_start_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion7StartAddressH {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_7_start_address_h
    }
    #[doc = "0x5cf8 - The FW Region 7 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_6.slv region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_7_end_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion7EndAddressL {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_7_end_address_l
    }
    #[doc = "0x5cfc - The FW Region 7 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_6.slv region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_6_slv_fw_region_7_end_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain6SlvFwRegion7EndAddressH {
        &self.fw_regs_imsram32kx64e_main_6_slv_fw_region_7_end_address_h
    }
    #[doc = "0x6000 - The FW Region 0 Control Register defines the control fields for the slave Imsram32kx64e_main_7.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_0_control(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion0Control {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_0_control
    }
    #[doc = "0x6004 - The FW Region 0 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_0_permission_0(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion0Permission0 {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_0_permission_0
    }
    #[doc = "0x6008 - The FW Region 0 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_0_permission_1(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion0Permission1 {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_0_permission_1
    }
    #[doc = "0x600c - The FW Region 0 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_0_permission_2(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion0Permission2 {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_0_permission_2
    }
    #[doc = "0x6010 - The FW Region 0 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_7.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_0_start_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion0StartAddressL {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_0_start_address_l
    }
    #[doc = "0x6014 - The FW Region 0 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_7.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_0_start_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion0StartAddressH {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_0_start_address_h
    }
    #[doc = "0x6018 - The FW Region 0 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_7.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_0_end_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion0EndAddressL {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_0_end_address_l
    }
    #[doc = "0x601c - The FW Region 0 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_7.slv region 0 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_0_end_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion0EndAddressH {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_0_end_address_h
    }
    #[doc = "0x6020 - The FW Region 1 Control Register defines the control fields for the slave Imsram32kx64e_main_7.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_1_control(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion1Control {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_1_control
    }
    #[doc = "0x6024 - The FW Region 1 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_1_permission_0(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion1Permission0 {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_1_permission_0
    }
    #[doc = "0x6028 - The FW Region 1 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_1_permission_1(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion1Permission1 {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_1_permission_1
    }
    #[doc = "0x602c - The FW Region 1 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_1_permission_2(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion1Permission2 {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_1_permission_2
    }
    #[doc = "0x6030 - The FW Region 1 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_7.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_1_start_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion1StartAddressL {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_1_start_address_l
    }
    #[doc = "0x6034 - The FW Region 1 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_7.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_1_start_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion1StartAddressH {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_1_start_address_h
    }
    #[doc = "0x6038 - The FW Region 1 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_7.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_1_end_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion1EndAddressL {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_1_end_address_l
    }
    #[doc = "0x603c - The FW Region 1 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_7.slv region 1 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_1_end_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion1EndAddressH {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_1_end_address_h
    }
    #[doc = "0x6040 - The FW Region 2 Control Register defines the control fields for the slave Imsram32kx64e_main_7.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_2_control(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion2Control {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_2_control
    }
    #[doc = "0x6044 - The FW Region 2 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_2_permission_0(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion2Permission0 {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_2_permission_0
    }
    #[doc = "0x6048 - The FW Region 2 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_2_permission_1(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion2Permission1 {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_2_permission_1
    }
    #[doc = "0x604c - The FW Region 2 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_2_permission_2(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion2Permission2 {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_2_permission_2
    }
    #[doc = "0x6050 - The FW Region 2 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_7.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_2_start_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion2StartAddressL {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_2_start_address_l
    }
    #[doc = "0x6054 - The FW Region 2 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_7.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_2_start_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion2StartAddressH {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_2_start_address_h
    }
    #[doc = "0x6058 - The FW Region 2 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_7.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_2_end_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion2EndAddressL {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_2_end_address_l
    }
    #[doc = "0x605c - The FW Region 2 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_7.slv region 2 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_2_end_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion2EndAddressH {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_2_end_address_h
    }
    #[doc = "0x6060 - The FW Region 3 Control Register defines the control fields for the slave Imsram32kx64e_main_7.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_3_control(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion3Control {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_3_control
    }
    #[doc = "0x6064 - The FW Region 3 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_3_permission_0(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion3Permission0 {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_3_permission_0
    }
    #[doc = "0x6068 - The FW Region 3 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_3_permission_1(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion3Permission1 {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_3_permission_1
    }
    #[doc = "0x606c - The FW Region 3 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_3_permission_2(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion3Permission2 {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_3_permission_2
    }
    #[doc = "0x6070 - The FW Region 3 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_7.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_3_start_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion3StartAddressL {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_3_start_address_l
    }
    #[doc = "0x6074 - The FW Region 3 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_7.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_3_start_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion3StartAddressH {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_3_start_address_h
    }
    #[doc = "0x6078 - The FW Region 3 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_7.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_3_end_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion3EndAddressL {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_3_end_address_l
    }
    #[doc = "0x607c - The FW Region 3 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_7.slv region 3 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_3_end_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion3EndAddressH {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_3_end_address_h
    }
    #[doc = "0x6080 - The FW Region 4 Control Register defines the control fields for the slave Imsram32kx64e_main_7.slv region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_4_control(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion4Control {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_4_control
    }
    #[doc = "0x6084 - The FW Region 4 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_4_permission_0(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion4Permission0 {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_4_permission_0
    }
    #[doc = "0x6088 - The FW Region 4 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_4_permission_1(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion4Permission1 {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_4_permission_1
    }
    #[doc = "0x608c - The FW Region 4 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_4_permission_2(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion4Permission2 {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_4_permission_2
    }
    #[doc = "0x6090 - The FW Region 4 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_7.slv region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_4_start_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion4StartAddressL {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_4_start_address_l
    }
    #[doc = "0x6094 - The FW Region 4 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_7.slv region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_4_start_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion4StartAddressH {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_4_start_address_h
    }
    #[doc = "0x6098 - The FW Region 4 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_7.slv region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_4_end_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion4EndAddressL {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_4_end_address_l
    }
    #[doc = "0x609c - The FW Region 4 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_7.slv region 4 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_4_end_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion4EndAddressH {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_4_end_address_h
    }
    #[doc = "0x60a0 - The FW Region 5 Control Register defines the control fields for the slave Imsram32kx64e_main_7.slv region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_5_control(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion5Control {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_5_control
    }
    #[doc = "0x60a4 - The FW Region 5 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_5_permission_0(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion5Permission0 {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_5_permission_0
    }
    #[doc = "0x60a8 - The FW Region 5 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_5_permission_1(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion5Permission1 {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_5_permission_1
    }
    #[doc = "0x60ac - The FW Region 5 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_5_permission_2(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion5Permission2 {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_5_permission_2
    }
    #[doc = "0x60b0 - The FW Region 5 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_7.slv region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_5_start_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion5StartAddressL {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_5_start_address_l
    }
    #[doc = "0x60b4 - The FW Region 5 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_7.slv region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_5_start_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion5StartAddressH {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_5_start_address_h
    }
    #[doc = "0x60b8 - The FW Region 5 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_7.slv region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_5_end_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion5EndAddressL {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_5_end_address_l
    }
    #[doc = "0x60bc - The FW Region 5 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_7.slv region 5 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_5_end_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion5EndAddressH {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_5_end_address_h
    }
    #[doc = "0x60c0 - The FW Region 6 Control Register defines the control fields for the slave Imsram32kx64e_main_7.slv region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_6_control(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion6Control {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_6_control
    }
    #[doc = "0x60c4 - The FW Region 6 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_6_permission_0(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion6Permission0 {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_6_permission_0
    }
    #[doc = "0x60c8 - The FW Region 6 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_6_permission_1(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion6Permission1 {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_6_permission_1
    }
    #[doc = "0x60cc - The FW Region 6 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_6_permission_2(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion6Permission2 {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_6_permission_2
    }
    #[doc = "0x60d0 - The FW Region 6 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_7.slv region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_6_start_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion6StartAddressL {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_6_start_address_l
    }
    #[doc = "0x60d4 - The FW Region 6 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_7.slv region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_6_start_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion6StartAddressH {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_6_start_address_h
    }
    #[doc = "0x60d8 - The FW Region 6 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_7.slv region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_6_end_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion6EndAddressL {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_6_end_address_l
    }
    #[doc = "0x60dc - The FW Region 6 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_7.slv region 6 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_6_end_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion6EndAddressH {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_6_end_address_h
    }
    #[doc = "0x60e0 - The FW Region 7 Control Register defines the control fields for the slave Imsram32kx64e_main_7.slv region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_7_control(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion7Control {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_7_control
    }
    #[doc = "0x60e4 - The FW Region 7 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_7_permission_0(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion7Permission0 {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_7_permission_0
    }
    #[doc = "0x60e8 - The FW Region 7 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_7_permission_1(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion7Permission1 {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_7_permission_1
    }
    #[doc = "0x60ec - The FW Region 7 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_7_permission_2(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion7Permission2 {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_7_permission_2
    }
    #[doc = "0x60f0 - The FW Region 7 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_7.slv region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_7_start_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion7StartAddressL {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_7_start_address_l
    }
    #[doc = "0x60f4 - The FW Region 7 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_7.slv region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_7_start_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion7StartAddressH {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_7_start_address_h
    }
    #[doc = "0x60f8 - The FW Region 7 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_7.slv region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_7_end_address_l(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion7EndAddressL {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_7_end_address_l
    }
    #[doc = "0x60fc - The FW Region 7 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_7.slv region 7 firewall."]
    #[inline(always)]
    pub const fn fw_regs_imsram32kx64e_main_7_slv_fw_region_7_end_address_h(
        &self,
    ) -> &FwRegsImsram32kx64eMain7SlvFwRegion7EndAddressH {
        &self.fw_regs_imsram32kx64e_main_7_slv_fw_region_7_end_address_h
    }
}
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_0_control (rw) register accessor: The FW Region 0 Control Register defines the control fields for the slave Isam64_ddr_wrap_main_0.ddrss region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_control`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_0_control")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion0Control = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_control :: FwRegsIsam64DdrWrapMain0DdrssFwRegion0ControlSpec > ;
#[doc = "The FW Region 0 Control Register defines the control fields for the slave Isam64_ddr_wrap_main_0.ddrss region 0 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_control;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_0_permission_0 (rw) register accessor: The FW Region 0 Permission 0 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_permission_0`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_0_permission_0")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion0Permission0 = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_permission_0 :: FwRegsIsam64DdrWrapMain0DdrssFwRegion0Permission0Spec > ;
#[doc = "The FW Region 0 Permission 0 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 0 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_permission_0;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_0_permission_1 (rw) register accessor: The FW Region 0 Permission 1 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_permission_1`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_0_permission_1")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion0Permission1 = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_permission_1 :: FwRegsIsam64DdrWrapMain0DdrssFwRegion0Permission1Spec > ;
#[doc = "The FW Region 0 Permission 1 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 0 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_permission_1;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_0_permission_2 (rw) register accessor: The FW Region 0 Permission 2 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_permission_2`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_0_permission_2")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion0Permission2 = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_permission_2 :: FwRegsIsam64DdrWrapMain0DdrssFwRegion0Permission2Spec > ;
#[doc = "The FW Region 0 Permission 2 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 0 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_permission_2;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_0_start_address_l (rw) register accessor: The FW Region 0 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_ddr_wrap_main_0.ddrss region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_0_start_address_l")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion0StartAddressL = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_start_address_l :: FwRegsIsam64DdrWrapMain0DdrssFwRegion0StartAddressLSpec > ;
#[doc = "The FW Region 0 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_ddr_wrap_main_0.ddrss region 0 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_start_address_l;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_0_start_address_h (rw) register accessor: The FW Region 0 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_ddr_wrap_main_0.ddrss region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_0_start_address_h")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion0StartAddressH = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_start_address_h :: FwRegsIsam64DdrWrapMain0DdrssFwRegion0StartAddressHSpec > ;
#[doc = "The FW Region 0 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_ddr_wrap_main_0.ddrss region 0 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_start_address_h;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_0_end_address_l (rw) register accessor: The FW Region 0 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_0_end_address_l")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion0EndAddressL = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_end_address_l :: FwRegsIsam64DdrWrapMain0DdrssFwRegion0EndAddressLSpec > ;
#[doc = "The FW Region 0 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 0 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_end_address_l;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_0_end_address_h (rw) register accessor: The FW Region 0 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_0_end_address_h")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion0EndAddressH = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_end_address_h :: FwRegsIsam64DdrWrapMain0DdrssFwRegion0EndAddressHSpec > ;
#[doc = "The FW Region 0 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 0 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_0_end_address_h;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_1_control (rw) register accessor: The FW Region 1 Control Register defines the control fields for the slave Isam64_ddr_wrap_main_0.ddrss region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_control`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_1_control")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion1Control = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_control :: FwRegsIsam64DdrWrapMain0DdrssFwRegion1ControlSpec > ;
#[doc = "The FW Region 1 Control Register defines the control fields for the slave Isam64_ddr_wrap_main_0.ddrss region 1 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_control;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_1_permission_0 (rw) register accessor: The FW Region 1 Permission 0 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_permission_0`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_1_permission_0")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion1Permission0 = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_permission_0 :: FwRegsIsam64DdrWrapMain0DdrssFwRegion1Permission0Spec > ;
#[doc = "The FW Region 1 Permission 0 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 1 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_permission_0;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_1_permission_1 (rw) register accessor: The FW Region 1 Permission 1 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_permission_1`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_1_permission_1")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion1Permission1 = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_permission_1 :: FwRegsIsam64DdrWrapMain0DdrssFwRegion1Permission1Spec > ;
#[doc = "The FW Region 1 Permission 1 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 1 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_permission_1;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_1_permission_2 (rw) register accessor: The FW Region 1 Permission 2 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_permission_2`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_1_permission_2")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion1Permission2 = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_permission_2 :: FwRegsIsam64DdrWrapMain0DdrssFwRegion1Permission2Spec > ;
#[doc = "The FW Region 1 Permission 2 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 1 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_permission_2;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_1_start_address_l (rw) register accessor: The FW Region 1 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_ddr_wrap_main_0.ddrss region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_1_start_address_l")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion1StartAddressL = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_start_address_l :: FwRegsIsam64DdrWrapMain0DdrssFwRegion1StartAddressLSpec > ;
#[doc = "The FW Region 1 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_ddr_wrap_main_0.ddrss region 1 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_start_address_l;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_1_start_address_h (rw) register accessor: The FW Region 1 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_ddr_wrap_main_0.ddrss region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_1_start_address_h")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion1StartAddressH = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_start_address_h :: FwRegsIsam64DdrWrapMain0DdrssFwRegion1StartAddressHSpec > ;
#[doc = "The FW Region 1 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_ddr_wrap_main_0.ddrss region 1 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_start_address_h;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_1_end_address_l (rw) register accessor: The FW Region 1 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_1_end_address_l")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion1EndAddressL = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_end_address_l :: FwRegsIsam64DdrWrapMain0DdrssFwRegion1EndAddressLSpec > ;
#[doc = "The FW Region 1 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 1 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_end_address_l;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_1_end_address_h (rw) register accessor: The FW Region 1 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_1_end_address_h")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion1EndAddressH = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_end_address_h :: FwRegsIsam64DdrWrapMain0DdrssFwRegion1EndAddressHSpec > ;
#[doc = "The FW Region 1 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 1 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_1_end_address_h;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_2_control (rw) register accessor: The FW Region 2 Control Register defines the control fields for the slave Isam64_ddr_wrap_main_0.ddrss region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_control`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_2_control")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion2Control = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_control :: FwRegsIsam64DdrWrapMain0DdrssFwRegion2ControlSpec > ;
#[doc = "The FW Region 2 Control Register defines the control fields for the slave Isam64_ddr_wrap_main_0.ddrss region 2 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_control;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_2_permission_0 (rw) register accessor: The FW Region 2 Permission 0 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_permission_0`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_2_permission_0")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion2Permission0 = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_permission_0 :: FwRegsIsam64DdrWrapMain0DdrssFwRegion2Permission0Spec > ;
#[doc = "The FW Region 2 Permission 0 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 2 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_permission_0;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_2_permission_1 (rw) register accessor: The FW Region 2 Permission 1 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_permission_1`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_2_permission_1")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion2Permission1 = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_permission_1 :: FwRegsIsam64DdrWrapMain0DdrssFwRegion2Permission1Spec > ;
#[doc = "The FW Region 2 Permission 1 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 2 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_permission_1;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_2_permission_2 (rw) register accessor: The FW Region 2 Permission 2 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_permission_2`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_2_permission_2")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion2Permission2 = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_permission_2 :: FwRegsIsam64DdrWrapMain0DdrssFwRegion2Permission2Spec > ;
#[doc = "The FW Region 2 Permission 2 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 2 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_permission_2;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_2_start_address_l (rw) register accessor: The FW Region 2 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_ddr_wrap_main_0.ddrss region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_2_start_address_l")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion2StartAddressL = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_start_address_l :: FwRegsIsam64DdrWrapMain0DdrssFwRegion2StartAddressLSpec > ;
#[doc = "The FW Region 2 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_ddr_wrap_main_0.ddrss region 2 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_start_address_l;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_2_start_address_h (rw) register accessor: The FW Region 2 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_ddr_wrap_main_0.ddrss region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_2_start_address_h")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion2StartAddressH = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_start_address_h :: FwRegsIsam64DdrWrapMain0DdrssFwRegion2StartAddressHSpec > ;
#[doc = "The FW Region 2 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_ddr_wrap_main_0.ddrss region 2 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_start_address_h;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_2_end_address_l (rw) register accessor: The FW Region 2 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_2_end_address_l")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion2EndAddressL = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_end_address_l :: FwRegsIsam64DdrWrapMain0DdrssFwRegion2EndAddressLSpec > ;
#[doc = "The FW Region 2 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 2 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_end_address_l;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_2_end_address_h (rw) register accessor: The FW Region 2 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_2_end_address_h")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion2EndAddressH = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_end_address_h :: FwRegsIsam64DdrWrapMain0DdrssFwRegion2EndAddressHSpec > ;
#[doc = "The FW Region 2 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 2 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_2_end_address_h;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_3_control (rw) register accessor: The FW Region 3 Control Register defines the control fields for the slave Isam64_ddr_wrap_main_0.ddrss region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_control`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_3_control")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion3Control = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_control :: FwRegsIsam64DdrWrapMain0DdrssFwRegion3ControlSpec > ;
#[doc = "The FW Region 3 Control Register defines the control fields for the slave Isam64_ddr_wrap_main_0.ddrss region 3 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_control;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_3_permission_0 (rw) register accessor: The FW Region 3 Permission 0 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_permission_0`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_3_permission_0")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion3Permission0 = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_permission_0 :: FwRegsIsam64DdrWrapMain0DdrssFwRegion3Permission0Spec > ;
#[doc = "The FW Region 3 Permission 0 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 3 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_permission_0;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_3_permission_1 (rw) register accessor: The FW Region 3 Permission 1 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_permission_1`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_3_permission_1")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion3Permission1 = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_permission_1 :: FwRegsIsam64DdrWrapMain0DdrssFwRegion3Permission1Spec > ;
#[doc = "The FW Region 3 Permission 1 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 3 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_permission_1;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_3_permission_2 (rw) register accessor: The FW Region 3 Permission 2 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_permission_2`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_3_permission_2")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion3Permission2 = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_permission_2 :: FwRegsIsam64DdrWrapMain0DdrssFwRegion3Permission2Spec > ;
#[doc = "The FW Region 3 Permission 2 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 3 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_permission_2;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_3_start_address_l (rw) register accessor: The FW Region 3 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_ddr_wrap_main_0.ddrss region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_3_start_address_l")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion3StartAddressL = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_start_address_l :: FwRegsIsam64DdrWrapMain0DdrssFwRegion3StartAddressLSpec > ;
#[doc = "The FW Region 3 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_ddr_wrap_main_0.ddrss region 3 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_start_address_l;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_3_start_address_h (rw) register accessor: The FW Region 3 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_ddr_wrap_main_0.ddrss region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_3_start_address_h")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion3StartAddressH = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_start_address_h :: FwRegsIsam64DdrWrapMain0DdrssFwRegion3StartAddressHSpec > ;
#[doc = "The FW Region 3 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_ddr_wrap_main_0.ddrss region 3 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_start_address_h;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_3_end_address_l (rw) register accessor: The FW Region 3 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_3_end_address_l")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion3EndAddressL = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_end_address_l :: FwRegsIsam64DdrWrapMain0DdrssFwRegion3EndAddressLSpec > ;
#[doc = "The FW Region 3 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 3 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_end_address_l;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_3_end_address_h (rw) register accessor: The FW Region 3 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_3_end_address_h")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion3EndAddressH = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_end_address_h :: FwRegsIsam64DdrWrapMain0DdrssFwRegion3EndAddressHSpec > ;
#[doc = "The FW Region 3 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 3 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_3_end_address_h;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_4_control (rw) register accessor: The FW Region 4 Control Register defines the control fields for the slave Isam64_ddr_wrap_main_0.ddrss region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_control`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_4_control")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion4Control = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_control :: FwRegsIsam64DdrWrapMain0DdrssFwRegion4ControlSpec > ;
#[doc = "The FW Region 4 Control Register defines the control fields for the slave Isam64_ddr_wrap_main_0.ddrss region 4 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_control;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_4_permission_0 (rw) register accessor: The FW Region 4 Permission 0 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_permission_0`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_4_permission_0")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion4Permission0 = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_permission_0 :: FwRegsIsam64DdrWrapMain0DdrssFwRegion4Permission0Spec > ;
#[doc = "The FW Region 4 Permission 0 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 4 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_permission_0;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_4_permission_1 (rw) register accessor: The FW Region 4 Permission 1 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_permission_1`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_4_permission_1")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion4Permission1 = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_permission_1 :: FwRegsIsam64DdrWrapMain0DdrssFwRegion4Permission1Spec > ;
#[doc = "The FW Region 4 Permission 1 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 4 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_permission_1;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_4_permission_2 (rw) register accessor: The FW Region 4 Permission 2 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_permission_2`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_4_permission_2")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion4Permission2 = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_permission_2 :: FwRegsIsam64DdrWrapMain0DdrssFwRegion4Permission2Spec > ;
#[doc = "The FW Region 4 Permission 2 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 4 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_permission_2;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_4_start_address_l (rw) register accessor: The FW Region 4 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_ddr_wrap_main_0.ddrss region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_4_start_address_l")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion4StartAddressL = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_start_address_l :: FwRegsIsam64DdrWrapMain0DdrssFwRegion4StartAddressLSpec > ;
#[doc = "The FW Region 4 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_ddr_wrap_main_0.ddrss region 4 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_start_address_l;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_4_start_address_h (rw) register accessor: The FW Region 4 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_ddr_wrap_main_0.ddrss region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_4_start_address_h")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion4StartAddressH = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_start_address_h :: FwRegsIsam64DdrWrapMain0DdrssFwRegion4StartAddressHSpec > ;
#[doc = "The FW Region 4 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_ddr_wrap_main_0.ddrss region 4 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_start_address_h;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_4_end_address_l (rw) register accessor: The FW Region 4 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_4_end_address_l")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion4EndAddressL = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_end_address_l :: FwRegsIsam64DdrWrapMain0DdrssFwRegion4EndAddressLSpec > ;
#[doc = "The FW Region 4 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 4 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_end_address_l;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_4_end_address_h (rw) register accessor: The FW Region 4 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_4_end_address_h")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion4EndAddressH = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_end_address_h :: FwRegsIsam64DdrWrapMain0DdrssFwRegion4EndAddressHSpec > ;
#[doc = "The FW Region 4 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 4 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_4_end_address_h;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_5_control (rw) register accessor: The FW Region 5 Control Register defines the control fields for the slave Isam64_ddr_wrap_main_0.ddrss region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_control`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_5_control")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion5Control = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_control :: FwRegsIsam64DdrWrapMain0DdrssFwRegion5ControlSpec > ;
#[doc = "The FW Region 5 Control Register defines the control fields for the slave Isam64_ddr_wrap_main_0.ddrss region 5 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_control;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_5_permission_0 (rw) register accessor: The FW Region 5 Permission 0 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_permission_0`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_5_permission_0")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion5Permission0 = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_permission_0 :: FwRegsIsam64DdrWrapMain0DdrssFwRegion5Permission0Spec > ;
#[doc = "The FW Region 5 Permission 0 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 5 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_permission_0;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_5_permission_1 (rw) register accessor: The FW Region 5 Permission 1 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_permission_1`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_5_permission_1")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion5Permission1 = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_permission_1 :: FwRegsIsam64DdrWrapMain0DdrssFwRegion5Permission1Spec > ;
#[doc = "The FW Region 5 Permission 1 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 5 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_permission_1;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_5_permission_2 (rw) register accessor: The FW Region 5 Permission 2 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_permission_2`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_5_permission_2")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion5Permission2 = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_permission_2 :: FwRegsIsam64DdrWrapMain0DdrssFwRegion5Permission2Spec > ;
#[doc = "The FW Region 5 Permission 2 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 5 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_permission_2;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_5_start_address_l (rw) register accessor: The FW Region 5 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_ddr_wrap_main_0.ddrss region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_5_start_address_l")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion5StartAddressL = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_start_address_l :: FwRegsIsam64DdrWrapMain0DdrssFwRegion5StartAddressLSpec > ;
#[doc = "The FW Region 5 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_ddr_wrap_main_0.ddrss region 5 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_start_address_l;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_5_start_address_h (rw) register accessor: The FW Region 5 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_ddr_wrap_main_0.ddrss region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_5_start_address_h")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion5StartAddressH = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_start_address_h :: FwRegsIsam64DdrWrapMain0DdrssFwRegion5StartAddressHSpec > ;
#[doc = "The FW Region 5 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_ddr_wrap_main_0.ddrss region 5 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_start_address_h;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_5_end_address_l (rw) register accessor: The FW Region 5 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_5_end_address_l")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion5EndAddressL = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_end_address_l :: FwRegsIsam64DdrWrapMain0DdrssFwRegion5EndAddressLSpec > ;
#[doc = "The FW Region 5 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 5 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_end_address_l;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_5_end_address_h (rw) register accessor: The FW Region 5 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_5_end_address_h")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion5EndAddressH = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_end_address_h :: FwRegsIsam64DdrWrapMain0DdrssFwRegion5EndAddressHSpec > ;
#[doc = "The FW Region 5 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 5 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_5_end_address_h;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_6_control (rw) register accessor: The FW Region 6 Control Register defines the control fields for the slave Isam64_ddr_wrap_main_0.ddrss region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_control`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_6_control")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion6Control = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_control :: FwRegsIsam64DdrWrapMain0DdrssFwRegion6ControlSpec > ;
#[doc = "The FW Region 6 Control Register defines the control fields for the slave Isam64_ddr_wrap_main_0.ddrss region 6 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_control;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_6_permission_0 (rw) register accessor: The FW Region 6 Permission 0 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_permission_0`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_6_permission_0")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion6Permission0 = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_permission_0 :: FwRegsIsam64DdrWrapMain0DdrssFwRegion6Permission0Spec > ;
#[doc = "The FW Region 6 Permission 0 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 6 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_permission_0;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_6_permission_1 (rw) register accessor: The FW Region 6 Permission 1 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_permission_1`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_6_permission_1")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion6Permission1 = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_permission_1 :: FwRegsIsam64DdrWrapMain0DdrssFwRegion6Permission1Spec > ;
#[doc = "The FW Region 6 Permission 1 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 6 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_permission_1;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_6_permission_2 (rw) register accessor: The FW Region 6 Permission 2 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_permission_2`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_6_permission_2")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion6Permission2 = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_permission_2 :: FwRegsIsam64DdrWrapMain0DdrssFwRegion6Permission2Spec > ;
#[doc = "The FW Region 6 Permission 2 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 6 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_permission_2;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_6_start_address_l (rw) register accessor: The FW Region 6 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_ddr_wrap_main_0.ddrss region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_6_start_address_l")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion6StartAddressL = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_start_address_l :: FwRegsIsam64DdrWrapMain0DdrssFwRegion6StartAddressLSpec > ;
#[doc = "The FW Region 6 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_ddr_wrap_main_0.ddrss region 6 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_start_address_l;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_6_start_address_h (rw) register accessor: The FW Region 6 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_ddr_wrap_main_0.ddrss region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_6_start_address_h")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion6StartAddressH = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_start_address_h :: FwRegsIsam64DdrWrapMain0DdrssFwRegion6StartAddressHSpec > ;
#[doc = "The FW Region 6 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_ddr_wrap_main_0.ddrss region 6 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_start_address_h;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_6_end_address_l (rw) register accessor: The FW Region 6 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_6_end_address_l")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion6EndAddressL = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_end_address_l :: FwRegsIsam64DdrWrapMain0DdrssFwRegion6EndAddressLSpec > ;
#[doc = "The FW Region 6 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 6 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_end_address_l;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_6_end_address_h (rw) register accessor: The FW Region 6 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_6_end_address_h")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion6EndAddressH = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_end_address_h :: FwRegsIsam64DdrWrapMain0DdrssFwRegion6EndAddressHSpec > ;
#[doc = "The FW Region 6 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 6 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_6_end_address_h;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_7_control (rw) register accessor: The FW Region 7 Control Register defines the control fields for the slave Isam64_ddr_wrap_main_0.ddrss region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_control`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_7_control")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion7Control = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_control :: FwRegsIsam64DdrWrapMain0DdrssFwRegion7ControlSpec > ;
#[doc = "The FW Region 7 Control Register defines the control fields for the slave Isam64_ddr_wrap_main_0.ddrss region 7 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_control;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_7_permission_0 (rw) register accessor: The FW Region 7 Permission 0 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_permission_0`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_7_permission_0")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion7Permission0 = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_permission_0 :: FwRegsIsam64DdrWrapMain0DdrssFwRegion7Permission0Spec > ;
#[doc = "The FW Region 7 Permission 0 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 7 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_permission_0;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_7_permission_1 (rw) register accessor: The FW Region 7 Permission 1 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_permission_1`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_7_permission_1")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion7Permission1 = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_permission_1 :: FwRegsIsam64DdrWrapMain0DdrssFwRegion7Permission1Spec > ;
#[doc = "The FW Region 7 Permission 1 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 7 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_permission_1;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_7_permission_2 (rw) register accessor: The FW Region 7 Permission 2 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_permission_2`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_7_permission_2")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion7Permission2 = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_permission_2 :: FwRegsIsam64DdrWrapMain0DdrssFwRegion7Permission2Spec > ;
#[doc = "The FW Region 7 Permission 2 Register defines the permissions for the slave Isam64_ddr_wrap_main_0.ddrss region 7 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_permission_2;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_7_start_address_l (rw) register accessor: The FW Region 7 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_ddr_wrap_main_0.ddrss region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_7_start_address_l")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion7StartAddressL = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_start_address_l :: FwRegsIsam64DdrWrapMain0DdrssFwRegion7StartAddressLSpec > ;
#[doc = "The FW Region 7 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_ddr_wrap_main_0.ddrss region 7 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_start_address_l;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_7_start_address_h (rw) register accessor: The FW Region 7 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_ddr_wrap_main_0.ddrss region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_7_start_address_h")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion7StartAddressH = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_start_address_h :: FwRegsIsam64DdrWrapMain0DdrssFwRegion7StartAddressHSpec > ;
#[doc = "The FW Region 7 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_ddr_wrap_main_0.ddrss region 7 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_start_address_h;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_7_end_address_l (rw) register accessor: The FW Region 7 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_7_end_address_l")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion7EndAddressL = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_end_address_l :: FwRegsIsam64DdrWrapMain0DdrssFwRegion7EndAddressLSpec > ;
#[doc = "The FW Region 7 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 7 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_end_address_l;
#[doc = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_7_end_address_h (rw) register accessor: The FW Region 7 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Isam64_ddr_wrap_main_0_ddrss_fw_region_7_end_address_h")]
pub type FwRegsIsam64DdrWrapMain0DdrssFwRegion7EndAddressH = crate :: Reg < fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_end_address_h :: FwRegsIsam64DdrWrapMain0DdrssFwRegion7EndAddressHSpec > ;
#[doc = "The FW Region 7 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_ddr_wrap_main_0.ddrss region 7 firewall."]
pub mod fw_regs_isam64_ddr_wrap_main_0_ddrss_fw_region_7_end_address_h;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_control (rw) register accessor: The FW Region 0 Control Register defines the control fields for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_control`]
module"]
#[doc(alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_control")]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion0Control = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_control :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion0ControlSpec > ;
#[doc = "The FW Region 0 Control Register defines the control fields for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 0 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_control;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_permission_0 (rw) register accessor: The FW Region 0 Permission 0 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_permission_0`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_permission_0"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion0Permission0 = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_permission_0 :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion0Permission0Spec > ;
#[doc = "The FW Region 0 Permission 0 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 0 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_permission_0;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_permission_1 (rw) register accessor: The FW Region 0 Permission 1 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_permission_1`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_permission_1"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion0Permission1 = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_permission_1 :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion0Permission1Spec > ;
#[doc = "The FW Region 0 Permission 1 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 0 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_permission_1;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_permission_2 (rw) register accessor: The FW Region 0 Permission 2 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_permission_2`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_permission_2"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion0Permission2 = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_permission_2 :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion0Permission2Spec > ;
#[doc = "The FW Region 0 Permission 2 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 0 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_permission_2;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_start_address_l (rw) register accessor: The FW Region 0 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_start_address_l`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_start_address_l"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion0StartAddressL = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_start_address_l :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion0StartAddressLSpec > ;
#[doc = "The FW Region 0 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 0 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_start_address_l;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_start_address_h (rw) register accessor: The FW Region 0 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_start_address_h`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_start_address_h"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion0StartAddressH = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_start_address_h :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion0StartAddressHSpec > ;
#[doc = "The FW Region 0 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 0 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_start_address_h;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_end_address_l (rw) register accessor: The FW Region 0 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_end_address_l`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_end_address_l"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion0EndAddressL = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_end_address_l :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion0EndAddressLSpec > ;
#[doc = "The FW Region 0 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 0 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_end_address_l;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_end_address_h (rw) register accessor: The FW Region 0 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_end_address_h`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_end_address_h"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion0EndAddressH = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_end_address_h :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion0EndAddressHSpec > ;
#[doc = "The FW Region 0 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 0 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_0_end_address_h;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_control (rw) register accessor: The FW Region 1 Control Register defines the control fields for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_control`]
module"]
#[doc(alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_control")]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion1Control = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_control :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion1ControlSpec > ;
#[doc = "The FW Region 1 Control Register defines the control fields for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 1 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_control;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_permission_0 (rw) register accessor: The FW Region 1 Permission 0 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_permission_0`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_permission_0"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion1Permission0 = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_permission_0 :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion1Permission0Spec > ;
#[doc = "The FW Region 1 Permission 0 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 1 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_permission_0;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_permission_1 (rw) register accessor: The FW Region 1 Permission 1 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_permission_1`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_permission_1"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion1Permission1 = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_permission_1 :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion1Permission1Spec > ;
#[doc = "The FW Region 1 Permission 1 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 1 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_permission_1;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_permission_2 (rw) register accessor: The FW Region 1 Permission 2 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_permission_2`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_permission_2"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion1Permission2 = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_permission_2 :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion1Permission2Spec > ;
#[doc = "The FW Region 1 Permission 2 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 1 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_permission_2;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_start_address_l (rw) register accessor: The FW Region 1 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_start_address_l`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_start_address_l"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion1StartAddressL = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_start_address_l :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion1StartAddressLSpec > ;
#[doc = "The FW Region 1 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 1 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_start_address_l;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_start_address_h (rw) register accessor: The FW Region 1 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_start_address_h`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_start_address_h"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion1StartAddressH = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_start_address_h :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion1StartAddressHSpec > ;
#[doc = "The FW Region 1 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 1 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_start_address_h;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_end_address_l (rw) register accessor: The FW Region 1 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_end_address_l`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_end_address_l"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion1EndAddressL = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_end_address_l :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion1EndAddressLSpec > ;
#[doc = "The FW Region 1 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 1 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_end_address_l;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_end_address_h (rw) register accessor: The FW Region 1 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_end_address_h`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_end_address_h"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion1EndAddressH = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_end_address_h :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion1EndAddressHSpec > ;
#[doc = "The FW Region 1 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 1 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_1_end_address_h;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_control (rw) register accessor: The FW Region 2 Control Register defines the control fields for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_control`]
module"]
#[doc(alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_control")]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion2Control = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_control :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion2ControlSpec > ;
#[doc = "The FW Region 2 Control Register defines the control fields for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 2 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_control;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_permission_0 (rw) register accessor: The FW Region 2 Permission 0 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_permission_0`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_permission_0"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion2Permission0 = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_permission_0 :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion2Permission0Spec > ;
#[doc = "The FW Region 2 Permission 0 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 2 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_permission_0;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_permission_1 (rw) register accessor: The FW Region 2 Permission 1 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_permission_1`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_permission_1"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion2Permission1 = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_permission_1 :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion2Permission1Spec > ;
#[doc = "The FW Region 2 Permission 1 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 2 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_permission_1;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_permission_2 (rw) register accessor: The FW Region 2 Permission 2 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_permission_2`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_permission_2"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion2Permission2 = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_permission_2 :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion2Permission2Spec > ;
#[doc = "The FW Region 2 Permission 2 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 2 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_permission_2;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_start_address_l (rw) register accessor: The FW Region 2 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_start_address_l`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_start_address_l"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion2StartAddressL = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_start_address_l :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion2StartAddressLSpec > ;
#[doc = "The FW Region 2 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 2 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_start_address_l;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_start_address_h (rw) register accessor: The FW Region 2 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_start_address_h`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_start_address_h"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion2StartAddressH = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_start_address_h :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion2StartAddressHSpec > ;
#[doc = "The FW Region 2 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 2 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_start_address_h;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_end_address_l (rw) register accessor: The FW Region 2 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_end_address_l`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_end_address_l"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion2EndAddressL = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_end_address_l :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion2EndAddressLSpec > ;
#[doc = "The FW Region 2 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 2 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_end_address_l;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_end_address_h (rw) register accessor: The FW Region 2 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_end_address_h`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_end_address_h"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion2EndAddressH = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_end_address_h :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion2EndAddressHSpec > ;
#[doc = "The FW Region 2 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 2 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_2_end_address_h;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_control (rw) register accessor: The FW Region 3 Control Register defines the control fields for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_control`]
module"]
#[doc(alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_control")]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion3Control = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_control :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion3ControlSpec > ;
#[doc = "The FW Region 3 Control Register defines the control fields for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 3 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_control;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_permission_0 (rw) register accessor: The FW Region 3 Permission 0 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_permission_0`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_permission_0"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion3Permission0 = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_permission_0 :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion3Permission0Spec > ;
#[doc = "The FW Region 3 Permission 0 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 3 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_permission_0;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_permission_1 (rw) register accessor: The FW Region 3 Permission 1 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_permission_1`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_permission_1"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion3Permission1 = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_permission_1 :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion3Permission1Spec > ;
#[doc = "The FW Region 3 Permission 1 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 3 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_permission_1;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_permission_2 (rw) register accessor: The FW Region 3 Permission 2 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_permission_2`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_permission_2"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion3Permission2 = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_permission_2 :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion3Permission2Spec > ;
#[doc = "The FW Region 3 Permission 2 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 3 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_permission_2;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_start_address_l (rw) register accessor: The FW Region 3 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_start_address_l`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_start_address_l"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion3StartAddressL = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_start_address_l :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion3StartAddressLSpec > ;
#[doc = "The FW Region 3 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 3 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_start_address_l;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_start_address_h (rw) register accessor: The FW Region 3 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_start_address_h`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_start_address_h"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion3StartAddressH = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_start_address_h :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion3StartAddressHSpec > ;
#[doc = "The FW Region 3 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 3 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_start_address_h;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_end_address_l (rw) register accessor: The FW Region 3 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_end_address_l`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_end_address_l"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion3EndAddressL = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_end_address_l :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion3EndAddressLSpec > ;
#[doc = "The FW Region 3 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 3 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_end_address_l;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_end_address_h (rw) register accessor: The FW Region 3 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_end_address_h`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_end_address_h"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion3EndAddressH = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_end_address_h :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion3EndAddressHSpec > ;
#[doc = "The FW Region 3 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 3 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_3_end_address_h;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_control (rw) register accessor: The FW Region 4 Control Register defines the control fields for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_control`]
module"]
#[doc(alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_control")]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion4Control = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_control :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion4ControlSpec > ;
#[doc = "The FW Region 4 Control Register defines the control fields for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 4 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_control;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_permission_0 (rw) register accessor: The FW Region 4 Permission 0 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_permission_0`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_permission_0"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion4Permission0 = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_permission_0 :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion4Permission0Spec > ;
#[doc = "The FW Region 4 Permission 0 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 4 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_permission_0;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_permission_1 (rw) register accessor: The FW Region 4 Permission 1 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_permission_1`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_permission_1"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion4Permission1 = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_permission_1 :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion4Permission1Spec > ;
#[doc = "The FW Region 4 Permission 1 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 4 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_permission_1;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_permission_2 (rw) register accessor: The FW Region 4 Permission 2 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_permission_2`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_permission_2"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion4Permission2 = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_permission_2 :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion4Permission2Spec > ;
#[doc = "The FW Region 4 Permission 2 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 4 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_permission_2;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_start_address_l (rw) register accessor: The FW Region 4 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_start_address_l`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_start_address_l"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion4StartAddressL = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_start_address_l :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion4StartAddressLSpec > ;
#[doc = "The FW Region 4 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 4 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_start_address_l;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_start_address_h (rw) register accessor: The FW Region 4 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_start_address_h`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_start_address_h"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion4StartAddressH = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_start_address_h :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion4StartAddressHSpec > ;
#[doc = "The FW Region 4 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 4 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_start_address_h;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_end_address_l (rw) register accessor: The FW Region 4 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_end_address_l`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_end_address_l"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion4EndAddressL = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_end_address_l :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion4EndAddressLSpec > ;
#[doc = "The FW Region 4 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 4 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_end_address_l;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_end_address_h (rw) register accessor: The FW Region 4 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_end_address_h`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_end_address_h"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion4EndAddressH = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_end_address_h :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion4EndAddressHSpec > ;
#[doc = "The FW Region 4 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 4 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_4_end_address_h;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_control (rw) register accessor: The FW Region 5 Control Register defines the control fields for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_control`]
module"]
#[doc(alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_control")]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion5Control = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_control :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion5ControlSpec > ;
#[doc = "The FW Region 5 Control Register defines the control fields for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 5 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_control;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_permission_0 (rw) register accessor: The FW Region 5 Permission 0 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_permission_0`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_permission_0"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion5Permission0 = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_permission_0 :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion5Permission0Spec > ;
#[doc = "The FW Region 5 Permission 0 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 5 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_permission_0;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_permission_1 (rw) register accessor: The FW Region 5 Permission 1 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_permission_1`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_permission_1"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion5Permission1 = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_permission_1 :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion5Permission1Spec > ;
#[doc = "The FW Region 5 Permission 1 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 5 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_permission_1;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_permission_2 (rw) register accessor: The FW Region 5 Permission 2 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_permission_2`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_permission_2"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion5Permission2 = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_permission_2 :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion5Permission2Spec > ;
#[doc = "The FW Region 5 Permission 2 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 5 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_permission_2;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_start_address_l (rw) register accessor: The FW Region 5 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_start_address_l`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_start_address_l"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion5StartAddressL = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_start_address_l :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion5StartAddressLSpec > ;
#[doc = "The FW Region 5 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 5 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_start_address_l;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_start_address_h (rw) register accessor: The FW Region 5 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_start_address_h`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_start_address_h"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion5StartAddressH = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_start_address_h :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion5StartAddressHSpec > ;
#[doc = "The FW Region 5 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 5 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_start_address_h;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_end_address_l (rw) register accessor: The FW Region 5 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_end_address_l`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_end_address_l"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion5EndAddressL = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_end_address_l :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion5EndAddressLSpec > ;
#[doc = "The FW Region 5 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 5 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_end_address_l;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_end_address_h (rw) register accessor: The FW Region 5 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_end_address_h`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_end_address_h"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion5EndAddressH = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_end_address_h :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion5EndAddressHSpec > ;
#[doc = "The FW Region 5 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 5 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_5_end_address_h;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_control (rw) register accessor: The FW Region 6 Control Register defines the control fields for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_control`]
module"]
#[doc(alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_control")]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion6Control = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_control :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion6ControlSpec > ;
#[doc = "The FW Region 6 Control Register defines the control fields for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 6 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_control;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_permission_0 (rw) register accessor: The FW Region 6 Permission 0 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_permission_0`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_permission_0"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion6Permission0 = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_permission_0 :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion6Permission0Spec > ;
#[doc = "The FW Region 6 Permission 0 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 6 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_permission_0;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_permission_1 (rw) register accessor: The FW Region 6 Permission 1 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_permission_1`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_permission_1"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion6Permission1 = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_permission_1 :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion6Permission1Spec > ;
#[doc = "The FW Region 6 Permission 1 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 6 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_permission_1;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_permission_2 (rw) register accessor: The FW Region 6 Permission 2 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_permission_2`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_permission_2"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion6Permission2 = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_permission_2 :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion6Permission2Spec > ;
#[doc = "The FW Region 6 Permission 2 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 6 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_permission_2;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_start_address_l (rw) register accessor: The FW Region 6 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_start_address_l`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_start_address_l"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion6StartAddressL = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_start_address_l :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion6StartAddressLSpec > ;
#[doc = "The FW Region 6 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 6 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_start_address_l;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_start_address_h (rw) register accessor: The FW Region 6 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_start_address_h`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_start_address_h"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion6StartAddressH = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_start_address_h :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion6StartAddressHSpec > ;
#[doc = "The FW Region 6 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 6 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_start_address_h;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_end_address_l (rw) register accessor: The FW Region 6 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_end_address_l`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_end_address_l"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion6EndAddressL = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_end_address_l :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion6EndAddressLSpec > ;
#[doc = "The FW Region 6 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 6 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_end_address_l;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_end_address_h (rw) register accessor: The FW Region 6 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_end_address_h`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_end_address_h"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion6EndAddressH = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_end_address_h :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion6EndAddressHSpec > ;
#[doc = "The FW Region 6 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 6 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_6_end_address_h;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_control (rw) register accessor: The FW Region 7 Control Register defines the control fields for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_control`]
module"]
#[doc(alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_control")]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion7Control = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_control :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion7ControlSpec > ;
#[doc = "The FW Region 7 Control Register defines the control fields for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 7 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_control;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_permission_0 (rw) register accessor: The FW Region 7 Permission 0 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_permission_0`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_permission_0"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion7Permission0 = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_permission_0 :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion7Permission0Spec > ;
#[doc = "The FW Region 7 Permission 0 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 7 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_permission_0;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_permission_1 (rw) register accessor: The FW Region 7 Permission 1 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_permission_1`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_permission_1"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion7Permission1 = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_permission_1 :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion7Permission1Spec > ;
#[doc = "The FW Region 7 Permission 1 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 7 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_permission_1;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_permission_2 (rw) register accessor: The FW Region 7 Permission 2 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_permission_2`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_permission_2"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion7Permission2 = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_permission_2 :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion7Permission2Spec > ;
#[doc = "The FW Region 7 Permission 2 Register defines the permissions for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 7 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_permission_2;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_start_address_l (rw) register accessor: The FW Region 7 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_start_address_l`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_start_address_l"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion7StartAddressL = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_start_address_l :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion7StartAddressLSpec > ;
#[doc = "The FW Region 7 Start Address Low Register defines the start address bits 31 to 0 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 7 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_start_address_l;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_start_address_h (rw) register accessor: The FW Region 7 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_start_address_h`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_start_address_h"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion7StartAddressH = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_start_address_h :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion7StartAddressHSpec > ;
#[doc = "The FW Region 7 Start Address High Register defines the start address bits 47 to 32 for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 7 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_start_address_h;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_end_address_l (rw) register accessor: The FW Region 7 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_end_address_l`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_end_address_l"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion7EndAddressL = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_end_address_l :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion7EndAddressLSpec > ;
#[doc = "The FW Region 7 End Address Low Register defines the end address bits 31 to 0 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 7 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_end_address_l;
#[doc = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_end_address_h (rw) register accessor: The FW Region 7 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_end_address_h`]
module"]
#[doc(
    alias = "FW_REGS_Isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_end_address_h"
)]
pub type FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion7EndAddressH = crate :: Reg < fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_end_address_h :: FwRegsIsam64A53_256kbWrapMain0A53DualWrapCbaAcpWFwRegion7EndAddressHSpec > ;
#[doc = "The FW Region 7 End Address High Register defines the end address bits 47 to 32 to include for the slave Isam64_a53_256kb_wrap_main_0.a53_dual_wrap_cba_acp_w region 7 firewall."]
pub mod fw_regs_isam64_a53_256kb_wrap_main_0_a53_dual_wrap_cba_acp_w_fw_region_7_end_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_0_control (rw) register accessor: The FW Region 0 Control Register defines the control fields for the slave Imsram32kx64e_main_0.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_0_slv_fw_region_0_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_0_slv_fw_region_0_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_0_slv_fw_region_0_control`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_0_control")]
pub type FwRegsImsram32kx64eMain0SlvFwRegion0Control = crate :: Reg < fw_regs_imsram32kx64e_main_0_slv_fw_region_0_control :: FwRegsImsram32kx64eMain0SlvFwRegion0ControlSpec > ;
#[doc = "The FW Region 0 Control Register defines the control fields for the slave Imsram32kx64e_main_0.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_0_slv_fw_region_0_control;
#[doc = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_0_permission_0 (rw) register accessor: The FW Region 0 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_0.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_0_slv_fw_region_0_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_0_slv_fw_region_0_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_0_slv_fw_region_0_permission_0`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_0_permission_0")]
pub type FwRegsImsram32kx64eMain0SlvFwRegion0Permission0 = crate :: Reg < fw_regs_imsram32kx64e_main_0_slv_fw_region_0_permission_0 :: FwRegsImsram32kx64eMain0SlvFwRegion0Permission0Spec > ;
#[doc = "The FW Region 0 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_0.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_0_slv_fw_region_0_permission_0;
#[doc = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_0_permission_1 (rw) register accessor: The FW Region 0 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_0.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_0_slv_fw_region_0_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_0_slv_fw_region_0_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_0_slv_fw_region_0_permission_1`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_0_permission_1")]
pub type FwRegsImsram32kx64eMain0SlvFwRegion0Permission1 = crate :: Reg < fw_regs_imsram32kx64e_main_0_slv_fw_region_0_permission_1 :: FwRegsImsram32kx64eMain0SlvFwRegion0Permission1Spec > ;
#[doc = "The FW Region 0 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_0.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_0_slv_fw_region_0_permission_1;
#[doc = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_0_permission_2 (rw) register accessor: The FW Region 0 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_0.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_0_slv_fw_region_0_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_0_slv_fw_region_0_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_0_slv_fw_region_0_permission_2`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_0_permission_2")]
pub type FwRegsImsram32kx64eMain0SlvFwRegion0Permission2 = crate :: Reg < fw_regs_imsram32kx64e_main_0_slv_fw_region_0_permission_2 :: FwRegsImsram32kx64eMain0SlvFwRegion0Permission2Spec > ;
#[doc = "The FW Region 0 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_0.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_0_slv_fw_region_0_permission_2;
#[doc = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_0_start_address_l (rw) register accessor: The FW Region 0 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_0.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_0_slv_fw_region_0_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_0_slv_fw_region_0_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_0_slv_fw_region_0_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_0_start_address_l")]
pub type FwRegsImsram32kx64eMain0SlvFwRegion0StartAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_0_slv_fw_region_0_start_address_l :: FwRegsImsram32kx64eMain0SlvFwRegion0StartAddressLSpec > ;
#[doc = "The FW Region 0 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_0.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_0_slv_fw_region_0_start_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_0_start_address_h (rw) register accessor: The FW Region 0 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_0.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_0_slv_fw_region_0_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_0_slv_fw_region_0_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_0_slv_fw_region_0_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_0_start_address_h")]
pub type FwRegsImsram32kx64eMain0SlvFwRegion0StartAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_0_slv_fw_region_0_start_address_h :: FwRegsImsram32kx64eMain0SlvFwRegion0StartAddressHSpec > ;
#[doc = "The FW Region 0 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_0.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_0_slv_fw_region_0_start_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_0_end_address_l (rw) register accessor: The FW Region 0 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_0.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_0_slv_fw_region_0_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_0_slv_fw_region_0_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_0_slv_fw_region_0_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_0_end_address_l")]
pub type FwRegsImsram32kx64eMain0SlvFwRegion0EndAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_0_slv_fw_region_0_end_address_l :: FwRegsImsram32kx64eMain0SlvFwRegion0EndAddressLSpec > ;
#[doc = "The FW Region 0 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_0.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_0_slv_fw_region_0_end_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_0_end_address_h (rw) register accessor: The FW Region 0 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_0.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_0_slv_fw_region_0_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_0_slv_fw_region_0_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_0_slv_fw_region_0_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_0_end_address_h")]
pub type FwRegsImsram32kx64eMain0SlvFwRegion0EndAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_0_slv_fw_region_0_end_address_h :: FwRegsImsram32kx64eMain0SlvFwRegion0EndAddressHSpec > ;
#[doc = "The FW Region 0 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_0.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_0_slv_fw_region_0_end_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_1_control (rw) register accessor: The FW Region 1 Control Register defines the control fields for the slave Imsram32kx64e_main_0.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_0_slv_fw_region_1_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_0_slv_fw_region_1_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_0_slv_fw_region_1_control`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_1_control")]
pub type FwRegsImsram32kx64eMain0SlvFwRegion1Control = crate :: Reg < fw_regs_imsram32kx64e_main_0_slv_fw_region_1_control :: FwRegsImsram32kx64eMain0SlvFwRegion1ControlSpec > ;
#[doc = "The FW Region 1 Control Register defines the control fields for the slave Imsram32kx64e_main_0.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_0_slv_fw_region_1_control;
#[doc = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_1_permission_0 (rw) register accessor: The FW Region 1 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_0.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_0_slv_fw_region_1_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_0_slv_fw_region_1_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_0_slv_fw_region_1_permission_0`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_1_permission_0")]
pub type FwRegsImsram32kx64eMain0SlvFwRegion1Permission0 = crate :: Reg < fw_regs_imsram32kx64e_main_0_slv_fw_region_1_permission_0 :: FwRegsImsram32kx64eMain0SlvFwRegion1Permission0Spec > ;
#[doc = "The FW Region 1 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_0.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_0_slv_fw_region_1_permission_0;
#[doc = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_1_permission_1 (rw) register accessor: The FW Region 1 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_0.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_0_slv_fw_region_1_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_0_slv_fw_region_1_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_0_slv_fw_region_1_permission_1`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_1_permission_1")]
pub type FwRegsImsram32kx64eMain0SlvFwRegion1Permission1 = crate :: Reg < fw_regs_imsram32kx64e_main_0_slv_fw_region_1_permission_1 :: FwRegsImsram32kx64eMain0SlvFwRegion1Permission1Spec > ;
#[doc = "The FW Region 1 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_0.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_0_slv_fw_region_1_permission_1;
#[doc = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_1_permission_2 (rw) register accessor: The FW Region 1 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_0.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_0_slv_fw_region_1_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_0_slv_fw_region_1_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_0_slv_fw_region_1_permission_2`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_1_permission_2")]
pub type FwRegsImsram32kx64eMain0SlvFwRegion1Permission2 = crate :: Reg < fw_regs_imsram32kx64e_main_0_slv_fw_region_1_permission_2 :: FwRegsImsram32kx64eMain0SlvFwRegion1Permission2Spec > ;
#[doc = "The FW Region 1 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_0.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_0_slv_fw_region_1_permission_2;
#[doc = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_1_start_address_l (rw) register accessor: The FW Region 1 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_0.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_0_slv_fw_region_1_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_0_slv_fw_region_1_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_0_slv_fw_region_1_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_1_start_address_l")]
pub type FwRegsImsram32kx64eMain0SlvFwRegion1StartAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_0_slv_fw_region_1_start_address_l :: FwRegsImsram32kx64eMain0SlvFwRegion1StartAddressLSpec > ;
#[doc = "The FW Region 1 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_0.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_0_slv_fw_region_1_start_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_1_start_address_h (rw) register accessor: The FW Region 1 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_0.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_0_slv_fw_region_1_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_0_slv_fw_region_1_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_0_slv_fw_region_1_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_1_start_address_h")]
pub type FwRegsImsram32kx64eMain0SlvFwRegion1StartAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_0_slv_fw_region_1_start_address_h :: FwRegsImsram32kx64eMain0SlvFwRegion1StartAddressHSpec > ;
#[doc = "The FW Region 1 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_0.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_0_slv_fw_region_1_start_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_1_end_address_l (rw) register accessor: The FW Region 1 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_0.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_0_slv_fw_region_1_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_0_slv_fw_region_1_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_0_slv_fw_region_1_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_1_end_address_l")]
pub type FwRegsImsram32kx64eMain0SlvFwRegion1EndAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_0_slv_fw_region_1_end_address_l :: FwRegsImsram32kx64eMain0SlvFwRegion1EndAddressLSpec > ;
#[doc = "The FW Region 1 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_0.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_0_slv_fw_region_1_end_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_1_end_address_h (rw) register accessor: The FW Region 1 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_0.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_0_slv_fw_region_1_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_0_slv_fw_region_1_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_0_slv_fw_region_1_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_1_end_address_h")]
pub type FwRegsImsram32kx64eMain0SlvFwRegion1EndAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_0_slv_fw_region_1_end_address_h :: FwRegsImsram32kx64eMain0SlvFwRegion1EndAddressHSpec > ;
#[doc = "The FW Region 1 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_0.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_0_slv_fw_region_1_end_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_2_control (rw) register accessor: The FW Region 2 Control Register defines the control fields for the slave Imsram32kx64e_main_0.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_0_slv_fw_region_2_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_0_slv_fw_region_2_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_0_slv_fw_region_2_control`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_2_control")]
pub type FwRegsImsram32kx64eMain0SlvFwRegion2Control = crate :: Reg < fw_regs_imsram32kx64e_main_0_slv_fw_region_2_control :: FwRegsImsram32kx64eMain0SlvFwRegion2ControlSpec > ;
#[doc = "The FW Region 2 Control Register defines the control fields for the slave Imsram32kx64e_main_0.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_0_slv_fw_region_2_control;
#[doc = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_2_permission_0 (rw) register accessor: The FW Region 2 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_0.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_0_slv_fw_region_2_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_0_slv_fw_region_2_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_0_slv_fw_region_2_permission_0`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_2_permission_0")]
pub type FwRegsImsram32kx64eMain0SlvFwRegion2Permission0 = crate :: Reg < fw_regs_imsram32kx64e_main_0_slv_fw_region_2_permission_0 :: FwRegsImsram32kx64eMain0SlvFwRegion2Permission0Spec > ;
#[doc = "The FW Region 2 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_0.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_0_slv_fw_region_2_permission_0;
#[doc = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_2_permission_1 (rw) register accessor: The FW Region 2 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_0.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_0_slv_fw_region_2_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_0_slv_fw_region_2_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_0_slv_fw_region_2_permission_1`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_2_permission_1")]
pub type FwRegsImsram32kx64eMain0SlvFwRegion2Permission1 = crate :: Reg < fw_regs_imsram32kx64e_main_0_slv_fw_region_2_permission_1 :: FwRegsImsram32kx64eMain0SlvFwRegion2Permission1Spec > ;
#[doc = "The FW Region 2 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_0.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_0_slv_fw_region_2_permission_1;
#[doc = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_2_permission_2 (rw) register accessor: The FW Region 2 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_0.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_0_slv_fw_region_2_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_0_slv_fw_region_2_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_0_slv_fw_region_2_permission_2`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_2_permission_2")]
pub type FwRegsImsram32kx64eMain0SlvFwRegion2Permission2 = crate :: Reg < fw_regs_imsram32kx64e_main_0_slv_fw_region_2_permission_2 :: FwRegsImsram32kx64eMain0SlvFwRegion2Permission2Spec > ;
#[doc = "The FW Region 2 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_0.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_0_slv_fw_region_2_permission_2;
#[doc = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_2_start_address_l (rw) register accessor: The FW Region 2 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_0.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_0_slv_fw_region_2_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_0_slv_fw_region_2_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_0_slv_fw_region_2_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_2_start_address_l")]
pub type FwRegsImsram32kx64eMain0SlvFwRegion2StartAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_0_slv_fw_region_2_start_address_l :: FwRegsImsram32kx64eMain0SlvFwRegion2StartAddressLSpec > ;
#[doc = "The FW Region 2 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_0.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_0_slv_fw_region_2_start_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_2_start_address_h (rw) register accessor: The FW Region 2 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_0.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_0_slv_fw_region_2_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_0_slv_fw_region_2_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_0_slv_fw_region_2_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_2_start_address_h")]
pub type FwRegsImsram32kx64eMain0SlvFwRegion2StartAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_0_slv_fw_region_2_start_address_h :: FwRegsImsram32kx64eMain0SlvFwRegion2StartAddressHSpec > ;
#[doc = "The FW Region 2 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_0.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_0_slv_fw_region_2_start_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_2_end_address_l (rw) register accessor: The FW Region 2 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_0.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_0_slv_fw_region_2_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_0_slv_fw_region_2_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_0_slv_fw_region_2_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_2_end_address_l")]
pub type FwRegsImsram32kx64eMain0SlvFwRegion2EndAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_0_slv_fw_region_2_end_address_l :: FwRegsImsram32kx64eMain0SlvFwRegion2EndAddressLSpec > ;
#[doc = "The FW Region 2 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_0.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_0_slv_fw_region_2_end_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_2_end_address_h (rw) register accessor: The FW Region 2 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_0.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_0_slv_fw_region_2_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_0_slv_fw_region_2_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_0_slv_fw_region_2_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_2_end_address_h")]
pub type FwRegsImsram32kx64eMain0SlvFwRegion2EndAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_0_slv_fw_region_2_end_address_h :: FwRegsImsram32kx64eMain0SlvFwRegion2EndAddressHSpec > ;
#[doc = "The FW Region 2 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_0.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_0_slv_fw_region_2_end_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_3_control (rw) register accessor: The FW Region 3 Control Register defines the control fields for the slave Imsram32kx64e_main_0.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_0_slv_fw_region_3_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_0_slv_fw_region_3_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_0_slv_fw_region_3_control`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_3_control")]
pub type FwRegsImsram32kx64eMain0SlvFwRegion3Control = crate :: Reg < fw_regs_imsram32kx64e_main_0_slv_fw_region_3_control :: FwRegsImsram32kx64eMain0SlvFwRegion3ControlSpec > ;
#[doc = "The FW Region 3 Control Register defines the control fields for the slave Imsram32kx64e_main_0.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_0_slv_fw_region_3_control;
#[doc = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_3_permission_0 (rw) register accessor: The FW Region 3 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_0.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_0_slv_fw_region_3_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_0_slv_fw_region_3_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_0_slv_fw_region_3_permission_0`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_3_permission_0")]
pub type FwRegsImsram32kx64eMain0SlvFwRegion3Permission0 = crate :: Reg < fw_regs_imsram32kx64e_main_0_slv_fw_region_3_permission_0 :: FwRegsImsram32kx64eMain0SlvFwRegion3Permission0Spec > ;
#[doc = "The FW Region 3 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_0.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_0_slv_fw_region_3_permission_0;
#[doc = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_3_permission_1 (rw) register accessor: The FW Region 3 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_0.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_0_slv_fw_region_3_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_0_slv_fw_region_3_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_0_slv_fw_region_3_permission_1`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_3_permission_1")]
pub type FwRegsImsram32kx64eMain0SlvFwRegion3Permission1 = crate :: Reg < fw_regs_imsram32kx64e_main_0_slv_fw_region_3_permission_1 :: FwRegsImsram32kx64eMain0SlvFwRegion3Permission1Spec > ;
#[doc = "The FW Region 3 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_0.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_0_slv_fw_region_3_permission_1;
#[doc = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_3_permission_2 (rw) register accessor: The FW Region 3 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_0.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_0_slv_fw_region_3_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_0_slv_fw_region_3_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_0_slv_fw_region_3_permission_2`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_3_permission_2")]
pub type FwRegsImsram32kx64eMain0SlvFwRegion3Permission2 = crate :: Reg < fw_regs_imsram32kx64e_main_0_slv_fw_region_3_permission_2 :: FwRegsImsram32kx64eMain0SlvFwRegion3Permission2Spec > ;
#[doc = "The FW Region 3 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_0.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_0_slv_fw_region_3_permission_2;
#[doc = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_3_start_address_l (rw) register accessor: The FW Region 3 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_0.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_0_slv_fw_region_3_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_0_slv_fw_region_3_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_0_slv_fw_region_3_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_3_start_address_l")]
pub type FwRegsImsram32kx64eMain0SlvFwRegion3StartAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_0_slv_fw_region_3_start_address_l :: FwRegsImsram32kx64eMain0SlvFwRegion3StartAddressLSpec > ;
#[doc = "The FW Region 3 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_0.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_0_slv_fw_region_3_start_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_3_start_address_h (rw) register accessor: The FW Region 3 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_0.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_0_slv_fw_region_3_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_0_slv_fw_region_3_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_0_slv_fw_region_3_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_3_start_address_h")]
pub type FwRegsImsram32kx64eMain0SlvFwRegion3StartAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_0_slv_fw_region_3_start_address_h :: FwRegsImsram32kx64eMain0SlvFwRegion3StartAddressHSpec > ;
#[doc = "The FW Region 3 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_0.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_0_slv_fw_region_3_start_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_3_end_address_l (rw) register accessor: The FW Region 3 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_0.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_0_slv_fw_region_3_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_0_slv_fw_region_3_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_0_slv_fw_region_3_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_3_end_address_l")]
pub type FwRegsImsram32kx64eMain0SlvFwRegion3EndAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_0_slv_fw_region_3_end_address_l :: FwRegsImsram32kx64eMain0SlvFwRegion3EndAddressLSpec > ;
#[doc = "The FW Region 3 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_0.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_0_slv_fw_region_3_end_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_3_end_address_h (rw) register accessor: The FW Region 3 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_0.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_0_slv_fw_region_3_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_0_slv_fw_region_3_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_0_slv_fw_region_3_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_0_slv_fw_region_3_end_address_h")]
pub type FwRegsImsram32kx64eMain0SlvFwRegion3EndAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_0_slv_fw_region_3_end_address_h :: FwRegsImsram32kx64eMain0SlvFwRegion3EndAddressHSpec > ;
#[doc = "The FW Region 3 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_0.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_0_slv_fw_region_3_end_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_0_control (rw) register accessor: The FW Region 0 Control Register defines the control fields for the slave Imsram32kx64e_main_1.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_1_slv_fw_region_0_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_1_slv_fw_region_0_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_1_slv_fw_region_0_control`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_0_control")]
pub type FwRegsImsram32kx64eMain1SlvFwRegion0Control = crate :: Reg < fw_regs_imsram32kx64e_main_1_slv_fw_region_0_control :: FwRegsImsram32kx64eMain1SlvFwRegion0ControlSpec > ;
#[doc = "The FW Region 0 Control Register defines the control fields for the slave Imsram32kx64e_main_1.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_1_slv_fw_region_0_control;
#[doc = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_0_permission_0 (rw) register accessor: The FW Region 0 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_1.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_1_slv_fw_region_0_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_1_slv_fw_region_0_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_1_slv_fw_region_0_permission_0`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_0_permission_0")]
pub type FwRegsImsram32kx64eMain1SlvFwRegion0Permission0 = crate :: Reg < fw_regs_imsram32kx64e_main_1_slv_fw_region_0_permission_0 :: FwRegsImsram32kx64eMain1SlvFwRegion0Permission0Spec > ;
#[doc = "The FW Region 0 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_1.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_1_slv_fw_region_0_permission_0;
#[doc = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_0_permission_1 (rw) register accessor: The FW Region 0 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_1.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_1_slv_fw_region_0_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_1_slv_fw_region_0_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_1_slv_fw_region_0_permission_1`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_0_permission_1")]
pub type FwRegsImsram32kx64eMain1SlvFwRegion0Permission1 = crate :: Reg < fw_regs_imsram32kx64e_main_1_slv_fw_region_0_permission_1 :: FwRegsImsram32kx64eMain1SlvFwRegion0Permission1Spec > ;
#[doc = "The FW Region 0 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_1.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_1_slv_fw_region_0_permission_1;
#[doc = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_0_permission_2 (rw) register accessor: The FW Region 0 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_1.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_1_slv_fw_region_0_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_1_slv_fw_region_0_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_1_slv_fw_region_0_permission_2`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_0_permission_2")]
pub type FwRegsImsram32kx64eMain1SlvFwRegion0Permission2 = crate :: Reg < fw_regs_imsram32kx64e_main_1_slv_fw_region_0_permission_2 :: FwRegsImsram32kx64eMain1SlvFwRegion0Permission2Spec > ;
#[doc = "The FW Region 0 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_1.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_1_slv_fw_region_0_permission_2;
#[doc = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_0_start_address_l (rw) register accessor: The FW Region 0 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_1.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_1_slv_fw_region_0_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_1_slv_fw_region_0_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_1_slv_fw_region_0_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_0_start_address_l")]
pub type FwRegsImsram32kx64eMain1SlvFwRegion0StartAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_1_slv_fw_region_0_start_address_l :: FwRegsImsram32kx64eMain1SlvFwRegion0StartAddressLSpec > ;
#[doc = "The FW Region 0 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_1.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_1_slv_fw_region_0_start_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_0_start_address_h (rw) register accessor: The FW Region 0 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_1.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_1_slv_fw_region_0_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_1_slv_fw_region_0_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_1_slv_fw_region_0_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_0_start_address_h")]
pub type FwRegsImsram32kx64eMain1SlvFwRegion0StartAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_1_slv_fw_region_0_start_address_h :: FwRegsImsram32kx64eMain1SlvFwRegion0StartAddressHSpec > ;
#[doc = "The FW Region 0 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_1.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_1_slv_fw_region_0_start_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_0_end_address_l (rw) register accessor: The FW Region 0 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_1.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_1_slv_fw_region_0_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_1_slv_fw_region_0_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_1_slv_fw_region_0_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_0_end_address_l")]
pub type FwRegsImsram32kx64eMain1SlvFwRegion0EndAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_1_slv_fw_region_0_end_address_l :: FwRegsImsram32kx64eMain1SlvFwRegion0EndAddressLSpec > ;
#[doc = "The FW Region 0 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_1.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_1_slv_fw_region_0_end_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_0_end_address_h (rw) register accessor: The FW Region 0 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_1.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_1_slv_fw_region_0_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_1_slv_fw_region_0_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_1_slv_fw_region_0_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_0_end_address_h")]
pub type FwRegsImsram32kx64eMain1SlvFwRegion0EndAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_1_slv_fw_region_0_end_address_h :: FwRegsImsram32kx64eMain1SlvFwRegion0EndAddressHSpec > ;
#[doc = "The FW Region 0 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_1.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_1_slv_fw_region_0_end_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_1_control (rw) register accessor: The FW Region 1 Control Register defines the control fields for the slave Imsram32kx64e_main_1.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_1_slv_fw_region_1_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_1_slv_fw_region_1_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_1_slv_fw_region_1_control`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_1_control")]
pub type FwRegsImsram32kx64eMain1SlvFwRegion1Control = crate :: Reg < fw_regs_imsram32kx64e_main_1_slv_fw_region_1_control :: FwRegsImsram32kx64eMain1SlvFwRegion1ControlSpec > ;
#[doc = "The FW Region 1 Control Register defines the control fields for the slave Imsram32kx64e_main_1.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_1_slv_fw_region_1_control;
#[doc = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_1_permission_0 (rw) register accessor: The FW Region 1 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_1.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_1_slv_fw_region_1_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_1_slv_fw_region_1_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_1_slv_fw_region_1_permission_0`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_1_permission_0")]
pub type FwRegsImsram32kx64eMain1SlvFwRegion1Permission0 = crate :: Reg < fw_regs_imsram32kx64e_main_1_slv_fw_region_1_permission_0 :: FwRegsImsram32kx64eMain1SlvFwRegion1Permission0Spec > ;
#[doc = "The FW Region 1 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_1.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_1_slv_fw_region_1_permission_0;
#[doc = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_1_permission_1 (rw) register accessor: The FW Region 1 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_1.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_1_slv_fw_region_1_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_1_slv_fw_region_1_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_1_slv_fw_region_1_permission_1`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_1_permission_1")]
pub type FwRegsImsram32kx64eMain1SlvFwRegion1Permission1 = crate :: Reg < fw_regs_imsram32kx64e_main_1_slv_fw_region_1_permission_1 :: FwRegsImsram32kx64eMain1SlvFwRegion1Permission1Spec > ;
#[doc = "The FW Region 1 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_1.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_1_slv_fw_region_1_permission_1;
#[doc = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_1_permission_2 (rw) register accessor: The FW Region 1 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_1.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_1_slv_fw_region_1_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_1_slv_fw_region_1_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_1_slv_fw_region_1_permission_2`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_1_permission_2")]
pub type FwRegsImsram32kx64eMain1SlvFwRegion1Permission2 = crate :: Reg < fw_regs_imsram32kx64e_main_1_slv_fw_region_1_permission_2 :: FwRegsImsram32kx64eMain1SlvFwRegion1Permission2Spec > ;
#[doc = "The FW Region 1 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_1.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_1_slv_fw_region_1_permission_2;
#[doc = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_1_start_address_l (rw) register accessor: The FW Region 1 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_1.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_1_slv_fw_region_1_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_1_slv_fw_region_1_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_1_slv_fw_region_1_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_1_start_address_l")]
pub type FwRegsImsram32kx64eMain1SlvFwRegion1StartAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_1_slv_fw_region_1_start_address_l :: FwRegsImsram32kx64eMain1SlvFwRegion1StartAddressLSpec > ;
#[doc = "The FW Region 1 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_1.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_1_slv_fw_region_1_start_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_1_start_address_h (rw) register accessor: The FW Region 1 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_1.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_1_slv_fw_region_1_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_1_slv_fw_region_1_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_1_slv_fw_region_1_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_1_start_address_h")]
pub type FwRegsImsram32kx64eMain1SlvFwRegion1StartAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_1_slv_fw_region_1_start_address_h :: FwRegsImsram32kx64eMain1SlvFwRegion1StartAddressHSpec > ;
#[doc = "The FW Region 1 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_1.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_1_slv_fw_region_1_start_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_1_end_address_l (rw) register accessor: The FW Region 1 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_1.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_1_slv_fw_region_1_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_1_slv_fw_region_1_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_1_slv_fw_region_1_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_1_end_address_l")]
pub type FwRegsImsram32kx64eMain1SlvFwRegion1EndAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_1_slv_fw_region_1_end_address_l :: FwRegsImsram32kx64eMain1SlvFwRegion1EndAddressLSpec > ;
#[doc = "The FW Region 1 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_1.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_1_slv_fw_region_1_end_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_1_end_address_h (rw) register accessor: The FW Region 1 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_1.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_1_slv_fw_region_1_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_1_slv_fw_region_1_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_1_slv_fw_region_1_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_1_end_address_h")]
pub type FwRegsImsram32kx64eMain1SlvFwRegion1EndAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_1_slv_fw_region_1_end_address_h :: FwRegsImsram32kx64eMain1SlvFwRegion1EndAddressHSpec > ;
#[doc = "The FW Region 1 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_1.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_1_slv_fw_region_1_end_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_2_control (rw) register accessor: The FW Region 2 Control Register defines the control fields for the slave Imsram32kx64e_main_1.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_1_slv_fw_region_2_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_1_slv_fw_region_2_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_1_slv_fw_region_2_control`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_2_control")]
pub type FwRegsImsram32kx64eMain1SlvFwRegion2Control = crate :: Reg < fw_regs_imsram32kx64e_main_1_slv_fw_region_2_control :: FwRegsImsram32kx64eMain1SlvFwRegion2ControlSpec > ;
#[doc = "The FW Region 2 Control Register defines the control fields for the slave Imsram32kx64e_main_1.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_1_slv_fw_region_2_control;
#[doc = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_2_permission_0 (rw) register accessor: The FW Region 2 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_1.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_1_slv_fw_region_2_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_1_slv_fw_region_2_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_1_slv_fw_region_2_permission_0`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_2_permission_0")]
pub type FwRegsImsram32kx64eMain1SlvFwRegion2Permission0 = crate :: Reg < fw_regs_imsram32kx64e_main_1_slv_fw_region_2_permission_0 :: FwRegsImsram32kx64eMain1SlvFwRegion2Permission0Spec > ;
#[doc = "The FW Region 2 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_1.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_1_slv_fw_region_2_permission_0;
#[doc = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_2_permission_1 (rw) register accessor: The FW Region 2 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_1.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_1_slv_fw_region_2_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_1_slv_fw_region_2_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_1_slv_fw_region_2_permission_1`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_2_permission_1")]
pub type FwRegsImsram32kx64eMain1SlvFwRegion2Permission1 = crate :: Reg < fw_regs_imsram32kx64e_main_1_slv_fw_region_2_permission_1 :: FwRegsImsram32kx64eMain1SlvFwRegion2Permission1Spec > ;
#[doc = "The FW Region 2 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_1.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_1_slv_fw_region_2_permission_1;
#[doc = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_2_permission_2 (rw) register accessor: The FW Region 2 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_1.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_1_slv_fw_region_2_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_1_slv_fw_region_2_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_1_slv_fw_region_2_permission_2`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_2_permission_2")]
pub type FwRegsImsram32kx64eMain1SlvFwRegion2Permission2 = crate :: Reg < fw_regs_imsram32kx64e_main_1_slv_fw_region_2_permission_2 :: FwRegsImsram32kx64eMain1SlvFwRegion2Permission2Spec > ;
#[doc = "The FW Region 2 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_1.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_1_slv_fw_region_2_permission_2;
#[doc = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_2_start_address_l (rw) register accessor: The FW Region 2 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_1.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_1_slv_fw_region_2_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_1_slv_fw_region_2_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_1_slv_fw_region_2_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_2_start_address_l")]
pub type FwRegsImsram32kx64eMain1SlvFwRegion2StartAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_1_slv_fw_region_2_start_address_l :: FwRegsImsram32kx64eMain1SlvFwRegion2StartAddressLSpec > ;
#[doc = "The FW Region 2 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_1.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_1_slv_fw_region_2_start_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_2_start_address_h (rw) register accessor: The FW Region 2 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_1.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_1_slv_fw_region_2_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_1_slv_fw_region_2_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_1_slv_fw_region_2_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_2_start_address_h")]
pub type FwRegsImsram32kx64eMain1SlvFwRegion2StartAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_1_slv_fw_region_2_start_address_h :: FwRegsImsram32kx64eMain1SlvFwRegion2StartAddressHSpec > ;
#[doc = "The FW Region 2 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_1.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_1_slv_fw_region_2_start_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_2_end_address_l (rw) register accessor: The FW Region 2 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_1.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_1_slv_fw_region_2_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_1_slv_fw_region_2_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_1_slv_fw_region_2_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_2_end_address_l")]
pub type FwRegsImsram32kx64eMain1SlvFwRegion2EndAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_1_slv_fw_region_2_end_address_l :: FwRegsImsram32kx64eMain1SlvFwRegion2EndAddressLSpec > ;
#[doc = "The FW Region 2 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_1.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_1_slv_fw_region_2_end_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_2_end_address_h (rw) register accessor: The FW Region 2 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_1.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_1_slv_fw_region_2_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_1_slv_fw_region_2_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_1_slv_fw_region_2_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_2_end_address_h")]
pub type FwRegsImsram32kx64eMain1SlvFwRegion2EndAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_1_slv_fw_region_2_end_address_h :: FwRegsImsram32kx64eMain1SlvFwRegion2EndAddressHSpec > ;
#[doc = "The FW Region 2 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_1.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_1_slv_fw_region_2_end_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_3_control (rw) register accessor: The FW Region 3 Control Register defines the control fields for the slave Imsram32kx64e_main_1.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_1_slv_fw_region_3_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_1_slv_fw_region_3_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_1_slv_fw_region_3_control`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_3_control")]
pub type FwRegsImsram32kx64eMain1SlvFwRegion3Control = crate :: Reg < fw_regs_imsram32kx64e_main_1_slv_fw_region_3_control :: FwRegsImsram32kx64eMain1SlvFwRegion3ControlSpec > ;
#[doc = "The FW Region 3 Control Register defines the control fields for the slave Imsram32kx64e_main_1.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_1_slv_fw_region_3_control;
#[doc = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_3_permission_0 (rw) register accessor: The FW Region 3 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_1.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_1_slv_fw_region_3_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_1_slv_fw_region_3_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_1_slv_fw_region_3_permission_0`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_3_permission_0")]
pub type FwRegsImsram32kx64eMain1SlvFwRegion3Permission0 = crate :: Reg < fw_regs_imsram32kx64e_main_1_slv_fw_region_3_permission_0 :: FwRegsImsram32kx64eMain1SlvFwRegion3Permission0Spec > ;
#[doc = "The FW Region 3 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_1.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_1_slv_fw_region_3_permission_0;
#[doc = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_3_permission_1 (rw) register accessor: The FW Region 3 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_1.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_1_slv_fw_region_3_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_1_slv_fw_region_3_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_1_slv_fw_region_3_permission_1`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_3_permission_1")]
pub type FwRegsImsram32kx64eMain1SlvFwRegion3Permission1 = crate :: Reg < fw_regs_imsram32kx64e_main_1_slv_fw_region_3_permission_1 :: FwRegsImsram32kx64eMain1SlvFwRegion3Permission1Spec > ;
#[doc = "The FW Region 3 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_1.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_1_slv_fw_region_3_permission_1;
#[doc = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_3_permission_2 (rw) register accessor: The FW Region 3 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_1.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_1_slv_fw_region_3_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_1_slv_fw_region_3_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_1_slv_fw_region_3_permission_2`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_3_permission_2")]
pub type FwRegsImsram32kx64eMain1SlvFwRegion3Permission2 = crate :: Reg < fw_regs_imsram32kx64e_main_1_slv_fw_region_3_permission_2 :: FwRegsImsram32kx64eMain1SlvFwRegion3Permission2Spec > ;
#[doc = "The FW Region 3 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_1.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_1_slv_fw_region_3_permission_2;
#[doc = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_3_start_address_l (rw) register accessor: The FW Region 3 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_1.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_1_slv_fw_region_3_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_1_slv_fw_region_3_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_1_slv_fw_region_3_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_3_start_address_l")]
pub type FwRegsImsram32kx64eMain1SlvFwRegion3StartAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_1_slv_fw_region_3_start_address_l :: FwRegsImsram32kx64eMain1SlvFwRegion3StartAddressLSpec > ;
#[doc = "The FW Region 3 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_1.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_1_slv_fw_region_3_start_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_3_start_address_h (rw) register accessor: The FW Region 3 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_1.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_1_slv_fw_region_3_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_1_slv_fw_region_3_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_1_slv_fw_region_3_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_3_start_address_h")]
pub type FwRegsImsram32kx64eMain1SlvFwRegion3StartAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_1_slv_fw_region_3_start_address_h :: FwRegsImsram32kx64eMain1SlvFwRegion3StartAddressHSpec > ;
#[doc = "The FW Region 3 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_1.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_1_slv_fw_region_3_start_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_3_end_address_l (rw) register accessor: The FW Region 3 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_1.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_1_slv_fw_region_3_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_1_slv_fw_region_3_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_1_slv_fw_region_3_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_3_end_address_l")]
pub type FwRegsImsram32kx64eMain1SlvFwRegion3EndAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_1_slv_fw_region_3_end_address_l :: FwRegsImsram32kx64eMain1SlvFwRegion3EndAddressLSpec > ;
#[doc = "The FW Region 3 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_1.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_1_slv_fw_region_3_end_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_3_end_address_h (rw) register accessor: The FW Region 3 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_1.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_1_slv_fw_region_3_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_1_slv_fw_region_3_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_1_slv_fw_region_3_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_1_slv_fw_region_3_end_address_h")]
pub type FwRegsImsram32kx64eMain1SlvFwRegion3EndAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_1_slv_fw_region_3_end_address_h :: FwRegsImsram32kx64eMain1SlvFwRegion3EndAddressHSpec > ;
#[doc = "The FW Region 3 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_1.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_1_slv_fw_region_3_end_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_0_control (rw) register accessor: The FW Region 0 Control Register defines the control fields for the slave Imsram32kx64e_main_2.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_2_slv_fw_region_0_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_2_slv_fw_region_0_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_2_slv_fw_region_0_control`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_0_control")]
pub type FwRegsImsram32kx64eMain2SlvFwRegion0Control = crate :: Reg < fw_regs_imsram32kx64e_main_2_slv_fw_region_0_control :: FwRegsImsram32kx64eMain2SlvFwRegion0ControlSpec > ;
#[doc = "The FW Region 0 Control Register defines the control fields for the slave Imsram32kx64e_main_2.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_2_slv_fw_region_0_control;
#[doc = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_0_permission_0 (rw) register accessor: The FW Region 0 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_2.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_2_slv_fw_region_0_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_2_slv_fw_region_0_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_2_slv_fw_region_0_permission_0`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_0_permission_0")]
pub type FwRegsImsram32kx64eMain2SlvFwRegion0Permission0 = crate :: Reg < fw_regs_imsram32kx64e_main_2_slv_fw_region_0_permission_0 :: FwRegsImsram32kx64eMain2SlvFwRegion0Permission0Spec > ;
#[doc = "The FW Region 0 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_2.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_2_slv_fw_region_0_permission_0;
#[doc = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_0_permission_1 (rw) register accessor: The FW Region 0 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_2.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_2_slv_fw_region_0_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_2_slv_fw_region_0_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_2_slv_fw_region_0_permission_1`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_0_permission_1")]
pub type FwRegsImsram32kx64eMain2SlvFwRegion0Permission1 = crate :: Reg < fw_regs_imsram32kx64e_main_2_slv_fw_region_0_permission_1 :: FwRegsImsram32kx64eMain2SlvFwRegion0Permission1Spec > ;
#[doc = "The FW Region 0 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_2.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_2_slv_fw_region_0_permission_1;
#[doc = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_0_permission_2 (rw) register accessor: The FW Region 0 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_2.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_2_slv_fw_region_0_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_2_slv_fw_region_0_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_2_slv_fw_region_0_permission_2`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_0_permission_2")]
pub type FwRegsImsram32kx64eMain2SlvFwRegion0Permission2 = crate :: Reg < fw_regs_imsram32kx64e_main_2_slv_fw_region_0_permission_2 :: FwRegsImsram32kx64eMain2SlvFwRegion0Permission2Spec > ;
#[doc = "The FW Region 0 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_2.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_2_slv_fw_region_0_permission_2;
#[doc = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_0_start_address_l (rw) register accessor: The FW Region 0 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_2.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_2_slv_fw_region_0_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_2_slv_fw_region_0_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_2_slv_fw_region_0_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_0_start_address_l")]
pub type FwRegsImsram32kx64eMain2SlvFwRegion0StartAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_2_slv_fw_region_0_start_address_l :: FwRegsImsram32kx64eMain2SlvFwRegion0StartAddressLSpec > ;
#[doc = "The FW Region 0 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_2.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_2_slv_fw_region_0_start_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_0_start_address_h (rw) register accessor: The FW Region 0 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_2.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_2_slv_fw_region_0_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_2_slv_fw_region_0_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_2_slv_fw_region_0_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_0_start_address_h")]
pub type FwRegsImsram32kx64eMain2SlvFwRegion0StartAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_2_slv_fw_region_0_start_address_h :: FwRegsImsram32kx64eMain2SlvFwRegion0StartAddressHSpec > ;
#[doc = "The FW Region 0 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_2.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_2_slv_fw_region_0_start_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_0_end_address_l (rw) register accessor: The FW Region 0 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_2.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_2_slv_fw_region_0_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_2_slv_fw_region_0_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_2_slv_fw_region_0_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_0_end_address_l")]
pub type FwRegsImsram32kx64eMain2SlvFwRegion0EndAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_2_slv_fw_region_0_end_address_l :: FwRegsImsram32kx64eMain2SlvFwRegion0EndAddressLSpec > ;
#[doc = "The FW Region 0 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_2.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_2_slv_fw_region_0_end_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_0_end_address_h (rw) register accessor: The FW Region 0 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_2.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_2_slv_fw_region_0_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_2_slv_fw_region_0_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_2_slv_fw_region_0_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_0_end_address_h")]
pub type FwRegsImsram32kx64eMain2SlvFwRegion0EndAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_2_slv_fw_region_0_end_address_h :: FwRegsImsram32kx64eMain2SlvFwRegion0EndAddressHSpec > ;
#[doc = "The FW Region 0 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_2.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_2_slv_fw_region_0_end_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_1_control (rw) register accessor: The FW Region 1 Control Register defines the control fields for the slave Imsram32kx64e_main_2.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_2_slv_fw_region_1_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_2_slv_fw_region_1_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_2_slv_fw_region_1_control`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_1_control")]
pub type FwRegsImsram32kx64eMain2SlvFwRegion1Control = crate :: Reg < fw_regs_imsram32kx64e_main_2_slv_fw_region_1_control :: FwRegsImsram32kx64eMain2SlvFwRegion1ControlSpec > ;
#[doc = "The FW Region 1 Control Register defines the control fields for the slave Imsram32kx64e_main_2.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_2_slv_fw_region_1_control;
#[doc = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_1_permission_0 (rw) register accessor: The FW Region 1 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_2.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_2_slv_fw_region_1_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_2_slv_fw_region_1_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_2_slv_fw_region_1_permission_0`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_1_permission_0")]
pub type FwRegsImsram32kx64eMain2SlvFwRegion1Permission0 = crate :: Reg < fw_regs_imsram32kx64e_main_2_slv_fw_region_1_permission_0 :: FwRegsImsram32kx64eMain2SlvFwRegion1Permission0Spec > ;
#[doc = "The FW Region 1 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_2.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_2_slv_fw_region_1_permission_0;
#[doc = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_1_permission_1 (rw) register accessor: The FW Region 1 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_2.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_2_slv_fw_region_1_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_2_slv_fw_region_1_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_2_slv_fw_region_1_permission_1`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_1_permission_1")]
pub type FwRegsImsram32kx64eMain2SlvFwRegion1Permission1 = crate :: Reg < fw_regs_imsram32kx64e_main_2_slv_fw_region_1_permission_1 :: FwRegsImsram32kx64eMain2SlvFwRegion1Permission1Spec > ;
#[doc = "The FW Region 1 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_2.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_2_slv_fw_region_1_permission_1;
#[doc = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_1_permission_2 (rw) register accessor: The FW Region 1 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_2.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_2_slv_fw_region_1_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_2_slv_fw_region_1_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_2_slv_fw_region_1_permission_2`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_1_permission_2")]
pub type FwRegsImsram32kx64eMain2SlvFwRegion1Permission2 = crate :: Reg < fw_regs_imsram32kx64e_main_2_slv_fw_region_1_permission_2 :: FwRegsImsram32kx64eMain2SlvFwRegion1Permission2Spec > ;
#[doc = "The FW Region 1 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_2.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_2_slv_fw_region_1_permission_2;
#[doc = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_1_start_address_l (rw) register accessor: The FW Region 1 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_2.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_2_slv_fw_region_1_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_2_slv_fw_region_1_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_2_slv_fw_region_1_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_1_start_address_l")]
pub type FwRegsImsram32kx64eMain2SlvFwRegion1StartAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_2_slv_fw_region_1_start_address_l :: FwRegsImsram32kx64eMain2SlvFwRegion1StartAddressLSpec > ;
#[doc = "The FW Region 1 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_2.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_2_slv_fw_region_1_start_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_1_start_address_h (rw) register accessor: The FW Region 1 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_2.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_2_slv_fw_region_1_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_2_slv_fw_region_1_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_2_slv_fw_region_1_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_1_start_address_h")]
pub type FwRegsImsram32kx64eMain2SlvFwRegion1StartAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_2_slv_fw_region_1_start_address_h :: FwRegsImsram32kx64eMain2SlvFwRegion1StartAddressHSpec > ;
#[doc = "The FW Region 1 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_2.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_2_slv_fw_region_1_start_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_1_end_address_l (rw) register accessor: The FW Region 1 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_2.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_2_slv_fw_region_1_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_2_slv_fw_region_1_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_2_slv_fw_region_1_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_1_end_address_l")]
pub type FwRegsImsram32kx64eMain2SlvFwRegion1EndAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_2_slv_fw_region_1_end_address_l :: FwRegsImsram32kx64eMain2SlvFwRegion1EndAddressLSpec > ;
#[doc = "The FW Region 1 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_2.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_2_slv_fw_region_1_end_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_1_end_address_h (rw) register accessor: The FW Region 1 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_2.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_2_slv_fw_region_1_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_2_slv_fw_region_1_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_2_slv_fw_region_1_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_1_end_address_h")]
pub type FwRegsImsram32kx64eMain2SlvFwRegion1EndAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_2_slv_fw_region_1_end_address_h :: FwRegsImsram32kx64eMain2SlvFwRegion1EndAddressHSpec > ;
#[doc = "The FW Region 1 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_2.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_2_slv_fw_region_1_end_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_2_control (rw) register accessor: The FW Region 2 Control Register defines the control fields for the slave Imsram32kx64e_main_2.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_2_slv_fw_region_2_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_2_slv_fw_region_2_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_2_slv_fw_region_2_control`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_2_control")]
pub type FwRegsImsram32kx64eMain2SlvFwRegion2Control = crate :: Reg < fw_regs_imsram32kx64e_main_2_slv_fw_region_2_control :: FwRegsImsram32kx64eMain2SlvFwRegion2ControlSpec > ;
#[doc = "The FW Region 2 Control Register defines the control fields for the slave Imsram32kx64e_main_2.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_2_slv_fw_region_2_control;
#[doc = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_2_permission_0 (rw) register accessor: The FW Region 2 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_2.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_2_slv_fw_region_2_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_2_slv_fw_region_2_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_2_slv_fw_region_2_permission_0`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_2_permission_0")]
pub type FwRegsImsram32kx64eMain2SlvFwRegion2Permission0 = crate :: Reg < fw_regs_imsram32kx64e_main_2_slv_fw_region_2_permission_0 :: FwRegsImsram32kx64eMain2SlvFwRegion2Permission0Spec > ;
#[doc = "The FW Region 2 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_2.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_2_slv_fw_region_2_permission_0;
#[doc = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_2_permission_1 (rw) register accessor: The FW Region 2 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_2.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_2_slv_fw_region_2_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_2_slv_fw_region_2_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_2_slv_fw_region_2_permission_1`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_2_permission_1")]
pub type FwRegsImsram32kx64eMain2SlvFwRegion2Permission1 = crate :: Reg < fw_regs_imsram32kx64e_main_2_slv_fw_region_2_permission_1 :: FwRegsImsram32kx64eMain2SlvFwRegion2Permission1Spec > ;
#[doc = "The FW Region 2 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_2.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_2_slv_fw_region_2_permission_1;
#[doc = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_2_permission_2 (rw) register accessor: The FW Region 2 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_2.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_2_slv_fw_region_2_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_2_slv_fw_region_2_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_2_slv_fw_region_2_permission_2`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_2_permission_2")]
pub type FwRegsImsram32kx64eMain2SlvFwRegion2Permission2 = crate :: Reg < fw_regs_imsram32kx64e_main_2_slv_fw_region_2_permission_2 :: FwRegsImsram32kx64eMain2SlvFwRegion2Permission2Spec > ;
#[doc = "The FW Region 2 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_2.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_2_slv_fw_region_2_permission_2;
#[doc = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_2_start_address_l (rw) register accessor: The FW Region 2 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_2.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_2_slv_fw_region_2_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_2_slv_fw_region_2_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_2_slv_fw_region_2_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_2_start_address_l")]
pub type FwRegsImsram32kx64eMain2SlvFwRegion2StartAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_2_slv_fw_region_2_start_address_l :: FwRegsImsram32kx64eMain2SlvFwRegion2StartAddressLSpec > ;
#[doc = "The FW Region 2 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_2.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_2_slv_fw_region_2_start_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_2_start_address_h (rw) register accessor: The FW Region 2 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_2.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_2_slv_fw_region_2_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_2_slv_fw_region_2_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_2_slv_fw_region_2_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_2_start_address_h")]
pub type FwRegsImsram32kx64eMain2SlvFwRegion2StartAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_2_slv_fw_region_2_start_address_h :: FwRegsImsram32kx64eMain2SlvFwRegion2StartAddressHSpec > ;
#[doc = "The FW Region 2 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_2.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_2_slv_fw_region_2_start_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_2_end_address_l (rw) register accessor: The FW Region 2 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_2.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_2_slv_fw_region_2_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_2_slv_fw_region_2_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_2_slv_fw_region_2_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_2_end_address_l")]
pub type FwRegsImsram32kx64eMain2SlvFwRegion2EndAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_2_slv_fw_region_2_end_address_l :: FwRegsImsram32kx64eMain2SlvFwRegion2EndAddressLSpec > ;
#[doc = "The FW Region 2 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_2.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_2_slv_fw_region_2_end_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_2_end_address_h (rw) register accessor: The FW Region 2 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_2.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_2_slv_fw_region_2_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_2_slv_fw_region_2_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_2_slv_fw_region_2_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_2_end_address_h")]
pub type FwRegsImsram32kx64eMain2SlvFwRegion2EndAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_2_slv_fw_region_2_end_address_h :: FwRegsImsram32kx64eMain2SlvFwRegion2EndAddressHSpec > ;
#[doc = "The FW Region 2 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_2.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_2_slv_fw_region_2_end_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_3_control (rw) register accessor: The FW Region 3 Control Register defines the control fields for the slave Imsram32kx64e_main_2.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_2_slv_fw_region_3_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_2_slv_fw_region_3_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_2_slv_fw_region_3_control`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_3_control")]
pub type FwRegsImsram32kx64eMain2SlvFwRegion3Control = crate :: Reg < fw_regs_imsram32kx64e_main_2_slv_fw_region_3_control :: FwRegsImsram32kx64eMain2SlvFwRegion3ControlSpec > ;
#[doc = "The FW Region 3 Control Register defines the control fields for the slave Imsram32kx64e_main_2.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_2_slv_fw_region_3_control;
#[doc = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_3_permission_0 (rw) register accessor: The FW Region 3 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_2.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_2_slv_fw_region_3_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_2_slv_fw_region_3_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_2_slv_fw_region_3_permission_0`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_3_permission_0")]
pub type FwRegsImsram32kx64eMain2SlvFwRegion3Permission0 = crate :: Reg < fw_regs_imsram32kx64e_main_2_slv_fw_region_3_permission_0 :: FwRegsImsram32kx64eMain2SlvFwRegion3Permission0Spec > ;
#[doc = "The FW Region 3 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_2.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_2_slv_fw_region_3_permission_0;
#[doc = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_3_permission_1 (rw) register accessor: The FW Region 3 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_2.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_2_slv_fw_region_3_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_2_slv_fw_region_3_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_2_slv_fw_region_3_permission_1`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_3_permission_1")]
pub type FwRegsImsram32kx64eMain2SlvFwRegion3Permission1 = crate :: Reg < fw_regs_imsram32kx64e_main_2_slv_fw_region_3_permission_1 :: FwRegsImsram32kx64eMain2SlvFwRegion3Permission1Spec > ;
#[doc = "The FW Region 3 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_2.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_2_slv_fw_region_3_permission_1;
#[doc = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_3_permission_2 (rw) register accessor: The FW Region 3 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_2.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_2_slv_fw_region_3_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_2_slv_fw_region_3_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_2_slv_fw_region_3_permission_2`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_3_permission_2")]
pub type FwRegsImsram32kx64eMain2SlvFwRegion3Permission2 = crate :: Reg < fw_regs_imsram32kx64e_main_2_slv_fw_region_3_permission_2 :: FwRegsImsram32kx64eMain2SlvFwRegion3Permission2Spec > ;
#[doc = "The FW Region 3 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_2.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_2_slv_fw_region_3_permission_2;
#[doc = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_3_start_address_l (rw) register accessor: The FW Region 3 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_2.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_2_slv_fw_region_3_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_2_slv_fw_region_3_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_2_slv_fw_region_3_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_3_start_address_l")]
pub type FwRegsImsram32kx64eMain2SlvFwRegion3StartAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_2_slv_fw_region_3_start_address_l :: FwRegsImsram32kx64eMain2SlvFwRegion3StartAddressLSpec > ;
#[doc = "The FW Region 3 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_2.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_2_slv_fw_region_3_start_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_3_start_address_h (rw) register accessor: The FW Region 3 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_2.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_2_slv_fw_region_3_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_2_slv_fw_region_3_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_2_slv_fw_region_3_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_3_start_address_h")]
pub type FwRegsImsram32kx64eMain2SlvFwRegion3StartAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_2_slv_fw_region_3_start_address_h :: FwRegsImsram32kx64eMain2SlvFwRegion3StartAddressHSpec > ;
#[doc = "The FW Region 3 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_2.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_2_slv_fw_region_3_start_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_3_end_address_l (rw) register accessor: The FW Region 3 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_2.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_2_slv_fw_region_3_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_2_slv_fw_region_3_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_2_slv_fw_region_3_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_3_end_address_l")]
pub type FwRegsImsram32kx64eMain2SlvFwRegion3EndAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_2_slv_fw_region_3_end_address_l :: FwRegsImsram32kx64eMain2SlvFwRegion3EndAddressLSpec > ;
#[doc = "The FW Region 3 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_2.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_2_slv_fw_region_3_end_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_3_end_address_h (rw) register accessor: The FW Region 3 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_2.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_2_slv_fw_region_3_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_2_slv_fw_region_3_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_2_slv_fw_region_3_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_2_slv_fw_region_3_end_address_h")]
pub type FwRegsImsram32kx64eMain2SlvFwRegion3EndAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_2_slv_fw_region_3_end_address_h :: FwRegsImsram32kx64eMain2SlvFwRegion3EndAddressHSpec > ;
#[doc = "The FW Region 3 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_2.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_2_slv_fw_region_3_end_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_0_control (rw) register accessor: The FW Region 0 Control Register defines the control fields for the slave Imsram32kx64e_main_5.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_5_slv_fw_region_0_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_5_slv_fw_region_0_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_5_slv_fw_region_0_control`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_0_control")]
pub type FwRegsImsram32kx64eMain5SlvFwRegion0Control = crate :: Reg < fw_regs_imsram32kx64e_main_5_slv_fw_region_0_control :: FwRegsImsram32kx64eMain5SlvFwRegion0ControlSpec > ;
#[doc = "The FW Region 0 Control Register defines the control fields for the slave Imsram32kx64e_main_5.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_5_slv_fw_region_0_control;
#[doc = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_0_permission_0 (rw) register accessor: The FW Region 0 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_5.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_5_slv_fw_region_0_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_5_slv_fw_region_0_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_5_slv_fw_region_0_permission_0`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_0_permission_0")]
pub type FwRegsImsram32kx64eMain5SlvFwRegion0Permission0 = crate :: Reg < fw_regs_imsram32kx64e_main_5_slv_fw_region_0_permission_0 :: FwRegsImsram32kx64eMain5SlvFwRegion0Permission0Spec > ;
#[doc = "The FW Region 0 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_5.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_5_slv_fw_region_0_permission_0;
#[doc = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_0_permission_1 (rw) register accessor: The FW Region 0 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_5.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_5_slv_fw_region_0_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_5_slv_fw_region_0_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_5_slv_fw_region_0_permission_1`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_0_permission_1")]
pub type FwRegsImsram32kx64eMain5SlvFwRegion0Permission1 = crate :: Reg < fw_regs_imsram32kx64e_main_5_slv_fw_region_0_permission_1 :: FwRegsImsram32kx64eMain5SlvFwRegion0Permission1Spec > ;
#[doc = "The FW Region 0 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_5.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_5_slv_fw_region_0_permission_1;
#[doc = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_0_permission_2 (rw) register accessor: The FW Region 0 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_5.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_5_slv_fw_region_0_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_5_slv_fw_region_0_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_5_slv_fw_region_0_permission_2`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_0_permission_2")]
pub type FwRegsImsram32kx64eMain5SlvFwRegion0Permission2 = crate :: Reg < fw_regs_imsram32kx64e_main_5_slv_fw_region_0_permission_2 :: FwRegsImsram32kx64eMain5SlvFwRegion0Permission2Spec > ;
#[doc = "The FW Region 0 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_5.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_5_slv_fw_region_0_permission_2;
#[doc = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_0_start_address_l (rw) register accessor: The FW Region 0 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_5.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_5_slv_fw_region_0_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_5_slv_fw_region_0_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_5_slv_fw_region_0_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_0_start_address_l")]
pub type FwRegsImsram32kx64eMain5SlvFwRegion0StartAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_5_slv_fw_region_0_start_address_l :: FwRegsImsram32kx64eMain5SlvFwRegion0StartAddressLSpec > ;
#[doc = "The FW Region 0 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_5.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_5_slv_fw_region_0_start_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_0_start_address_h (rw) register accessor: The FW Region 0 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_5.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_5_slv_fw_region_0_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_5_slv_fw_region_0_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_5_slv_fw_region_0_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_0_start_address_h")]
pub type FwRegsImsram32kx64eMain5SlvFwRegion0StartAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_5_slv_fw_region_0_start_address_h :: FwRegsImsram32kx64eMain5SlvFwRegion0StartAddressHSpec > ;
#[doc = "The FW Region 0 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_5.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_5_slv_fw_region_0_start_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_0_end_address_l (rw) register accessor: The FW Region 0 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_5.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_5_slv_fw_region_0_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_5_slv_fw_region_0_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_5_slv_fw_region_0_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_0_end_address_l")]
pub type FwRegsImsram32kx64eMain5SlvFwRegion0EndAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_5_slv_fw_region_0_end_address_l :: FwRegsImsram32kx64eMain5SlvFwRegion0EndAddressLSpec > ;
#[doc = "The FW Region 0 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_5.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_5_slv_fw_region_0_end_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_0_end_address_h (rw) register accessor: The FW Region 0 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_5.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_5_slv_fw_region_0_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_5_slv_fw_region_0_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_5_slv_fw_region_0_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_0_end_address_h")]
pub type FwRegsImsram32kx64eMain5SlvFwRegion0EndAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_5_slv_fw_region_0_end_address_h :: FwRegsImsram32kx64eMain5SlvFwRegion0EndAddressHSpec > ;
#[doc = "The FW Region 0 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_5.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_5_slv_fw_region_0_end_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_1_control (rw) register accessor: The FW Region 1 Control Register defines the control fields for the slave Imsram32kx64e_main_5.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_5_slv_fw_region_1_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_5_slv_fw_region_1_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_5_slv_fw_region_1_control`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_1_control")]
pub type FwRegsImsram32kx64eMain5SlvFwRegion1Control = crate :: Reg < fw_regs_imsram32kx64e_main_5_slv_fw_region_1_control :: FwRegsImsram32kx64eMain5SlvFwRegion1ControlSpec > ;
#[doc = "The FW Region 1 Control Register defines the control fields for the slave Imsram32kx64e_main_5.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_5_slv_fw_region_1_control;
#[doc = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_1_permission_0 (rw) register accessor: The FW Region 1 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_5.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_5_slv_fw_region_1_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_5_slv_fw_region_1_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_5_slv_fw_region_1_permission_0`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_1_permission_0")]
pub type FwRegsImsram32kx64eMain5SlvFwRegion1Permission0 = crate :: Reg < fw_regs_imsram32kx64e_main_5_slv_fw_region_1_permission_0 :: FwRegsImsram32kx64eMain5SlvFwRegion1Permission0Spec > ;
#[doc = "The FW Region 1 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_5.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_5_slv_fw_region_1_permission_0;
#[doc = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_1_permission_1 (rw) register accessor: The FW Region 1 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_5.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_5_slv_fw_region_1_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_5_slv_fw_region_1_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_5_slv_fw_region_1_permission_1`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_1_permission_1")]
pub type FwRegsImsram32kx64eMain5SlvFwRegion1Permission1 = crate :: Reg < fw_regs_imsram32kx64e_main_5_slv_fw_region_1_permission_1 :: FwRegsImsram32kx64eMain5SlvFwRegion1Permission1Spec > ;
#[doc = "The FW Region 1 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_5.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_5_slv_fw_region_1_permission_1;
#[doc = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_1_permission_2 (rw) register accessor: The FW Region 1 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_5.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_5_slv_fw_region_1_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_5_slv_fw_region_1_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_5_slv_fw_region_1_permission_2`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_1_permission_2")]
pub type FwRegsImsram32kx64eMain5SlvFwRegion1Permission2 = crate :: Reg < fw_regs_imsram32kx64e_main_5_slv_fw_region_1_permission_2 :: FwRegsImsram32kx64eMain5SlvFwRegion1Permission2Spec > ;
#[doc = "The FW Region 1 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_5.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_5_slv_fw_region_1_permission_2;
#[doc = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_1_start_address_l (rw) register accessor: The FW Region 1 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_5.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_5_slv_fw_region_1_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_5_slv_fw_region_1_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_5_slv_fw_region_1_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_1_start_address_l")]
pub type FwRegsImsram32kx64eMain5SlvFwRegion1StartAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_5_slv_fw_region_1_start_address_l :: FwRegsImsram32kx64eMain5SlvFwRegion1StartAddressLSpec > ;
#[doc = "The FW Region 1 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_5.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_5_slv_fw_region_1_start_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_1_start_address_h (rw) register accessor: The FW Region 1 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_5.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_5_slv_fw_region_1_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_5_slv_fw_region_1_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_5_slv_fw_region_1_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_1_start_address_h")]
pub type FwRegsImsram32kx64eMain5SlvFwRegion1StartAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_5_slv_fw_region_1_start_address_h :: FwRegsImsram32kx64eMain5SlvFwRegion1StartAddressHSpec > ;
#[doc = "The FW Region 1 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_5.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_5_slv_fw_region_1_start_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_1_end_address_l (rw) register accessor: The FW Region 1 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_5.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_5_slv_fw_region_1_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_5_slv_fw_region_1_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_5_slv_fw_region_1_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_1_end_address_l")]
pub type FwRegsImsram32kx64eMain5SlvFwRegion1EndAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_5_slv_fw_region_1_end_address_l :: FwRegsImsram32kx64eMain5SlvFwRegion1EndAddressLSpec > ;
#[doc = "The FW Region 1 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_5.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_5_slv_fw_region_1_end_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_1_end_address_h (rw) register accessor: The FW Region 1 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_5.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_5_slv_fw_region_1_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_5_slv_fw_region_1_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_5_slv_fw_region_1_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_1_end_address_h")]
pub type FwRegsImsram32kx64eMain5SlvFwRegion1EndAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_5_slv_fw_region_1_end_address_h :: FwRegsImsram32kx64eMain5SlvFwRegion1EndAddressHSpec > ;
#[doc = "The FW Region 1 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_5.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_5_slv_fw_region_1_end_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_2_control (rw) register accessor: The FW Region 2 Control Register defines the control fields for the slave Imsram32kx64e_main_5.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_5_slv_fw_region_2_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_5_slv_fw_region_2_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_5_slv_fw_region_2_control`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_2_control")]
pub type FwRegsImsram32kx64eMain5SlvFwRegion2Control = crate :: Reg < fw_regs_imsram32kx64e_main_5_slv_fw_region_2_control :: FwRegsImsram32kx64eMain5SlvFwRegion2ControlSpec > ;
#[doc = "The FW Region 2 Control Register defines the control fields for the slave Imsram32kx64e_main_5.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_5_slv_fw_region_2_control;
#[doc = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_2_permission_0 (rw) register accessor: The FW Region 2 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_5.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_5_slv_fw_region_2_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_5_slv_fw_region_2_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_5_slv_fw_region_2_permission_0`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_2_permission_0")]
pub type FwRegsImsram32kx64eMain5SlvFwRegion2Permission0 = crate :: Reg < fw_regs_imsram32kx64e_main_5_slv_fw_region_2_permission_0 :: FwRegsImsram32kx64eMain5SlvFwRegion2Permission0Spec > ;
#[doc = "The FW Region 2 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_5.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_5_slv_fw_region_2_permission_0;
#[doc = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_2_permission_1 (rw) register accessor: The FW Region 2 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_5.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_5_slv_fw_region_2_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_5_slv_fw_region_2_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_5_slv_fw_region_2_permission_1`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_2_permission_1")]
pub type FwRegsImsram32kx64eMain5SlvFwRegion2Permission1 = crate :: Reg < fw_regs_imsram32kx64e_main_5_slv_fw_region_2_permission_1 :: FwRegsImsram32kx64eMain5SlvFwRegion2Permission1Spec > ;
#[doc = "The FW Region 2 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_5.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_5_slv_fw_region_2_permission_1;
#[doc = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_2_permission_2 (rw) register accessor: The FW Region 2 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_5.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_5_slv_fw_region_2_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_5_slv_fw_region_2_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_5_slv_fw_region_2_permission_2`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_2_permission_2")]
pub type FwRegsImsram32kx64eMain5SlvFwRegion2Permission2 = crate :: Reg < fw_regs_imsram32kx64e_main_5_slv_fw_region_2_permission_2 :: FwRegsImsram32kx64eMain5SlvFwRegion2Permission2Spec > ;
#[doc = "The FW Region 2 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_5.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_5_slv_fw_region_2_permission_2;
#[doc = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_2_start_address_l (rw) register accessor: The FW Region 2 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_5.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_5_slv_fw_region_2_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_5_slv_fw_region_2_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_5_slv_fw_region_2_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_2_start_address_l")]
pub type FwRegsImsram32kx64eMain5SlvFwRegion2StartAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_5_slv_fw_region_2_start_address_l :: FwRegsImsram32kx64eMain5SlvFwRegion2StartAddressLSpec > ;
#[doc = "The FW Region 2 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_5.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_5_slv_fw_region_2_start_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_2_start_address_h (rw) register accessor: The FW Region 2 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_5.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_5_slv_fw_region_2_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_5_slv_fw_region_2_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_5_slv_fw_region_2_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_2_start_address_h")]
pub type FwRegsImsram32kx64eMain5SlvFwRegion2StartAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_5_slv_fw_region_2_start_address_h :: FwRegsImsram32kx64eMain5SlvFwRegion2StartAddressHSpec > ;
#[doc = "The FW Region 2 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_5.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_5_slv_fw_region_2_start_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_2_end_address_l (rw) register accessor: The FW Region 2 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_5.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_5_slv_fw_region_2_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_5_slv_fw_region_2_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_5_slv_fw_region_2_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_2_end_address_l")]
pub type FwRegsImsram32kx64eMain5SlvFwRegion2EndAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_5_slv_fw_region_2_end_address_l :: FwRegsImsram32kx64eMain5SlvFwRegion2EndAddressLSpec > ;
#[doc = "The FW Region 2 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_5.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_5_slv_fw_region_2_end_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_2_end_address_h (rw) register accessor: The FW Region 2 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_5.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_5_slv_fw_region_2_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_5_slv_fw_region_2_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_5_slv_fw_region_2_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_2_end_address_h")]
pub type FwRegsImsram32kx64eMain5SlvFwRegion2EndAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_5_slv_fw_region_2_end_address_h :: FwRegsImsram32kx64eMain5SlvFwRegion2EndAddressHSpec > ;
#[doc = "The FW Region 2 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_5.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_5_slv_fw_region_2_end_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_3_control (rw) register accessor: The FW Region 3 Control Register defines the control fields for the slave Imsram32kx64e_main_5.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_5_slv_fw_region_3_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_5_slv_fw_region_3_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_5_slv_fw_region_3_control`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_3_control")]
pub type FwRegsImsram32kx64eMain5SlvFwRegion3Control = crate :: Reg < fw_regs_imsram32kx64e_main_5_slv_fw_region_3_control :: FwRegsImsram32kx64eMain5SlvFwRegion3ControlSpec > ;
#[doc = "The FW Region 3 Control Register defines the control fields for the slave Imsram32kx64e_main_5.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_5_slv_fw_region_3_control;
#[doc = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_3_permission_0 (rw) register accessor: The FW Region 3 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_5.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_5_slv_fw_region_3_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_5_slv_fw_region_3_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_5_slv_fw_region_3_permission_0`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_3_permission_0")]
pub type FwRegsImsram32kx64eMain5SlvFwRegion3Permission0 = crate :: Reg < fw_regs_imsram32kx64e_main_5_slv_fw_region_3_permission_0 :: FwRegsImsram32kx64eMain5SlvFwRegion3Permission0Spec > ;
#[doc = "The FW Region 3 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_5.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_5_slv_fw_region_3_permission_0;
#[doc = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_3_permission_1 (rw) register accessor: The FW Region 3 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_5.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_5_slv_fw_region_3_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_5_slv_fw_region_3_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_5_slv_fw_region_3_permission_1`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_3_permission_1")]
pub type FwRegsImsram32kx64eMain5SlvFwRegion3Permission1 = crate :: Reg < fw_regs_imsram32kx64e_main_5_slv_fw_region_3_permission_1 :: FwRegsImsram32kx64eMain5SlvFwRegion3Permission1Spec > ;
#[doc = "The FW Region 3 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_5.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_5_slv_fw_region_3_permission_1;
#[doc = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_3_permission_2 (rw) register accessor: The FW Region 3 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_5.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_5_slv_fw_region_3_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_5_slv_fw_region_3_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_5_slv_fw_region_3_permission_2`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_3_permission_2")]
pub type FwRegsImsram32kx64eMain5SlvFwRegion3Permission2 = crate :: Reg < fw_regs_imsram32kx64e_main_5_slv_fw_region_3_permission_2 :: FwRegsImsram32kx64eMain5SlvFwRegion3Permission2Spec > ;
#[doc = "The FW Region 3 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_5.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_5_slv_fw_region_3_permission_2;
#[doc = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_3_start_address_l (rw) register accessor: The FW Region 3 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_5.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_5_slv_fw_region_3_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_5_slv_fw_region_3_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_5_slv_fw_region_3_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_3_start_address_l")]
pub type FwRegsImsram32kx64eMain5SlvFwRegion3StartAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_5_slv_fw_region_3_start_address_l :: FwRegsImsram32kx64eMain5SlvFwRegion3StartAddressLSpec > ;
#[doc = "The FW Region 3 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_5.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_5_slv_fw_region_3_start_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_3_start_address_h (rw) register accessor: The FW Region 3 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_5.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_5_slv_fw_region_3_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_5_slv_fw_region_3_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_5_slv_fw_region_3_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_3_start_address_h")]
pub type FwRegsImsram32kx64eMain5SlvFwRegion3StartAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_5_slv_fw_region_3_start_address_h :: FwRegsImsram32kx64eMain5SlvFwRegion3StartAddressHSpec > ;
#[doc = "The FW Region 3 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_5.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_5_slv_fw_region_3_start_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_3_end_address_l (rw) register accessor: The FW Region 3 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_5.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_5_slv_fw_region_3_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_5_slv_fw_region_3_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_5_slv_fw_region_3_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_3_end_address_l")]
pub type FwRegsImsram32kx64eMain5SlvFwRegion3EndAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_5_slv_fw_region_3_end_address_l :: FwRegsImsram32kx64eMain5SlvFwRegion3EndAddressLSpec > ;
#[doc = "The FW Region 3 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_5.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_5_slv_fw_region_3_end_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_3_end_address_h (rw) register accessor: The FW Region 3 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_5.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_5_slv_fw_region_3_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_5_slv_fw_region_3_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_5_slv_fw_region_3_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_5_slv_fw_region_3_end_address_h")]
pub type FwRegsImsram32kx64eMain5SlvFwRegion3EndAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_5_slv_fw_region_3_end_address_h :: FwRegsImsram32kx64eMain5SlvFwRegion3EndAddressHSpec > ;
#[doc = "The FW Region 3 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_5.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_5_slv_fw_region_3_end_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_0_control (rw) register accessor: The FW Region 0 Control Register defines the control fields for the slave Imsram32kx64e_main_4.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_4_slv_fw_region_0_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_4_slv_fw_region_0_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_4_slv_fw_region_0_control`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_0_control")]
pub type FwRegsImsram32kx64eMain4SlvFwRegion0Control = crate :: Reg < fw_regs_imsram32kx64e_main_4_slv_fw_region_0_control :: FwRegsImsram32kx64eMain4SlvFwRegion0ControlSpec > ;
#[doc = "The FW Region 0 Control Register defines the control fields for the slave Imsram32kx64e_main_4.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_4_slv_fw_region_0_control;
#[doc = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_0_permission_0 (rw) register accessor: The FW Region 0 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_4.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_4_slv_fw_region_0_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_4_slv_fw_region_0_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_4_slv_fw_region_0_permission_0`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_0_permission_0")]
pub type FwRegsImsram32kx64eMain4SlvFwRegion0Permission0 = crate :: Reg < fw_regs_imsram32kx64e_main_4_slv_fw_region_0_permission_0 :: FwRegsImsram32kx64eMain4SlvFwRegion0Permission0Spec > ;
#[doc = "The FW Region 0 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_4.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_4_slv_fw_region_0_permission_0;
#[doc = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_0_permission_1 (rw) register accessor: The FW Region 0 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_4.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_4_slv_fw_region_0_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_4_slv_fw_region_0_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_4_slv_fw_region_0_permission_1`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_0_permission_1")]
pub type FwRegsImsram32kx64eMain4SlvFwRegion0Permission1 = crate :: Reg < fw_regs_imsram32kx64e_main_4_slv_fw_region_0_permission_1 :: FwRegsImsram32kx64eMain4SlvFwRegion0Permission1Spec > ;
#[doc = "The FW Region 0 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_4.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_4_slv_fw_region_0_permission_1;
#[doc = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_0_permission_2 (rw) register accessor: The FW Region 0 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_4.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_4_slv_fw_region_0_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_4_slv_fw_region_0_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_4_slv_fw_region_0_permission_2`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_0_permission_2")]
pub type FwRegsImsram32kx64eMain4SlvFwRegion0Permission2 = crate :: Reg < fw_regs_imsram32kx64e_main_4_slv_fw_region_0_permission_2 :: FwRegsImsram32kx64eMain4SlvFwRegion0Permission2Spec > ;
#[doc = "The FW Region 0 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_4.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_4_slv_fw_region_0_permission_2;
#[doc = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_0_start_address_l (rw) register accessor: The FW Region 0 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_4.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_4_slv_fw_region_0_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_4_slv_fw_region_0_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_4_slv_fw_region_0_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_0_start_address_l")]
pub type FwRegsImsram32kx64eMain4SlvFwRegion0StartAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_4_slv_fw_region_0_start_address_l :: FwRegsImsram32kx64eMain4SlvFwRegion0StartAddressLSpec > ;
#[doc = "The FW Region 0 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_4.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_4_slv_fw_region_0_start_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_0_start_address_h (rw) register accessor: The FW Region 0 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_4.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_4_slv_fw_region_0_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_4_slv_fw_region_0_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_4_slv_fw_region_0_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_0_start_address_h")]
pub type FwRegsImsram32kx64eMain4SlvFwRegion0StartAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_4_slv_fw_region_0_start_address_h :: FwRegsImsram32kx64eMain4SlvFwRegion0StartAddressHSpec > ;
#[doc = "The FW Region 0 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_4.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_4_slv_fw_region_0_start_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_0_end_address_l (rw) register accessor: The FW Region 0 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_4.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_4_slv_fw_region_0_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_4_slv_fw_region_0_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_4_slv_fw_region_0_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_0_end_address_l")]
pub type FwRegsImsram32kx64eMain4SlvFwRegion0EndAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_4_slv_fw_region_0_end_address_l :: FwRegsImsram32kx64eMain4SlvFwRegion0EndAddressLSpec > ;
#[doc = "The FW Region 0 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_4.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_4_slv_fw_region_0_end_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_0_end_address_h (rw) register accessor: The FW Region 0 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_4.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_4_slv_fw_region_0_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_4_slv_fw_region_0_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_4_slv_fw_region_0_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_0_end_address_h")]
pub type FwRegsImsram32kx64eMain4SlvFwRegion0EndAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_4_slv_fw_region_0_end_address_h :: FwRegsImsram32kx64eMain4SlvFwRegion0EndAddressHSpec > ;
#[doc = "The FW Region 0 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_4.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_4_slv_fw_region_0_end_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_1_control (rw) register accessor: The FW Region 1 Control Register defines the control fields for the slave Imsram32kx64e_main_4.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_4_slv_fw_region_1_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_4_slv_fw_region_1_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_4_slv_fw_region_1_control`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_1_control")]
pub type FwRegsImsram32kx64eMain4SlvFwRegion1Control = crate :: Reg < fw_regs_imsram32kx64e_main_4_slv_fw_region_1_control :: FwRegsImsram32kx64eMain4SlvFwRegion1ControlSpec > ;
#[doc = "The FW Region 1 Control Register defines the control fields for the slave Imsram32kx64e_main_4.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_4_slv_fw_region_1_control;
#[doc = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_1_permission_0 (rw) register accessor: The FW Region 1 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_4.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_4_slv_fw_region_1_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_4_slv_fw_region_1_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_4_slv_fw_region_1_permission_0`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_1_permission_0")]
pub type FwRegsImsram32kx64eMain4SlvFwRegion1Permission0 = crate :: Reg < fw_regs_imsram32kx64e_main_4_slv_fw_region_1_permission_0 :: FwRegsImsram32kx64eMain4SlvFwRegion1Permission0Spec > ;
#[doc = "The FW Region 1 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_4.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_4_slv_fw_region_1_permission_0;
#[doc = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_1_permission_1 (rw) register accessor: The FW Region 1 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_4.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_4_slv_fw_region_1_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_4_slv_fw_region_1_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_4_slv_fw_region_1_permission_1`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_1_permission_1")]
pub type FwRegsImsram32kx64eMain4SlvFwRegion1Permission1 = crate :: Reg < fw_regs_imsram32kx64e_main_4_slv_fw_region_1_permission_1 :: FwRegsImsram32kx64eMain4SlvFwRegion1Permission1Spec > ;
#[doc = "The FW Region 1 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_4.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_4_slv_fw_region_1_permission_1;
#[doc = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_1_permission_2 (rw) register accessor: The FW Region 1 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_4.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_4_slv_fw_region_1_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_4_slv_fw_region_1_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_4_slv_fw_region_1_permission_2`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_1_permission_2")]
pub type FwRegsImsram32kx64eMain4SlvFwRegion1Permission2 = crate :: Reg < fw_regs_imsram32kx64e_main_4_slv_fw_region_1_permission_2 :: FwRegsImsram32kx64eMain4SlvFwRegion1Permission2Spec > ;
#[doc = "The FW Region 1 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_4.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_4_slv_fw_region_1_permission_2;
#[doc = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_1_start_address_l (rw) register accessor: The FW Region 1 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_4.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_4_slv_fw_region_1_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_4_slv_fw_region_1_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_4_slv_fw_region_1_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_1_start_address_l")]
pub type FwRegsImsram32kx64eMain4SlvFwRegion1StartAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_4_slv_fw_region_1_start_address_l :: FwRegsImsram32kx64eMain4SlvFwRegion1StartAddressLSpec > ;
#[doc = "The FW Region 1 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_4.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_4_slv_fw_region_1_start_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_1_start_address_h (rw) register accessor: The FW Region 1 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_4.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_4_slv_fw_region_1_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_4_slv_fw_region_1_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_4_slv_fw_region_1_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_1_start_address_h")]
pub type FwRegsImsram32kx64eMain4SlvFwRegion1StartAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_4_slv_fw_region_1_start_address_h :: FwRegsImsram32kx64eMain4SlvFwRegion1StartAddressHSpec > ;
#[doc = "The FW Region 1 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_4.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_4_slv_fw_region_1_start_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_1_end_address_l (rw) register accessor: The FW Region 1 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_4.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_4_slv_fw_region_1_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_4_slv_fw_region_1_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_4_slv_fw_region_1_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_1_end_address_l")]
pub type FwRegsImsram32kx64eMain4SlvFwRegion1EndAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_4_slv_fw_region_1_end_address_l :: FwRegsImsram32kx64eMain4SlvFwRegion1EndAddressLSpec > ;
#[doc = "The FW Region 1 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_4.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_4_slv_fw_region_1_end_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_1_end_address_h (rw) register accessor: The FW Region 1 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_4.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_4_slv_fw_region_1_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_4_slv_fw_region_1_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_4_slv_fw_region_1_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_1_end_address_h")]
pub type FwRegsImsram32kx64eMain4SlvFwRegion1EndAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_4_slv_fw_region_1_end_address_h :: FwRegsImsram32kx64eMain4SlvFwRegion1EndAddressHSpec > ;
#[doc = "The FW Region 1 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_4.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_4_slv_fw_region_1_end_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_2_control (rw) register accessor: The FW Region 2 Control Register defines the control fields for the slave Imsram32kx64e_main_4.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_4_slv_fw_region_2_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_4_slv_fw_region_2_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_4_slv_fw_region_2_control`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_2_control")]
pub type FwRegsImsram32kx64eMain4SlvFwRegion2Control = crate :: Reg < fw_regs_imsram32kx64e_main_4_slv_fw_region_2_control :: FwRegsImsram32kx64eMain4SlvFwRegion2ControlSpec > ;
#[doc = "The FW Region 2 Control Register defines the control fields for the slave Imsram32kx64e_main_4.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_4_slv_fw_region_2_control;
#[doc = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_2_permission_0 (rw) register accessor: The FW Region 2 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_4.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_4_slv_fw_region_2_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_4_slv_fw_region_2_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_4_slv_fw_region_2_permission_0`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_2_permission_0")]
pub type FwRegsImsram32kx64eMain4SlvFwRegion2Permission0 = crate :: Reg < fw_regs_imsram32kx64e_main_4_slv_fw_region_2_permission_0 :: FwRegsImsram32kx64eMain4SlvFwRegion2Permission0Spec > ;
#[doc = "The FW Region 2 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_4.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_4_slv_fw_region_2_permission_0;
#[doc = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_2_permission_1 (rw) register accessor: The FW Region 2 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_4.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_4_slv_fw_region_2_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_4_slv_fw_region_2_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_4_slv_fw_region_2_permission_1`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_2_permission_1")]
pub type FwRegsImsram32kx64eMain4SlvFwRegion2Permission1 = crate :: Reg < fw_regs_imsram32kx64e_main_4_slv_fw_region_2_permission_1 :: FwRegsImsram32kx64eMain4SlvFwRegion2Permission1Spec > ;
#[doc = "The FW Region 2 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_4.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_4_slv_fw_region_2_permission_1;
#[doc = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_2_permission_2 (rw) register accessor: The FW Region 2 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_4.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_4_slv_fw_region_2_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_4_slv_fw_region_2_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_4_slv_fw_region_2_permission_2`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_2_permission_2")]
pub type FwRegsImsram32kx64eMain4SlvFwRegion2Permission2 = crate :: Reg < fw_regs_imsram32kx64e_main_4_slv_fw_region_2_permission_2 :: FwRegsImsram32kx64eMain4SlvFwRegion2Permission2Spec > ;
#[doc = "The FW Region 2 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_4.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_4_slv_fw_region_2_permission_2;
#[doc = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_2_start_address_l (rw) register accessor: The FW Region 2 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_4.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_4_slv_fw_region_2_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_4_slv_fw_region_2_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_4_slv_fw_region_2_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_2_start_address_l")]
pub type FwRegsImsram32kx64eMain4SlvFwRegion2StartAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_4_slv_fw_region_2_start_address_l :: FwRegsImsram32kx64eMain4SlvFwRegion2StartAddressLSpec > ;
#[doc = "The FW Region 2 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_4.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_4_slv_fw_region_2_start_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_2_start_address_h (rw) register accessor: The FW Region 2 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_4.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_4_slv_fw_region_2_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_4_slv_fw_region_2_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_4_slv_fw_region_2_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_2_start_address_h")]
pub type FwRegsImsram32kx64eMain4SlvFwRegion2StartAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_4_slv_fw_region_2_start_address_h :: FwRegsImsram32kx64eMain4SlvFwRegion2StartAddressHSpec > ;
#[doc = "The FW Region 2 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_4.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_4_slv_fw_region_2_start_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_2_end_address_l (rw) register accessor: The FW Region 2 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_4.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_4_slv_fw_region_2_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_4_slv_fw_region_2_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_4_slv_fw_region_2_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_2_end_address_l")]
pub type FwRegsImsram32kx64eMain4SlvFwRegion2EndAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_4_slv_fw_region_2_end_address_l :: FwRegsImsram32kx64eMain4SlvFwRegion2EndAddressLSpec > ;
#[doc = "The FW Region 2 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_4.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_4_slv_fw_region_2_end_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_2_end_address_h (rw) register accessor: The FW Region 2 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_4.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_4_slv_fw_region_2_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_4_slv_fw_region_2_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_4_slv_fw_region_2_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_2_end_address_h")]
pub type FwRegsImsram32kx64eMain4SlvFwRegion2EndAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_4_slv_fw_region_2_end_address_h :: FwRegsImsram32kx64eMain4SlvFwRegion2EndAddressHSpec > ;
#[doc = "The FW Region 2 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_4.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_4_slv_fw_region_2_end_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_3_control (rw) register accessor: The FW Region 3 Control Register defines the control fields for the slave Imsram32kx64e_main_4.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_4_slv_fw_region_3_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_4_slv_fw_region_3_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_4_slv_fw_region_3_control`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_3_control")]
pub type FwRegsImsram32kx64eMain4SlvFwRegion3Control = crate :: Reg < fw_regs_imsram32kx64e_main_4_slv_fw_region_3_control :: FwRegsImsram32kx64eMain4SlvFwRegion3ControlSpec > ;
#[doc = "The FW Region 3 Control Register defines the control fields for the slave Imsram32kx64e_main_4.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_4_slv_fw_region_3_control;
#[doc = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_3_permission_0 (rw) register accessor: The FW Region 3 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_4.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_4_slv_fw_region_3_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_4_slv_fw_region_3_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_4_slv_fw_region_3_permission_0`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_3_permission_0")]
pub type FwRegsImsram32kx64eMain4SlvFwRegion3Permission0 = crate :: Reg < fw_regs_imsram32kx64e_main_4_slv_fw_region_3_permission_0 :: FwRegsImsram32kx64eMain4SlvFwRegion3Permission0Spec > ;
#[doc = "The FW Region 3 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_4.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_4_slv_fw_region_3_permission_0;
#[doc = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_3_permission_1 (rw) register accessor: The FW Region 3 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_4.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_4_slv_fw_region_3_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_4_slv_fw_region_3_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_4_slv_fw_region_3_permission_1`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_3_permission_1")]
pub type FwRegsImsram32kx64eMain4SlvFwRegion3Permission1 = crate :: Reg < fw_regs_imsram32kx64e_main_4_slv_fw_region_3_permission_1 :: FwRegsImsram32kx64eMain4SlvFwRegion3Permission1Spec > ;
#[doc = "The FW Region 3 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_4.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_4_slv_fw_region_3_permission_1;
#[doc = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_3_permission_2 (rw) register accessor: The FW Region 3 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_4.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_4_slv_fw_region_3_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_4_slv_fw_region_3_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_4_slv_fw_region_3_permission_2`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_3_permission_2")]
pub type FwRegsImsram32kx64eMain4SlvFwRegion3Permission2 = crate :: Reg < fw_regs_imsram32kx64e_main_4_slv_fw_region_3_permission_2 :: FwRegsImsram32kx64eMain4SlvFwRegion3Permission2Spec > ;
#[doc = "The FW Region 3 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_4.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_4_slv_fw_region_3_permission_2;
#[doc = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_3_start_address_l (rw) register accessor: The FW Region 3 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_4.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_4_slv_fw_region_3_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_4_slv_fw_region_3_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_4_slv_fw_region_3_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_3_start_address_l")]
pub type FwRegsImsram32kx64eMain4SlvFwRegion3StartAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_4_slv_fw_region_3_start_address_l :: FwRegsImsram32kx64eMain4SlvFwRegion3StartAddressLSpec > ;
#[doc = "The FW Region 3 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_4.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_4_slv_fw_region_3_start_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_3_start_address_h (rw) register accessor: The FW Region 3 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_4.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_4_slv_fw_region_3_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_4_slv_fw_region_3_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_4_slv_fw_region_3_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_3_start_address_h")]
pub type FwRegsImsram32kx64eMain4SlvFwRegion3StartAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_4_slv_fw_region_3_start_address_h :: FwRegsImsram32kx64eMain4SlvFwRegion3StartAddressHSpec > ;
#[doc = "The FW Region 3 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_4.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_4_slv_fw_region_3_start_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_3_end_address_l (rw) register accessor: The FW Region 3 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_4.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_4_slv_fw_region_3_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_4_slv_fw_region_3_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_4_slv_fw_region_3_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_3_end_address_l")]
pub type FwRegsImsram32kx64eMain4SlvFwRegion3EndAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_4_slv_fw_region_3_end_address_l :: FwRegsImsram32kx64eMain4SlvFwRegion3EndAddressLSpec > ;
#[doc = "The FW Region 3 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_4.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_4_slv_fw_region_3_end_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_3_end_address_h (rw) register accessor: The FW Region 3 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_4.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_4_slv_fw_region_3_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_4_slv_fw_region_3_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_4_slv_fw_region_3_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_4_slv_fw_region_3_end_address_h")]
pub type FwRegsImsram32kx64eMain4SlvFwRegion3EndAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_4_slv_fw_region_3_end_address_h :: FwRegsImsram32kx64eMain4SlvFwRegion3EndAddressHSpec > ;
#[doc = "The FW Region 3 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_4.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_4_slv_fw_region_3_end_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_0_control (rw) register accessor: The FW Region 0 Control Register defines the control fields for the slave Imsram32kx64e_main_3.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_3_slv_fw_region_0_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_3_slv_fw_region_0_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_3_slv_fw_region_0_control`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_0_control")]
pub type FwRegsImsram32kx64eMain3SlvFwRegion0Control = crate :: Reg < fw_regs_imsram32kx64e_main_3_slv_fw_region_0_control :: FwRegsImsram32kx64eMain3SlvFwRegion0ControlSpec > ;
#[doc = "The FW Region 0 Control Register defines the control fields for the slave Imsram32kx64e_main_3.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_3_slv_fw_region_0_control;
#[doc = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_0_permission_0 (rw) register accessor: The FW Region 0 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_3.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_3_slv_fw_region_0_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_3_slv_fw_region_0_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_3_slv_fw_region_0_permission_0`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_0_permission_0")]
pub type FwRegsImsram32kx64eMain3SlvFwRegion0Permission0 = crate :: Reg < fw_regs_imsram32kx64e_main_3_slv_fw_region_0_permission_0 :: FwRegsImsram32kx64eMain3SlvFwRegion0Permission0Spec > ;
#[doc = "The FW Region 0 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_3.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_3_slv_fw_region_0_permission_0;
#[doc = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_0_permission_1 (rw) register accessor: The FW Region 0 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_3.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_3_slv_fw_region_0_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_3_slv_fw_region_0_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_3_slv_fw_region_0_permission_1`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_0_permission_1")]
pub type FwRegsImsram32kx64eMain3SlvFwRegion0Permission1 = crate :: Reg < fw_regs_imsram32kx64e_main_3_slv_fw_region_0_permission_1 :: FwRegsImsram32kx64eMain3SlvFwRegion0Permission1Spec > ;
#[doc = "The FW Region 0 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_3.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_3_slv_fw_region_0_permission_1;
#[doc = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_0_permission_2 (rw) register accessor: The FW Region 0 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_3.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_3_slv_fw_region_0_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_3_slv_fw_region_0_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_3_slv_fw_region_0_permission_2`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_0_permission_2")]
pub type FwRegsImsram32kx64eMain3SlvFwRegion0Permission2 = crate :: Reg < fw_regs_imsram32kx64e_main_3_slv_fw_region_0_permission_2 :: FwRegsImsram32kx64eMain3SlvFwRegion0Permission2Spec > ;
#[doc = "The FW Region 0 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_3.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_3_slv_fw_region_0_permission_2;
#[doc = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_0_start_address_l (rw) register accessor: The FW Region 0 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_3.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_3_slv_fw_region_0_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_3_slv_fw_region_0_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_3_slv_fw_region_0_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_0_start_address_l")]
pub type FwRegsImsram32kx64eMain3SlvFwRegion0StartAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_3_slv_fw_region_0_start_address_l :: FwRegsImsram32kx64eMain3SlvFwRegion0StartAddressLSpec > ;
#[doc = "The FW Region 0 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_3.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_3_slv_fw_region_0_start_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_0_start_address_h (rw) register accessor: The FW Region 0 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_3.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_3_slv_fw_region_0_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_3_slv_fw_region_0_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_3_slv_fw_region_0_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_0_start_address_h")]
pub type FwRegsImsram32kx64eMain3SlvFwRegion0StartAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_3_slv_fw_region_0_start_address_h :: FwRegsImsram32kx64eMain3SlvFwRegion0StartAddressHSpec > ;
#[doc = "The FW Region 0 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_3.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_3_slv_fw_region_0_start_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_0_end_address_l (rw) register accessor: The FW Region 0 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_3.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_3_slv_fw_region_0_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_3_slv_fw_region_0_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_3_slv_fw_region_0_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_0_end_address_l")]
pub type FwRegsImsram32kx64eMain3SlvFwRegion0EndAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_3_slv_fw_region_0_end_address_l :: FwRegsImsram32kx64eMain3SlvFwRegion0EndAddressLSpec > ;
#[doc = "The FW Region 0 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_3.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_3_slv_fw_region_0_end_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_0_end_address_h (rw) register accessor: The FW Region 0 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_3.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_3_slv_fw_region_0_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_3_slv_fw_region_0_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_3_slv_fw_region_0_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_0_end_address_h")]
pub type FwRegsImsram32kx64eMain3SlvFwRegion0EndAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_3_slv_fw_region_0_end_address_h :: FwRegsImsram32kx64eMain3SlvFwRegion0EndAddressHSpec > ;
#[doc = "The FW Region 0 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_3.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_3_slv_fw_region_0_end_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_1_control (rw) register accessor: The FW Region 1 Control Register defines the control fields for the slave Imsram32kx64e_main_3.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_3_slv_fw_region_1_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_3_slv_fw_region_1_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_3_slv_fw_region_1_control`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_1_control")]
pub type FwRegsImsram32kx64eMain3SlvFwRegion1Control = crate :: Reg < fw_regs_imsram32kx64e_main_3_slv_fw_region_1_control :: FwRegsImsram32kx64eMain3SlvFwRegion1ControlSpec > ;
#[doc = "The FW Region 1 Control Register defines the control fields for the slave Imsram32kx64e_main_3.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_3_slv_fw_region_1_control;
#[doc = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_1_permission_0 (rw) register accessor: The FW Region 1 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_3.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_3_slv_fw_region_1_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_3_slv_fw_region_1_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_3_slv_fw_region_1_permission_0`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_1_permission_0")]
pub type FwRegsImsram32kx64eMain3SlvFwRegion1Permission0 = crate :: Reg < fw_regs_imsram32kx64e_main_3_slv_fw_region_1_permission_0 :: FwRegsImsram32kx64eMain3SlvFwRegion1Permission0Spec > ;
#[doc = "The FW Region 1 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_3.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_3_slv_fw_region_1_permission_0;
#[doc = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_1_permission_1 (rw) register accessor: The FW Region 1 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_3.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_3_slv_fw_region_1_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_3_slv_fw_region_1_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_3_slv_fw_region_1_permission_1`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_1_permission_1")]
pub type FwRegsImsram32kx64eMain3SlvFwRegion1Permission1 = crate :: Reg < fw_regs_imsram32kx64e_main_3_slv_fw_region_1_permission_1 :: FwRegsImsram32kx64eMain3SlvFwRegion1Permission1Spec > ;
#[doc = "The FW Region 1 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_3.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_3_slv_fw_region_1_permission_1;
#[doc = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_1_permission_2 (rw) register accessor: The FW Region 1 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_3.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_3_slv_fw_region_1_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_3_slv_fw_region_1_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_3_slv_fw_region_1_permission_2`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_1_permission_2")]
pub type FwRegsImsram32kx64eMain3SlvFwRegion1Permission2 = crate :: Reg < fw_regs_imsram32kx64e_main_3_slv_fw_region_1_permission_2 :: FwRegsImsram32kx64eMain3SlvFwRegion1Permission2Spec > ;
#[doc = "The FW Region 1 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_3.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_3_slv_fw_region_1_permission_2;
#[doc = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_1_start_address_l (rw) register accessor: The FW Region 1 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_3.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_3_slv_fw_region_1_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_3_slv_fw_region_1_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_3_slv_fw_region_1_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_1_start_address_l")]
pub type FwRegsImsram32kx64eMain3SlvFwRegion1StartAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_3_slv_fw_region_1_start_address_l :: FwRegsImsram32kx64eMain3SlvFwRegion1StartAddressLSpec > ;
#[doc = "The FW Region 1 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_3.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_3_slv_fw_region_1_start_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_1_start_address_h (rw) register accessor: The FW Region 1 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_3.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_3_slv_fw_region_1_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_3_slv_fw_region_1_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_3_slv_fw_region_1_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_1_start_address_h")]
pub type FwRegsImsram32kx64eMain3SlvFwRegion1StartAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_3_slv_fw_region_1_start_address_h :: FwRegsImsram32kx64eMain3SlvFwRegion1StartAddressHSpec > ;
#[doc = "The FW Region 1 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_3.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_3_slv_fw_region_1_start_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_1_end_address_l (rw) register accessor: The FW Region 1 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_3.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_3_slv_fw_region_1_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_3_slv_fw_region_1_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_3_slv_fw_region_1_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_1_end_address_l")]
pub type FwRegsImsram32kx64eMain3SlvFwRegion1EndAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_3_slv_fw_region_1_end_address_l :: FwRegsImsram32kx64eMain3SlvFwRegion1EndAddressLSpec > ;
#[doc = "The FW Region 1 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_3.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_3_slv_fw_region_1_end_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_1_end_address_h (rw) register accessor: The FW Region 1 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_3.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_3_slv_fw_region_1_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_3_slv_fw_region_1_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_3_slv_fw_region_1_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_1_end_address_h")]
pub type FwRegsImsram32kx64eMain3SlvFwRegion1EndAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_3_slv_fw_region_1_end_address_h :: FwRegsImsram32kx64eMain3SlvFwRegion1EndAddressHSpec > ;
#[doc = "The FW Region 1 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_3.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_3_slv_fw_region_1_end_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_2_control (rw) register accessor: The FW Region 2 Control Register defines the control fields for the slave Imsram32kx64e_main_3.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_3_slv_fw_region_2_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_3_slv_fw_region_2_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_3_slv_fw_region_2_control`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_2_control")]
pub type FwRegsImsram32kx64eMain3SlvFwRegion2Control = crate :: Reg < fw_regs_imsram32kx64e_main_3_slv_fw_region_2_control :: FwRegsImsram32kx64eMain3SlvFwRegion2ControlSpec > ;
#[doc = "The FW Region 2 Control Register defines the control fields for the slave Imsram32kx64e_main_3.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_3_slv_fw_region_2_control;
#[doc = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_2_permission_0 (rw) register accessor: The FW Region 2 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_3.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_3_slv_fw_region_2_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_3_slv_fw_region_2_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_3_slv_fw_region_2_permission_0`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_2_permission_0")]
pub type FwRegsImsram32kx64eMain3SlvFwRegion2Permission0 = crate :: Reg < fw_regs_imsram32kx64e_main_3_slv_fw_region_2_permission_0 :: FwRegsImsram32kx64eMain3SlvFwRegion2Permission0Spec > ;
#[doc = "The FW Region 2 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_3.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_3_slv_fw_region_2_permission_0;
#[doc = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_2_permission_1 (rw) register accessor: The FW Region 2 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_3.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_3_slv_fw_region_2_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_3_slv_fw_region_2_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_3_slv_fw_region_2_permission_1`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_2_permission_1")]
pub type FwRegsImsram32kx64eMain3SlvFwRegion2Permission1 = crate :: Reg < fw_regs_imsram32kx64e_main_3_slv_fw_region_2_permission_1 :: FwRegsImsram32kx64eMain3SlvFwRegion2Permission1Spec > ;
#[doc = "The FW Region 2 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_3.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_3_slv_fw_region_2_permission_1;
#[doc = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_2_permission_2 (rw) register accessor: The FW Region 2 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_3.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_3_slv_fw_region_2_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_3_slv_fw_region_2_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_3_slv_fw_region_2_permission_2`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_2_permission_2")]
pub type FwRegsImsram32kx64eMain3SlvFwRegion2Permission2 = crate :: Reg < fw_regs_imsram32kx64e_main_3_slv_fw_region_2_permission_2 :: FwRegsImsram32kx64eMain3SlvFwRegion2Permission2Spec > ;
#[doc = "The FW Region 2 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_3.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_3_slv_fw_region_2_permission_2;
#[doc = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_2_start_address_l (rw) register accessor: The FW Region 2 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_3.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_3_slv_fw_region_2_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_3_slv_fw_region_2_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_3_slv_fw_region_2_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_2_start_address_l")]
pub type FwRegsImsram32kx64eMain3SlvFwRegion2StartAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_3_slv_fw_region_2_start_address_l :: FwRegsImsram32kx64eMain3SlvFwRegion2StartAddressLSpec > ;
#[doc = "The FW Region 2 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_3.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_3_slv_fw_region_2_start_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_2_start_address_h (rw) register accessor: The FW Region 2 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_3.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_3_slv_fw_region_2_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_3_slv_fw_region_2_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_3_slv_fw_region_2_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_2_start_address_h")]
pub type FwRegsImsram32kx64eMain3SlvFwRegion2StartAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_3_slv_fw_region_2_start_address_h :: FwRegsImsram32kx64eMain3SlvFwRegion2StartAddressHSpec > ;
#[doc = "The FW Region 2 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_3.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_3_slv_fw_region_2_start_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_2_end_address_l (rw) register accessor: The FW Region 2 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_3.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_3_slv_fw_region_2_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_3_slv_fw_region_2_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_3_slv_fw_region_2_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_2_end_address_l")]
pub type FwRegsImsram32kx64eMain3SlvFwRegion2EndAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_3_slv_fw_region_2_end_address_l :: FwRegsImsram32kx64eMain3SlvFwRegion2EndAddressLSpec > ;
#[doc = "The FW Region 2 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_3.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_3_slv_fw_region_2_end_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_2_end_address_h (rw) register accessor: The FW Region 2 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_3.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_3_slv_fw_region_2_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_3_slv_fw_region_2_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_3_slv_fw_region_2_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_2_end_address_h")]
pub type FwRegsImsram32kx64eMain3SlvFwRegion2EndAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_3_slv_fw_region_2_end_address_h :: FwRegsImsram32kx64eMain3SlvFwRegion2EndAddressHSpec > ;
#[doc = "The FW Region 2 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_3.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_3_slv_fw_region_2_end_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_3_control (rw) register accessor: The FW Region 3 Control Register defines the control fields for the slave Imsram32kx64e_main_3.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_3_slv_fw_region_3_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_3_slv_fw_region_3_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_3_slv_fw_region_3_control`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_3_control")]
pub type FwRegsImsram32kx64eMain3SlvFwRegion3Control = crate :: Reg < fw_regs_imsram32kx64e_main_3_slv_fw_region_3_control :: FwRegsImsram32kx64eMain3SlvFwRegion3ControlSpec > ;
#[doc = "The FW Region 3 Control Register defines the control fields for the slave Imsram32kx64e_main_3.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_3_slv_fw_region_3_control;
#[doc = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_3_permission_0 (rw) register accessor: The FW Region 3 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_3.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_3_slv_fw_region_3_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_3_slv_fw_region_3_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_3_slv_fw_region_3_permission_0`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_3_permission_0")]
pub type FwRegsImsram32kx64eMain3SlvFwRegion3Permission0 = crate :: Reg < fw_regs_imsram32kx64e_main_3_slv_fw_region_3_permission_0 :: FwRegsImsram32kx64eMain3SlvFwRegion3Permission0Spec > ;
#[doc = "The FW Region 3 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_3.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_3_slv_fw_region_3_permission_0;
#[doc = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_3_permission_1 (rw) register accessor: The FW Region 3 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_3.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_3_slv_fw_region_3_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_3_slv_fw_region_3_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_3_slv_fw_region_3_permission_1`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_3_permission_1")]
pub type FwRegsImsram32kx64eMain3SlvFwRegion3Permission1 = crate :: Reg < fw_regs_imsram32kx64e_main_3_slv_fw_region_3_permission_1 :: FwRegsImsram32kx64eMain3SlvFwRegion3Permission1Spec > ;
#[doc = "The FW Region 3 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_3.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_3_slv_fw_region_3_permission_1;
#[doc = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_3_permission_2 (rw) register accessor: The FW Region 3 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_3.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_3_slv_fw_region_3_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_3_slv_fw_region_3_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_3_slv_fw_region_3_permission_2`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_3_permission_2")]
pub type FwRegsImsram32kx64eMain3SlvFwRegion3Permission2 = crate :: Reg < fw_regs_imsram32kx64e_main_3_slv_fw_region_3_permission_2 :: FwRegsImsram32kx64eMain3SlvFwRegion3Permission2Spec > ;
#[doc = "The FW Region 3 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_3.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_3_slv_fw_region_3_permission_2;
#[doc = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_3_start_address_l (rw) register accessor: The FW Region 3 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_3.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_3_slv_fw_region_3_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_3_slv_fw_region_3_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_3_slv_fw_region_3_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_3_start_address_l")]
pub type FwRegsImsram32kx64eMain3SlvFwRegion3StartAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_3_slv_fw_region_3_start_address_l :: FwRegsImsram32kx64eMain3SlvFwRegion3StartAddressLSpec > ;
#[doc = "The FW Region 3 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_3.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_3_slv_fw_region_3_start_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_3_start_address_h (rw) register accessor: The FW Region 3 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_3.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_3_slv_fw_region_3_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_3_slv_fw_region_3_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_3_slv_fw_region_3_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_3_start_address_h")]
pub type FwRegsImsram32kx64eMain3SlvFwRegion3StartAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_3_slv_fw_region_3_start_address_h :: FwRegsImsram32kx64eMain3SlvFwRegion3StartAddressHSpec > ;
#[doc = "The FW Region 3 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_3.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_3_slv_fw_region_3_start_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_3_end_address_l (rw) register accessor: The FW Region 3 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_3.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_3_slv_fw_region_3_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_3_slv_fw_region_3_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_3_slv_fw_region_3_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_3_end_address_l")]
pub type FwRegsImsram32kx64eMain3SlvFwRegion3EndAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_3_slv_fw_region_3_end_address_l :: FwRegsImsram32kx64eMain3SlvFwRegion3EndAddressLSpec > ;
#[doc = "The FW Region 3 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_3.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_3_slv_fw_region_3_end_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_3_end_address_h (rw) register accessor: The FW Region 3 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_3.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_3_slv_fw_region_3_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_3_slv_fw_region_3_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_3_slv_fw_region_3_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_3_slv_fw_region_3_end_address_h")]
pub type FwRegsImsram32kx64eMain3SlvFwRegion3EndAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_3_slv_fw_region_3_end_address_h :: FwRegsImsram32kx64eMain3SlvFwRegion3EndAddressHSpec > ;
#[doc = "The FW Region 3 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_3.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_3_slv_fw_region_3_end_address_h;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_control (rw) register accessor: The FW Region 0 Control Register defines the control fields for the slave Idmss_am64_main_0.ipcss_vbm_dst region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_control`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_control")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion0Control = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_control :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion0ControlSpec > ;
#[doc = "The FW Region 0 Control Register defines the control fields for the slave Idmss_am64_main_0.ipcss_vbm_dst region 0 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_control;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_permission_0 (rw) register accessor: The FW Region 0 Permission 0 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_permission_0`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_permission_0")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion0Permission0 = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_permission_0 :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion0Permission0Spec > ;
#[doc = "The FW Region 0 Permission 0 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 0 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_permission_0;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_permission_1 (rw) register accessor: The FW Region 0 Permission 1 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_permission_1`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_permission_1")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion0Permission1 = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_permission_1 :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion0Permission1Spec > ;
#[doc = "The FW Region 0 Permission 1 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 0 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_permission_1;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_permission_2 (rw) register accessor: The FW Region 0 Permission 2 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_permission_2`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_permission_2")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion0Permission2 = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_permission_2 :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion0Permission2Spec > ;
#[doc = "The FW Region 0 Permission 2 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 0 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_permission_2;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_start_address_l (rw) register accessor: The FW Region 0 Start Address Low Register defines the start address bits 31 to 0 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_start_address_l")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion0StartAddressL = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_start_address_l :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion0StartAddressLSpec > ;
#[doc = "The FW Region 0 Start Address Low Register defines the start address bits 31 to 0 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 0 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_start_address_l;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_start_address_h (rw) register accessor: The FW Region 0 Start Address High Register defines the start address bits 47 to 32 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_start_address_h")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion0StartAddressH = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_start_address_h :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion0StartAddressHSpec > ;
#[doc = "The FW Region 0 Start Address High Register defines the start address bits 47 to 32 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 0 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_start_address_h;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_end_address_l (rw) register accessor: The FW Region 0 End Address Low Register defines the end address bits 31 to 0 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_end_address_l")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion0EndAddressL = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_end_address_l :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion0EndAddressLSpec > ;
#[doc = "The FW Region 0 End Address Low Register defines the end address bits 31 to 0 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 0 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_end_address_l;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_end_address_h (rw) register accessor: The FW Region 0 End Address High Register defines the end address bits 47 to 32 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_end_address_h")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion0EndAddressH = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_end_address_h :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion0EndAddressHSpec > ;
#[doc = "The FW Region 0 End Address High Register defines the end address bits 47 to 32 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 0 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_0_end_address_h;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_control (rw) register accessor: The FW Region 1 Control Register defines the control fields for the slave Idmss_am64_main_0.ipcss_vbm_dst region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_control`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_control")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion1Control = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_control :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion1ControlSpec > ;
#[doc = "The FW Region 1 Control Register defines the control fields for the slave Idmss_am64_main_0.ipcss_vbm_dst region 1 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_control;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_permission_0 (rw) register accessor: The FW Region 1 Permission 0 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_permission_0`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_permission_0")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion1Permission0 = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_permission_0 :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion1Permission0Spec > ;
#[doc = "The FW Region 1 Permission 0 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 1 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_permission_0;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_permission_1 (rw) register accessor: The FW Region 1 Permission 1 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_permission_1`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_permission_1")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion1Permission1 = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_permission_1 :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion1Permission1Spec > ;
#[doc = "The FW Region 1 Permission 1 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 1 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_permission_1;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_permission_2 (rw) register accessor: The FW Region 1 Permission 2 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_permission_2`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_permission_2")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion1Permission2 = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_permission_2 :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion1Permission2Spec > ;
#[doc = "The FW Region 1 Permission 2 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 1 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_permission_2;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_start_address_l (rw) register accessor: The FW Region 1 Start Address Low Register defines the start address bits 31 to 0 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_start_address_l")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion1StartAddressL = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_start_address_l :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion1StartAddressLSpec > ;
#[doc = "The FW Region 1 Start Address Low Register defines the start address bits 31 to 0 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 1 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_start_address_l;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_start_address_h (rw) register accessor: The FW Region 1 Start Address High Register defines the start address bits 47 to 32 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_start_address_h")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion1StartAddressH = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_start_address_h :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion1StartAddressHSpec > ;
#[doc = "The FW Region 1 Start Address High Register defines the start address bits 47 to 32 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 1 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_start_address_h;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_end_address_l (rw) register accessor: The FW Region 1 End Address Low Register defines the end address bits 31 to 0 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_end_address_l")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion1EndAddressL = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_end_address_l :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion1EndAddressLSpec > ;
#[doc = "The FW Region 1 End Address Low Register defines the end address bits 31 to 0 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 1 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_end_address_l;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_end_address_h (rw) register accessor: The FW Region 1 End Address High Register defines the end address bits 47 to 32 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_end_address_h")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion1EndAddressH = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_end_address_h :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion1EndAddressHSpec > ;
#[doc = "The FW Region 1 End Address High Register defines the end address bits 47 to 32 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 1 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_1_end_address_h;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_control (rw) register accessor: The FW Region 2 Control Register defines the control fields for the slave Idmss_am64_main_0.ipcss_vbm_dst region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_control`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_control")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion2Control = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_control :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion2ControlSpec > ;
#[doc = "The FW Region 2 Control Register defines the control fields for the slave Idmss_am64_main_0.ipcss_vbm_dst region 2 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_control;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_permission_0 (rw) register accessor: The FW Region 2 Permission 0 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_permission_0`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_permission_0")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion2Permission0 = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_permission_0 :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion2Permission0Spec > ;
#[doc = "The FW Region 2 Permission 0 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 2 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_permission_0;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_permission_1 (rw) register accessor: The FW Region 2 Permission 1 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_permission_1`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_permission_1")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion2Permission1 = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_permission_1 :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion2Permission1Spec > ;
#[doc = "The FW Region 2 Permission 1 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 2 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_permission_1;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_permission_2 (rw) register accessor: The FW Region 2 Permission 2 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_permission_2`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_permission_2")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion2Permission2 = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_permission_2 :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion2Permission2Spec > ;
#[doc = "The FW Region 2 Permission 2 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 2 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_permission_2;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_start_address_l (rw) register accessor: The FW Region 2 Start Address Low Register defines the start address bits 31 to 0 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_start_address_l")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion2StartAddressL = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_start_address_l :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion2StartAddressLSpec > ;
#[doc = "The FW Region 2 Start Address Low Register defines the start address bits 31 to 0 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 2 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_start_address_l;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_start_address_h (rw) register accessor: The FW Region 2 Start Address High Register defines the start address bits 47 to 32 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_start_address_h")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion2StartAddressH = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_start_address_h :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion2StartAddressHSpec > ;
#[doc = "The FW Region 2 Start Address High Register defines the start address bits 47 to 32 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 2 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_start_address_h;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_end_address_l (rw) register accessor: The FW Region 2 End Address Low Register defines the end address bits 31 to 0 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_end_address_l")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion2EndAddressL = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_end_address_l :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion2EndAddressLSpec > ;
#[doc = "The FW Region 2 End Address Low Register defines the end address bits 31 to 0 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 2 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_end_address_l;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_end_address_h (rw) register accessor: The FW Region 2 End Address High Register defines the end address bits 47 to 32 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_end_address_h")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion2EndAddressH = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_end_address_h :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion2EndAddressHSpec > ;
#[doc = "The FW Region 2 End Address High Register defines the end address bits 47 to 32 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 2 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_2_end_address_h;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_control (rw) register accessor: The FW Region 3 Control Register defines the control fields for the slave Idmss_am64_main_0.ipcss_vbm_dst region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_control`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_control")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion3Control = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_control :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion3ControlSpec > ;
#[doc = "The FW Region 3 Control Register defines the control fields for the slave Idmss_am64_main_0.ipcss_vbm_dst region 3 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_control;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_permission_0 (rw) register accessor: The FW Region 3 Permission 0 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_permission_0`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_permission_0")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion3Permission0 = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_permission_0 :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion3Permission0Spec > ;
#[doc = "The FW Region 3 Permission 0 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 3 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_permission_0;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_permission_1 (rw) register accessor: The FW Region 3 Permission 1 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_permission_1`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_permission_1")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion3Permission1 = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_permission_1 :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion3Permission1Spec > ;
#[doc = "The FW Region 3 Permission 1 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 3 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_permission_1;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_permission_2 (rw) register accessor: The FW Region 3 Permission 2 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_permission_2`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_permission_2")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion3Permission2 = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_permission_2 :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion3Permission2Spec > ;
#[doc = "The FW Region 3 Permission 2 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 3 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_permission_2;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_start_address_l (rw) register accessor: The FW Region 3 Start Address Low Register defines the start address bits 31 to 0 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_start_address_l")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion3StartAddressL = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_start_address_l :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion3StartAddressLSpec > ;
#[doc = "The FW Region 3 Start Address Low Register defines the start address bits 31 to 0 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 3 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_start_address_l;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_start_address_h (rw) register accessor: The FW Region 3 Start Address High Register defines the start address bits 47 to 32 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_start_address_h")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion3StartAddressH = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_start_address_h :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion3StartAddressHSpec > ;
#[doc = "The FW Region 3 Start Address High Register defines the start address bits 47 to 32 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 3 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_start_address_h;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_end_address_l (rw) register accessor: The FW Region 3 End Address Low Register defines the end address bits 31 to 0 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_end_address_l")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion3EndAddressL = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_end_address_l :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion3EndAddressLSpec > ;
#[doc = "The FW Region 3 End Address Low Register defines the end address bits 31 to 0 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 3 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_end_address_l;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_end_address_h (rw) register accessor: The FW Region 3 End Address High Register defines the end address bits 47 to 32 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_end_address_h")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion3EndAddressH = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_end_address_h :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion3EndAddressHSpec > ;
#[doc = "The FW Region 3 End Address High Register defines the end address bits 47 to 32 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 3 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_3_end_address_h;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_control (rw) register accessor: The FW Region 4 Control Register defines the control fields for the slave Idmss_am64_main_0.ipcss_vbm_dst region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_control`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_control")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion4Control = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_control :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion4ControlSpec > ;
#[doc = "The FW Region 4 Control Register defines the control fields for the slave Idmss_am64_main_0.ipcss_vbm_dst region 4 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_control;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_permission_0 (rw) register accessor: The FW Region 4 Permission 0 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_permission_0`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_permission_0")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion4Permission0 = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_permission_0 :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion4Permission0Spec > ;
#[doc = "The FW Region 4 Permission 0 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 4 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_permission_0;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_permission_1 (rw) register accessor: The FW Region 4 Permission 1 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_permission_1`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_permission_1")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion4Permission1 = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_permission_1 :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion4Permission1Spec > ;
#[doc = "The FW Region 4 Permission 1 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 4 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_permission_1;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_permission_2 (rw) register accessor: The FW Region 4 Permission 2 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_permission_2`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_permission_2")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion4Permission2 = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_permission_2 :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion4Permission2Spec > ;
#[doc = "The FW Region 4 Permission 2 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 4 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_permission_2;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_start_address_l (rw) register accessor: The FW Region 4 Start Address Low Register defines the start address bits 31 to 0 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_start_address_l")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion4StartAddressL = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_start_address_l :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion4StartAddressLSpec > ;
#[doc = "The FW Region 4 Start Address Low Register defines the start address bits 31 to 0 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 4 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_start_address_l;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_start_address_h (rw) register accessor: The FW Region 4 Start Address High Register defines the start address bits 47 to 32 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_start_address_h")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion4StartAddressH = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_start_address_h :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion4StartAddressHSpec > ;
#[doc = "The FW Region 4 Start Address High Register defines the start address bits 47 to 32 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 4 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_start_address_h;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_end_address_l (rw) register accessor: The FW Region 4 End Address Low Register defines the end address bits 31 to 0 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_end_address_l")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion4EndAddressL = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_end_address_l :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion4EndAddressLSpec > ;
#[doc = "The FW Region 4 End Address Low Register defines the end address bits 31 to 0 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 4 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_end_address_l;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_end_address_h (rw) register accessor: The FW Region 4 End Address High Register defines the end address bits 47 to 32 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_end_address_h")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion4EndAddressH = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_end_address_h :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion4EndAddressHSpec > ;
#[doc = "The FW Region 4 End Address High Register defines the end address bits 47 to 32 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 4 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_4_end_address_h;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_control (rw) register accessor: The FW Region 5 Control Register defines the control fields for the slave Idmss_am64_main_0.ipcss_vbm_dst region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_control`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_control")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion5Control = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_control :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion5ControlSpec > ;
#[doc = "The FW Region 5 Control Register defines the control fields for the slave Idmss_am64_main_0.ipcss_vbm_dst region 5 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_control;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_permission_0 (rw) register accessor: The FW Region 5 Permission 0 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_permission_0`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_permission_0")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion5Permission0 = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_permission_0 :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion5Permission0Spec > ;
#[doc = "The FW Region 5 Permission 0 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 5 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_permission_0;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_permission_1 (rw) register accessor: The FW Region 5 Permission 1 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_permission_1`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_permission_1")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion5Permission1 = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_permission_1 :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion5Permission1Spec > ;
#[doc = "The FW Region 5 Permission 1 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 5 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_permission_1;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_permission_2 (rw) register accessor: The FW Region 5 Permission 2 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_permission_2`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_permission_2")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion5Permission2 = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_permission_2 :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion5Permission2Spec > ;
#[doc = "The FW Region 5 Permission 2 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 5 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_permission_2;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_start_address_l (rw) register accessor: The FW Region 5 Start Address Low Register defines the start address bits 31 to 0 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_start_address_l")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion5StartAddressL = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_start_address_l :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion5StartAddressLSpec > ;
#[doc = "The FW Region 5 Start Address Low Register defines the start address bits 31 to 0 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 5 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_start_address_l;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_start_address_h (rw) register accessor: The FW Region 5 Start Address High Register defines the start address bits 47 to 32 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_start_address_h")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion5StartAddressH = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_start_address_h :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion5StartAddressHSpec > ;
#[doc = "The FW Region 5 Start Address High Register defines the start address bits 47 to 32 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 5 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_start_address_h;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_end_address_l (rw) register accessor: The FW Region 5 End Address Low Register defines the end address bits 31 to 0 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_end_address_l")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion5EndAddressL = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_end_address_l :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion5EndAddressLSpec > ;
#[doc = "The FW Region 5 End Address Low Register defines the end address bits 31 to 0 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 5 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_end_address_l;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_end_address_h (rw) register accessor: The FW Region 5 End Address High Register defines the end address bits 47 to 32 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_end_address_h")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion5EndAddressH = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_end_address_h :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion5EndAddressHSpec > ;
#[doc = "The FW Region 5 End Address High Register defines the end address bits 47 to 32 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 5 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_5_end_address_h;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_control (rw) register accessor: The FW Region 6 Control Register defines the control fields for the slave Idmss_am64_main_0.ipcss_vbm_dst region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_control`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_control")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion6Control = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_control :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion6ControlSpec > ;
#[doc = "The FW Region 6 Control Register defines the control fields for the slave Idmss_am64_main_0.ipcss_vbm_dst region 6 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_control;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_permission_0 (rw) register accessor: The FW Region 6 Permission 0 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_permission_0`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_permission_0")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion6Permission0 = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_permission_0 :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion6Permission0Spec > ;
#[doc = "The FW Region 6 Permission 0 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 6 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_permission_0;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_permission_1 (rw) register accessor: The FW Region 6 Permission 1 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_permission_1`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_permission_1")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion6Permission1 = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_permission_1 :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion6Permission1Spec > ;
#[doc = "The FW Region 6 Permission 1 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 6 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_permission_1;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_permission_2 (rw) register accessor: The FW Region 6 Permission 2 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_permission_2`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_permission_2")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion6Permission2 = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_permission_2 :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion6Permission2Spec > ;
#[doc = "The FW Region 6 Permission 2 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 6 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_permission_2;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_start_address_l (rw) register accessor: The FW Region 6 Start Address Low Register defines the start address bits 31 to 0 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_start_address_l")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion6StartAddressL = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_start_address_l :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion6StartAddressLSpec > ;
#[doc = "The FW Region 6 Start Address Low Register defines the start address bits 31 to 0 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 6 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_start_address_l;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_start_address_h (rw) register accessor: The FW Region 6 Start Address High Register defines the start address bits 47 to 32 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_start_address_h")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion6StartAddressH = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_start_address_h :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion6StartAddressHSpec > ;
#[doc = "The FW Region 6 Start Address High Register defines the start address bits 47 to 32 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 6 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_start_address_h;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_end_address_l (rw) register accessor: The FW Region 6 End Address Low Register defines the end address bits 31 to 0 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_end_address_l")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion6EndAddressL = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_end_address_l :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion6EndAddressLSpec > ;
#[doc = "The FW Region 6 End Address Low Register defines the end address bits 31 to 0 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 6 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_end_address_l;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_end_address_h (rw) register accessor: The FW Region 6 End Address High Register defines the end address bits 47 to 32 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_end_address_h")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion6EndAddressH = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_end_address_h :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion6EndAddressHSpec > ;
#[doc = "The FW Region 6 End Address High Register defines the end address bits 47 to 32 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 6 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_6_end_address_h;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_control (rw) register accessor: The FW Region 7 Control Register defines the control fields for the slave Idmss_am64_main_0.ipcss_vbm_dst region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_control`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_control")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion7Control = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_control :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion7ControlSpec > ;
#[doc = "The FW Region 7 Control Register defines the control fields for the slave Idmss_am64_main_0.ipcss_vbm_dst region 7 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_control;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_permission_0 (rw) register accessor: The FW Region 7 Permission 0 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_permission_0`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_permission_0")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion7Permission0 = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_permission_0 :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion7Permission0Spec > ;
#[doc = "The FW Region 7 Permission 0 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 7 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_permission_0;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_permission_1 (rw) register accessor: The FW Region 7 Permission 1 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_permission_1`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_permission_1")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion7Permission1 = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_permission_1 :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion7Permission1Spec > ;
#[doc = "The FW Region 7 Permission 1 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 7 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_permission_1;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_permission_2 (rw) register accessor: The FW Region 7 Permission 2 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_permission_2`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_permission_2")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion7Permission2 = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_permission_2 :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion7Permission2Spec > ;
#[doc = "The FW Region 7 Permission 2 Register defines the permissions for the slave Idmss_am64_main_0.ipcss_vbm_dst region 7 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_permission_2;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_start_address_l (rw) register accessor: The FW Region 7 Start Address Low Register defines the start address bits 31 to 0 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_start_address_l")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion7StartAddressL = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_start_address_l :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion7StartAddressLSpec > ;
#[doc = "The FW Region 7 Start Address Low Register defines the start address bits 31 to 0 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 7 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_start_address_l;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_start_address_h (rw) register accessor: The FW Region 7 Start Address High Register defines the start address bits 47 to 32 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_start_address_h")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion7StartAddressH = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_start_address_h :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion7StartAddressHSpec > ;
#[doc = "The FW Region 7 Start Address High Register defines the start address bits 47 to 32 for the slave Idmss_am64_main_0.ipcss_vbm_dst region 7 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_start_address_h;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_end_address_l (rw) register accessor: The FW Region 7 End Address Low Register defines the end address bits 31 to 0 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_end_address_l")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion7EndAddressL = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_end_address_l :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion7EndAddressLSpec > ;
#[doc = "The FW Region 7 End Address Low Register defines the end address bits 31 to 0 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 7 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_end_address_l;
#[doc = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_end_address_h (rw) register accessor: The FW Region 7 End Address High Register defines the end address bits 47 to 32 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_end_address_h")]
pub type FwRegsIdmssAm64Main0IpcssVbmDstFwRegion7EndAddressH = crate :: Reg < fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_end_address_h :: FwRegsIdmssAm64Main0IpcssVbmDstFwRegion7EndAddressHSpec > ;
#[doc = "The FW Region 7 End Address High Register defines the end address bits 47 to 32 to include for the slave Idmss_am64_main_0.ipcss_vbm_dst region 7 firewall."]
pub mod fw_regs_idmss_am64_main_0_ipcss_vbm_dst_fw_region_7_end_address_h;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_control (rw) register accessor: The FW Region 0 Control Register defines the control fields for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_control`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_control")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion0Control = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_control :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion0ControlSpec > ;
#[doc = "The FW Region 0 Control Register defines the control fields for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 0 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_control;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_permission_0 (rw) register accessor: The FW Region 0 Permission 0 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_permission_0`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_permission_0")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion0Permission0 = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_permission_0 :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion0Permission0Spec > ;
#[doc = "The FW Region 0 Permission 0 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 0 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_permission_0;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_permission_1 (rw) register accessor: The FW Region 0 Permission 1 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_permission_1`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_permission_1")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion0Permission1 = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_permission_1 :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion0Permission1Spec > ;
#[doc = "The FW Region 0 Permission 1 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 0 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_permission_1;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_permission_2 (rw) register accessor: The FW Region 0 Permission 2 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_permission_2`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_permission_2")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion0Permission2 = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_permission_2 :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion0Permission2Spec > ;
#[doc = "The FW Region 0 Permission 2 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 0 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_permission_2;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_start_address_l (rw) register accessor: The FW Region 0 Start Address Low Register defines the start address bits 31 to 0 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_start_address_l")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion0StartAddressL = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_start_address_l :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion0StartAddressLSpec > ;
#[doc = "The FW Region 0 Start Address Low Register defines the start address bits 31 to 0 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 0 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_start_address_l;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_start_address_h (rw) register accessor: The FW Region 0 Start Address High Register defines the start address bits 47 to 32 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_start_address_h")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion0StartAddressH = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_start_address_h :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion0StartAddressHSpec > ;
#[doc = "The FW Region 0 Start Address High Register defines the start address bits 47 to 32 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 0 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_start_address_h;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_end_address_l (rw) register accessor: The FW Region 0 End Address Low Register defines the end address bits 31 to 0 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_end_address_l")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion0EndAddressL = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_end_address_l :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion0EndAddressLSpec > ;
#[doc = "The FW Region 0 End Address Low Register defines the end address bits 31 to 0 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 0 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_end_address_l;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_end_address_h (rw) register accessor: The FW Region 0 End Address High Register defines the end address bits 47 to 32 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_end_address_h")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion0EndAddressH = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_end_address_h :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion0EndAddressHSpec > ;
#[doc = "The FW Region 0 End Address High Register defines the end address bits 47 to 32 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 0 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_0_end_address_h;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_control (rw) register accessor: The FW Region 1 Control Register defines the control fields for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_control`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_control")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion1Control = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_control :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion1ControlSpec > ;
#[doc = "The FW Region 1 Control Register defines the control fields for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 1 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_control;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_permission_0 (rw) register accessor: The FW Region 1 Permission 0 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_permission_0`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_permission_0")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion1Permission0 = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_permission_0 :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion1Permission0Spec > ;
#[doc = "The FW Region 1 Permission 0 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 1 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_permission_0;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_permission_1 (rw) register accessor: The FW Region 1 Permission 1 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_permission_1`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_permission_1")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion1Permission1 = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_permission_1 :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion1Permission1Spec > ;
#[doc = "The FW Region 1 Permission 1 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 1 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_permission_1;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_permission_2 (rw) register accessor: The FW Region 1 Permission 2 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_permission_2`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_permission_2")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion1Permission2 = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_permission_2 :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion1Permission2Spec > ;
#[doc = "The FW Region 1 Permission 2 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 1 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_permission_2;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_start_address_l (rw) register accessor: The FW Region 1 Start Address Low Register defines the start address bits 31 to 0 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_start_address_l")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion1StartAddressL = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_start_address_l :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion1StartAddressLSpec > ;
#[doc = "The FW Region 1 Start Address Low Register defines the start address bits 31 to 0 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 1 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_start_address_l;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_start_address_h (rw) register accessor: The FW Region 1 Start Address High Register defines the start address bits 47 to 32 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_start_address_h")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion1StartAddressH = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_start_address_h :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion1StartAddressHSpec > ;
#[doc = "The FW Region 1 Start Address High Register defines the start address bits 47 to 32 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 1 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_start_address_h;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_end_address_l (rw) register accessor: The FW Region 1 End Address Low Register defines the end address bits 31 to 0 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_end_address_l")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion1EndAddressL = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_end_address_l :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion1EndAddressLSpec > ;
#[doc = "The FW Region 1 End Address Low Register defines the end address bits 31 to 0 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 1 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_end_address_l;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_end_address_h (rw) register accessor: The FW Region 1 End Address High Register defines the end address bits 47 to 32 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_end_address_h")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion1EndAddressH = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_end_address_h :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion1EndAddressHSpec > ;
#[doc = "The FW Region 1 End Address High Register defines the end address bits 47 to 32 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 1 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_1_end_address_h;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_control (rw) register accessor: The FW Region 2 Control Register defines the control fields for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_control`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_control")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion2Control = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_control :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion2ControlSpec > ;
#[doc = "The FW Region 2 Control Register defines the control fields for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 2 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_control;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_permission_0 (rw) register accessor: The FW Region 2 Permission 0 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_permission_0`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_permission_0")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion2Permission0 = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_permission_0 :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion2Permission0Spec > ;
#[doc = "The FW Region 2 Permission 0 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 2 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_permission_0;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_permission_1 (rw) register accessor: The FW Region 2 Permission 1 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_permission_1`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_permission_1")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion2Permission1 = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_permission_1 :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion2Permission1Spec > ;
#[doc = "The FW Region 2 Permission 1 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 2 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_permission_1;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_permission_2 (rw) register accessor: The FW Region 2 Permission 2 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_permission_2`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_permission_2")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion2Permission2 = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_permission_2 :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion2Permission2Spec > ;
#[doc = "The FW Region 2 Permission 2 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 2 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_permission_2;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_start_address_l (rw) register accessor: The FW Region 2 Start Address Low Register defines the start address bits 31 to 0 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_start_address_l")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion2StartAddressL = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_start_address_l :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion2StartAddressLSpec > ;
#[doc = "The FW Region 2 Start Address Low Register defines the start address bits 31 to 0 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 2 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_start_address_l;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_start_address_h (rw) register accessor: The FW Region 2 Start Address High Register defines the start address bits 47 to 32 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_start_address_h")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion2StartAddressH = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_start_address_h :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion2StartAddressHSpec > ;
#[doc = "The FW Region 2 Start Address High Register defines the start address bits 47 to 32 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 2 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_start_address_h;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_end_address_l (rw) register accessor: The FW Region 2 End Address Low Register defines the end address bits 31 to 0 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_end_address_l")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion2EndAddressL = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_end_address_l :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion2EndAddressLSpec > ;
#[doc = "The FW Region 2 End Address Low Register defines the end address bits 31 to 0 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 2 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_end_address_l;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_end_address_h (rw) register accessor: The FW Region 2 End Address High Register defines the end address bits 47 to 32 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_end_address_h")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion2EndAddressH = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_end_address_h :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion2EndAddressHSpec > ;
#[doc = "The FW Region 2 End Address High Register defines the end address bits 47 to 32 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 2 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_2_end_address_h;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_control (rw) register accessor: The FW Region 3 Control Register defines the control fields for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_control`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_control")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion3Control = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_control :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion3ControlSpec > ;
#[doc = "The FW Region 3 Control Register defines the control fields for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 3 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_control;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_permission_0 (rw) register accessor: The FW Region 3 Permission 0 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_permission_0`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_permission_0")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion3Permission0 = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_permission_0 :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion3Permission0Spec > ;
#[doc = "The FW Region 3 Permission 0 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 3 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_permission_0;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_permission_1 (rw) register accessor: The FW Region 3 Permission 1 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_permission_1`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_permission_1")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion3Permission1 = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_permission_1 :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion3Permission1Spec > ;
#[doc = "The FW Region 3 Permission 1 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 3 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_permission_1;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_permission_2 (rw) register accessor: The FW Region 3 Permission 2 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_permission_2`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_permission_2")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion3Permission2 = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_permission_2 :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion3Permission2Spec > ;
#[doc = "The FW Region 3 Permission 2 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 3 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_permission_2;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_start_address_l (rw) register accessor: The FW Region 3 Start Address Low Register defines the start address bits 31 to 0 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_start_address_l")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion3StartAddressL = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_start_address_l :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion3StartAddressLSpec > ;
#[doc = "The FW Region 3 Start Address Low Register defines the start address bits 31 to 0 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 3 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_start_address_l;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_start_address_h (rw) register accessor: The FW Region 3 Start Address High Register defines the start address bits 47 to 32 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_start_address_h")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion3StartAddressH = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_start_address_h :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion3StartAddressHSpec > ;
#[doc = "The FW Region 3 Start Address High Register defines the start address bits 47 to 32 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 3 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_start_address_h;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_end_address_l (rw) register accessor: The FW Region 3 End Address Low Register defines the end address bits 31 to 0 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_end_address_l")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion3EndAddressL = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_end_address_l :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion3EndAddressLSpec > ;
#[doc = "The FW Region 3 End Address Low Register defines the end address bits 31 to 0 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 3 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_end_address_l;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_end_address_h (rw) register accessor: The FW Region 3 End Address High Register defines the end address bits 47 to 32 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_end_address_h")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion3EndAddressH = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_end_address_h :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion3EndAddressHSpec > ;
#[doc = "The FW Region 3 End Address High Register defines the end address bits 47 to 32 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 3 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_3_end_address_h;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_control (rw) register accessor: The FW Region 4 Control Register defines the control fields for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_control`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_control")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion4Control = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_control :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion4ControlSpec > ;
#[doc = "The FW Region 4 Control Register defines the control fields for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 4 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_control;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_permission_0 (rw) register accessor: The FW Region 4 Permission 0 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_permission_0`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_permission_0")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion4Permission0 = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_permission_0 :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion4Permission0Spec > ;
#[doc = "The FW Region 4 Permission 0 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 4 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_permission_0;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_permission_1 (rw) register accessor: The FW Region 4 Permission 1 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_permission_1`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_permission_1")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion4Permission1 = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_permission_1 :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion4Permission1Spec > ;
#[doc = "The FW Region 4 Permission 1 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 4 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_permission_1;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_permission_2 (rw) register accessor: The FW Region 4 Permission 2 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_permission_2`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_permission_2")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion4Permission2 = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_permission_2 :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion4Permission2Spec > ;
#[doc = "The FW Region 4 Permission 2 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 4 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_permission_2;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_start_address_l (rw) register accessor: The FW Region 4 Start Address Low Register defines the start address bits 31 to 0 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_start_address_l")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion4StartAddressL = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_start_address_l :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion4StartAddressLSpec > ;
#[doc = "The FW Region 4 Start Address Low Register defines the start address bits 31 to 0 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 4 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_start_address_l;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_start_address_h (rw) register accessor: The FW Region 4 Start Address High Register defines the start address bits 47 to 32 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_start_address_h")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion4StartAddressH = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_start_address_h :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion4StartAddressHSpec > ;
#[doc = "The FW Region 4 Start Address High Register defines the start address bits 47 to 32 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 4 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_start_address_h;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_end_address_l (rw) register accessor: The FW Region 4 End Address Low Register defines the end address bits 31 to 0 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_end_address_l")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion4EndAddressL = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_end_address_l :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion4EndAddressLSpec > ;
#[doc = "The FW Region 4 End Address Low Register defines the end address bits 31 to 0 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 4 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_end_address_l;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_end_address_h (rw) register accessor: The FW Region 4 End Address High Register defines the end address bits 47 to 32 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_end_address_h")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion4EndAddressH = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_end_address_h :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion4EndAddressHSpec > ;
#[doc = "The FW Region 4 End Address High Register defines the end address bits 47 to 32 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 4 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_4_end_address_h;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_control (rw) register accessor: The FW Region 5 Control Register defines the control fields for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_control`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_control")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion5Control = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_control :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion5ControlSpec > ;
#[doc = "The FW Region 5 Control Register defines the control fields for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 5 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_control;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_permission_0 (rw) register accessor: The FW Region 5 Permission 0 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_permission_0`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_permission_0")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion5Permission0 = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_permission_0 :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion5Permission0Spec > ;
#[doc = "The FW Region 5 Permission 0 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 5 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_permission_0;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_permission_1 (rw) register accessor: The FW Region 5 Permission 1 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_permission_1`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_permission_1")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion5Permission1 = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_permission_1 :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion5Permission1Spec > ;
#[doc = "The FW Region 5 Permission 1 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 5 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_permission_1;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_permission_2 (rw) register accessor: The FW Region 5 Permission 2 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_permission_2`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_permission_2")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion5Permission2 = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_permission_2 :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion5Permission2Spec > ;
#[doc = "The FW Region 5 Permission 2 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 5 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_permission_2;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_start_address_l (rw) register accessor: The FW Region 5 Start Address Low Register defines the start address bits 31 to 0 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_start_address_l")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion5StartAddressL = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_start_address_l :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion5StartAddressLSpec > ;
#[doc = "The FW Region 5 Start Address Low Register defines the start address bits 31 to 0 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 5 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_start_address_l;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_start_address_h (rw) register accessor: The FW Region 5 Start Address High Register defines the start address bits 47 to 32 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_start_address_h")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion5StartAddressH = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_start_address_h :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion5StartAddressHSpec > ;
#[doc = "The FW Region 5 Start Address High Register defines the start address bits 47 to 32 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 5 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_start_address_h;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_end_address_l (rw) register accessor: The FW Region 5 End Address Low Register defines the end address bits 31 to 0 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_end_address_l")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion5EndAddressL = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_end_address_l :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion5EndAddressLSpec > ;
#[doc = "The FW Region 5 End Address Low Register defines the end address bits 31 to 0 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 5 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_end_address_l;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_end_address_h (rw) register accessor: The FW Region 5 End Address High Register defines the end address bits 47 to 32 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_end_address_h")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion5EndAddressH = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_end_address_h :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion5EndAddressHSpec > ;
#[doc = "The FW Region 5 End Address High Register defines the end address bits 47 to 32 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 5 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_5_end_address_h;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_control (rw) register accessor: The FW Region 6 Control Register defines the control fields for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_control`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_control")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion6Control = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_control :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion6ControlSpec > ;
#[doc = "The FW Region 6 Control Register defines the control fields for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 6 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_control;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_permission_0 (rw) register accessor: The FW Region 6 Permission 0 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_permission_0`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_permission_0")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion6Permission0 = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_permission_0 :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion6Permission0Spec > ;
#[doc = "The FW Region 6 Permission 0 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 6 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_permission_0;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_permission_1 (rw) register accessor: The FW Region 6 Permission 1 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_permission_1`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_permission_1")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion6Permission1 = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_permission_1 :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion6Permission1Spec > ;
#[doc = "The FW Region 6 Permission 1 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 6 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_permission_1;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_permission_2 (rw) register accessor: The FW Region 6 Permission 2 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_permission_2`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_permission_2")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion6Permission2 = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_permission_2 :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion6Permission2Spec > ;
#[doc = "The FW Region 6 Permission 2 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 6 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_permission_2;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_start_address_l (rw) register accessor: The FW Region 6 Start Address Low Register defines the start address bits 31 to 0 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_start_address_l")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion6StartAddressL = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_start_address_l :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion6StartAddressLSpec > ;
#[doc = "The FW Region 6 Start Address Low Register defines the start address bits 31 to 0 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 6 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_start_address_l;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_start_address_h (rw) register accessor: The FW Region 6 Start Address High Register defines the start address bits 47 to 32 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_start_address_h")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion6StartAddressH = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_start_address_h :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion6StartAddressHSpec > ;
#[doc = "The FW Region 6 Start Address High Register defines the start address bits 47 to 32 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 6 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_start_address_h;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_end_address_l (rw) register accessor: The FW Region 6 End Address Low Register defines the end address bits 31 to 0 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_end_address_l")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion6EndAddressL = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_end_address_l :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion6EndAddressLSpec > ;
#[doc = "The FW Region 6 End Address Low Register defines the end address bits 31 to 0 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 6 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_end_address_l;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_end_address_h (rw) register accessor: The FW Region 6 End Address High Register defines the end address bits 47 to 32 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_end_address_h")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion6EndAddressH = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_end_address_h :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion6EndAddressHSpec > ;
#[doc = "The FW Region 6 End Address High Register defines the end address bits 47 to 32 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 6 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_6_end_address_h;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_control (rw) register accessor: The FW Region 7 Control Register defines the control fields for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_control`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_control")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion7Control = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_control :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion7ControlSpec > ;
#[doc = "The FW Region 7 Control Register defines the control fields for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 7 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_control;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_permission_0 (rw) register accessor: The FW Region 7 Permission 0 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_permission_0`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_permission_0")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion7Permission0 = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_permission_0 :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion7Permission0Spec > ;
#[doc = "The FW Region 7 Permission 0 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 7 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_permission_0;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_permission_1 (rw) register accessor: The FW Region 7 Permission 1 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_permission_1`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_permission_1")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion7Permission1 = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_permission_1 :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion7Permission1Spec > ;
#[doc = "The FW Region 7 Permission 1 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 7 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_permission_1;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_permission_2 (rw) register accessor: The FW Region 7 Permission 2 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_permission_2`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_permission_2")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion7Permission2 = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_permission_2 :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion7Permission2Spec > ;
#[doc = "The FW Region 7 Permission 2 Register defines the permissions for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 7 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_permission_2;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_start_address_l (rw) register accessor: The FW Region 7 Start Address Low Register defines the start address bits 31 to 0 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_start_address_l")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion7StartAddressL = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_start_address_l :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion7StartAddressLSpec > ;
#[doc = "The FW Region 7 Start Address Low Register defines the start address bits 31 to 0 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 7 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_start_address_l;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_start_address_h (rw) register accessor: The FW Region 7 Start Address High Register defines the start address bits 47 to 32 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_start_address_h")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion7StartAddressH = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_start_address_h :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion7StartAddressHSpec > ;
#[doc = "The FW Region 7 Start Address High Register defines the start address bits 47 to 32 for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 7 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_start_address_h;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_end_address_l (rw) register accessor: The FW Region 7 End Address Low Register defines the end address bits 31 to 0 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_end_address_l")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion7EndAddressL = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_end_address_l :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion7EndAddressLSpec > ;
#[doc = "The FW Region 7 End Address Low Register defines the end address bits 31 to 0 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 7 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_end_address_l;
#[doc = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_end_address_h (rw) register accessor: The FW Region 7 End Address High Register defines the end address bits 47 to 32 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_end_address_h")]
pub type FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion7EndAddressH = crate :: Reg < fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_end_address_h :: FwRegsIexportVbusm32bSlvMain2mcuSlvFwRegion7EndAddressHSpec > ;
#[doc = "The FW Region 7 End Address High Register defines the end address bits 47 to 32 to include for the slave Iexport_vbusm_32b_slv_main2mcu.slv region 7 firewall."]
pub mod fw_regs_iexport_vbusm_32b_slv_main2mcu_slv_fw_region_7_end_address_h;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_control (rw) register accessor: The FW Region 0 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_control`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_control")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion0Control = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_control :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion0ControlSpec > ;
#[doc = "The FW Region 0 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 0 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_control;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_permission_0 (rw) register accessor: The FW Region 0 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_permission_0`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_permission_0")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion0Permission0 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_permission_0 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion0Permission0Spec > ;
#[doc = "The FW Region 0 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 0 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_permission_0;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_permission_1 (rw) register accessor: The FW Region 0 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_permission_1`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_permission_1")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion0Permission1 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_permission_1 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion0Permission1Spec > ;
#[doc = "The FW Region 0 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 0 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_permission_1;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_permission_2 (rw) register accessor: The FW Region 0 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_permission_2`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_permission_2")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion0Permission2 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_permission_2 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion0Permission2Spec > ;
#[doc = "The FW Region 0 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 0 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_permission_2;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_start_address_l (rw) register accessor: The FW Region 0 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_start_address_l`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_start_address_l")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion0StartAddressL = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_start_address_l :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion0StartAddressLSpec > ;
#[doc = "The FW Region 0 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 0 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_start_address_l;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_start_address_h (rw) register accessor: The FW Region 0 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_start_address_h`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_start_address_h")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion0StartAddressH = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_start_address_h :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion0StartAddressHSpec > ;
#[doc = "The FW Region 0 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 0 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_start_address_h;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_end_address_l (rw) register accessor: The FW Region 0 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_end_address_l`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_end_address_l")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion0EndAddressL = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_end_address_l :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion0EndAddressLSpec > ;
#[doc = "The FW Region 0 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 0 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_end_address_l;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_end_address_h (rw) register accessor: The FW Region 0 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_end_address_h`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_end_address_h")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion0EndAddressH = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_end_address_h :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion0EndAddressHSpec > ;
#[doc = "The FW Region 0 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 0 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_0_end_address_h;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_control (rw) register accessor: The FW Region 1 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_control`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_control")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion1Control = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_control :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion1ControlSpec > ;
#[doc = "The FW Region 1 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 1 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_control;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_permission_0 (rw) register accessor: The FW Region 1 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_permission_0`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_permission_0")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion1Permission0 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_permission_0 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion1Permission0Spec > ;
#[doc = "The FW Region 1 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 1 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_permission_0;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_permission_1 (rw) register accessor: The FW Region 1 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_permission_1`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_permission_1")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion1Permission1 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_permission_1 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion1Permission1Spec > ;
#[doc = "The FW Region 1 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 1 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_permission_1;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_permission_2 (rw) register accessor: The FW Region 1 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_permission_2`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_permission_2")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion1Permission2 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_permission_2 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion1Permission2Spec > ;
#[doc = "The FW Region 1 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 1 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_permission_2;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_start_address_l (rw) register accessor: The FW Region 1 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_start_address_l`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_start_address_l")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion1StartAddressL = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_start_address_l :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion1StartAddressLSpec > ;
#[doc = "The FW Region 1 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 1 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_start_address_l;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_start_address_h (rw) register accessor: The FW Region 1 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_start_address_h`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_start_address_h")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion1StartAddressH = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_start_address_h :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion1StartAddressHSpec > ;
#[doc = "The FW Region 1 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 1 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_start_address_h;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_end_address_l (rw) register accessor: The FW Region 1 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_end_address_l`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_end_address_l")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion1EndAddressL = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_end_address_l :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion1EndAddressLSpec > ;
#[doc = "The FW Region 1 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 1 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_end_address_l;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_end_address_h (rw) register accessor: The FW Region 1 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_end_address_h`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_end_address_h")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion1EndAddressH = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_end_address_h :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion1EndAddressHSpec > ;
#[doc = "The FW Region 1 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 1 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_1_end_address_h;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_control (rw) register accessor: The FW Region 2 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_control`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_control")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion2Control = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_control :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion2ControlSpec > ;
#[doc = "The FW Region 2 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 2 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_control;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_permission_0 (rw) register accessor: The FW Region 2 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_permission_0`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_permission_0")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion2Permission0 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_permission_0 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion2Permission0Spec > ;
#[doc = "The FW Region 2 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 2 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_permission_0;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_permission_1 (rw) register accessor: The FW Region 2 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_permission_1`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_permission_1")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion2Permission1 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_permission_1 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion2Permission1Spec > ;
#[doc = "The FW Region 2 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 2 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_permission_1;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_permission_2 (rw) register accessor: The FW Region 2 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_permission_2`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_permission_2")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion2Permission2 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_permission_2 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion2Permission2Spec > ;
#[doc = "The FW Region 2 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 2 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_permission_2;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_start_address_l (rw) register accessor: The FW Region 2 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_start_address_l`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_start_address_l")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion2StartAddressL = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_start_address_l :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion2StartAddressLSpec > ;
#[doc = "The FW Region 2 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 2 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_start_address_l;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_start_address_h (rw) register accessor: The FW Region 2 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_start_address_h`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_start_address_h")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion2StartAddressH = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_start_address_h :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion2StartAddressHSpec > ;
#[doc = "The FW Region 2 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 2 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_start_address_h;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_end_address_l (rw) register accessor: The FW Region 2 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_end_address_l`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_end_address_l")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion2EndAddressL = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_end_address_l :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion2EndAddressLSpec > ;
#[doc = "The FW Region 2 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 2 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_end_address_l;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_end_address_h (rw) register accessor: The FW Region 2 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_end_address_h`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_end_address_h")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion2EndAddressH = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_end_address_h :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion2EndAddressHSpec > ;
#[doc = "The FW Region 2 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 2 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_2_end_address_h;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_control (rw) register accessor: The FW Region 3 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_control`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_control")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion3Control = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_control :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion3ControlSpec > ;
#[doc = "The FW Region 3 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 3 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_control;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_permission_0 (rw) register accessor: The FW Region 3 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_permission_0`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_permission_0")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion3Permission0 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_permission_0 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion3Permission0Spec > ;
#[doc = "The FW Region 3 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 3 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_permission_0;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_permission_1 (rw) register accessor: The FW Region 3 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_permission_1`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_permission_1")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion3Permission1 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_permission_1 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion3Permission1Spec > ;
#[doc = "The FW Region 3 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 3 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_permission_1;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_permission_2 (rw) register accessor: The FW Region 3 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_permission_2`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_permission_2")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion3Permission2 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_permission_2 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion3Permission2Spec > ;
#[doc = "The FW Region 3 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 3 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_permission_2;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_start_address_l (rw) register accessor: The FW Region 3 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_start_address_l`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_start_address_l")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion3StartAddressL = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_start_address_l :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion3StartAddressLSpec > ;
#[doc = "The FW Region 3 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 3 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_start_address_l;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_start_address_h (rw) register accessor: The FW Region 3 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_start_address_h`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_start_address_h")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion3StartAddressH = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_start_address_h :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion3StartAddressHSpec > ;
#[doc = "The FW Region 3 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 3 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_start_address_h;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_end_address_l (rw) register accessor: The FW Region 3 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_end_address_l`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_end_address_l")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion3EndAddressL = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_end_address_l :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion3EndAddressLSpec > ;
#[doc = "The FW Region 3 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 3 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_end_address_l;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_end_address_h (rw) register accessor: The FW Region 3 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_end_address_h`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_end_address_h")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion3EndAddressH = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_end_address_h :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion3EndAddressHSpec > ;
#[doc = "The FW Region 3 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 3 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_3_end_address_h;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_control (rw) register accessor: The FW Region 4 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_control`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_control")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion4Control = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_control :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion4ControlSpec > ;
#[doc = "The FW Region 4 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 4 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_control;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_permission_0 (rw) register accessor: The FW Region 4 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_permission_0`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_permission_0")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion4Permission0 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_permission_0 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion4Permission0Spec > ;
#[doc = "The FW Region 4 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 4 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_permission_0;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_permission_1 (rw) register accessor: The FW Region 4 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_permission_1`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_permission_1")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion4Permission1 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_permission_1 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion4Permission1Spec > ;
#[doc = "The FW Region 4 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 4 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_permission_1;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_permission_2 (rw) register accessor: The FW Region 4 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_permission_2`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_permission_2")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion4Permission2 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_permission_2 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion4Permission2Spec > ;
#[doc = "The FW Region 4 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 4 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_permission_2;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_start_address_l (rw) register accessor: The FW Region 4 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_start_address_l`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_start_address_l")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion4StartAddressL = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_start_address_l :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion4StartAddressLSpec > ;
#[doc = "The FW Region 4 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 4 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_start_address_l;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_start_address_h (rw) register accessor: The FW Region 4 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_start_address_h`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_start_address_h")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion4StartAddressH = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_start_address_h :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion4StartAddressHSpec > ;
#[doc = "The FW Region 4 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 4 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_start_address_h;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_end_address_l (rw) register accessor: The FW Region 4 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_end_address_l`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_end_address_l")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion4EndAddressL = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_end_address_l :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion4EndAddressLSpec > ;
#[doc = "The FW Region 4 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 4 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_end_address_l;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_end_address_h (rw) register accessor: The FW Region 4 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_end_address_h`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_end_address_h")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion4EndAddressH = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_end_address_h :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion4EndAddressHSpec > ;
#[doc = "The FW Region 4 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 4 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_4_end_address_h;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_control (rw) register accessor: The FW Region 5 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_control`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_control")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion5Control = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_control :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion5ControlSpec > ;
#[doc = "The FW Region 5 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 5 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_control;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_permission_0 (rw) register accessor: The FW Region 5 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_permission_0`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_permission_0")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion5Permission0 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_permission_0 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion5Permission0Spec > ;
#[doc = "The FW Region 5 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 5 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_permission_0;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_permission_1 (rw) register accessor: The FW Region 5 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_permission_1`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_permission_1")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion5Permission1 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_permission_1 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion5Permission1Spec > ;
#[doc = "The FW Region 5 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 5 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_permission_1;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_permission_2 (rw) register accessor: The FW Region 5 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_permission_2`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_permission_2")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion5Permission2 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_permission_2 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion5Permission2Spec > ;
#[doc = "The FW Region 5 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 5 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_permission_2;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_start_address_l (rw) register accessor: The FW Region 5 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_start_address_l`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_start_address_l")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion5StartAddressL = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_start_address_l :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion5StartAddressLSpec > ;
#[doc = "The FW Region 5 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 5 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_start_address_l;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_start_address_h (rw) register accessor: The FW Region 5 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_start_address_h`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_start_address_h")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion5StartAddressH = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_start_address_h :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion5StartAddressHSpec > ;
#[doc = "The FW Region 5 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 5 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_start_address_h;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_end_address_l (rw) register accessor: The FW Region 5 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_end_address_l`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_end_address_l")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion5EndAddressL = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_end_address_l :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion5EndAddressLSpec > ;
#[doc = "The FW Region 5 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 5 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_end_address_l;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_end_address_h (rw) register accessor: The FW Region 5 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_end_address_h`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_end_address_h")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion5EndAddressH = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_end_address_h :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion5EndAddressHSpec > ;
#[doc = "The FW Region 5 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 5 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_5_end_address_h;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_control (rw) register accessor: The FW Region 6 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_control`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_control")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion6Control = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_control :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion6ControlSpec > ;
#[doc = "The FW Region 6 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 6 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_control;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_permission_0 (rw) register accessor: The FW Region 6 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_permission_0`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_permission_0")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion6Permission0 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_permission_0 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion6Permission0Spec > ;
#[doc = "The FW Region 6 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 6 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_permission_0;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_permission_1 (rw) register accessor: The FW Region 6 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_permission_1`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_permission_1")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion6Permission1 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_permission_1 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion6Permission1Spec > ;
#[doc = "The FW Region 6 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 6 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_permission_1;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_permission_2 (rw) register accessor: The FW Region 6 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_permission_2`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_permission_2")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion6Permission2 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_permission_2 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion6Permission2Spec > ;
#[doc = "The FW Region 6 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 6 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_permission_2;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_start_address_l (rw) register accessor: The FW Region 6 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_start_address_l`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_start_address_l")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion6StartAddressL = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_start_address_l :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion6StartAddressLSpec > ;
#[doc = "The FW Region 6 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 6 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_start_address_l;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_start_address_h (rw) register accessor: The FW Region 6 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_start_address_h`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_start_address_h")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion6StartAddressH = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_start_address_h :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion6StartAddressHSpec > ;
#[doc = "The FW Region 6 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 6 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_start_address_h;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_end_address_l (rw) register accessor: The FW Region 6 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_end_address_l`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_end_address_l")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion6EndAddressL = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_end_address_l :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion6EndAddressLSpec > ;
#[doc = "The FW Region 6 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 6 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_end_address_l;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_end_address_h (rw) register accessor: The FW Region 6 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_end_address_h`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_end_address_h")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion6EndAddressH = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_end_address_h :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion6EndAddressHSpec > ;
#[doc = "The FW Region 6 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 6 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_6_end_address_h;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_control (rw) register accessor: The FW Region 7 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_control`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_control")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion7Control = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_control :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion7ControlSpec > ;
#[doc = "The FW Region 7 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 7 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_control;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_permission_0 (rw) register accessor: The FW Region 7 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_permission_0`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_permission_0")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion7Permission0 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_permission_0 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion7Permission0Spec > ;
#[doc = "The FW Region 7 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 7 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_permission_0;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_permission_1 (rw) register accessor: The FW Region 7 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_permission_1`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_permission_1")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion7Permission1 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_permission_1 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion7Permission1Spec > ;
#[doc = "The FW Region 7 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 7 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_permission_1;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_permission_2 (rw) register accessor: The FW Region 7 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_permission_2`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_permission_2")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion7Permission2 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_permission_2 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion7Permission2Spec > ;
#[doc = "The FW Region 7 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 7 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_permission_2;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_start_address_l (rw) register accessor: The FW Region 7 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_start_address_l`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_start_address_l")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion7StartAddressL = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_start_address_l :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion7StartAddressLSpec > ;
#[doc = "The FW Region 7 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 7 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_start_address_l;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_start_address_h (rw) register accessor: The FW Region 7 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_start_address_h`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_start_address_h")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion7StartAddressH = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_start_address_h :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion7StartAddressHSpec > ;
#[doc = "The FW Region 7 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 7 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_start_address_h;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_end_address_l (rw) register accessor: The FW Region 7 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_end_address_l`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_end_address_l")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion7EndAddressL = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_end_address_l :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion7EndAddressLSpec > ;
#[doc = "The FW Region 7 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 7 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_end_address_l;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_end_address_h (rw) register accessor: The FW Region 7 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_end_address_h`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_end_address_h")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion7EndAddressH = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_end_address_h :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion7EndAddressHSpec > ;
#[doc = "The FW Region 7 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 7 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_7_end_address_h;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_control (rw) register accessor: The FW Region 8 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 8 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_control`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_control")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion8Control = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_control :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion8ControlSpec > ;
#[doc = "The FW Region 8 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 8 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_control;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_permission_0 (rw) register accessor: The FW Region 8 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 8 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_permission_0`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_permission_0")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion8Permission0 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_permission_0 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion8Permission0Spec > ;
#[doc = "The FW Region 8 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 8 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_permission_0;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_permission_1 (rw) register accessor: The FW Region 8 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 8 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_permission_1`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_permission_1")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion8Permission1 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_permission_1 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion8Permission1Spec > ;
#[doc = "The FW Region 8 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 8 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_permission_1;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_permission_2 (rw) register accessor: The FW Region 8 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 8 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_permission_2`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_permission_2")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion8Permission2 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_permission_2 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion8Permission2Spec > ;
#[doc = "The FW Region 8 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 8 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_permission_2;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_start_address_l (rw) register accessor: The FW Region 8 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 8 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_start_address_l`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_start_address_l")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion8StartAddressL = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_start_address_l :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion8StartAddressLSpec > ;
#[doc = "The FW Region 8 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 8 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_start_address_l;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_start_address_h (rw) register accessor: The FW Region 8 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 8 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_start_address_h`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_start_address_h")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion8StartAddressH = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_start_address_h :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion8StartAddressHSpec > ;
#[doc = "The FW Region 8 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 8 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_start_address_h;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_end_address_l (rw) register accessor: The FW Region 8 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 8 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_end_address_l`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_end_address_l")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion8EndAddressL = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_end_address_l :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion8EndAddressLSpec > ;
#[doc = "The FW Region 8 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 8 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_end_address_l;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_end_address_h (rw) register accessor: The FW Region 8 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 8 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_end_address_h`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_end_address_h")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion8EndAddressH = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_end_address_h :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion8EndAddressHSpec > ;
#[doc = "The FW Region 8 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 8 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_8_end_address_h;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_control (rw) register accessor: The FW Region 9 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 9 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_control`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_control")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion9Control = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_control :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion9ControlSpec > ;
#[doc = "The FW Region 9 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 9 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_control;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_permission_0 (rw) register accessor: The FW Region 9 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 9 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_permission_0`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_permission_0")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion9Permission0 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_permission_0 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion9Permission0Spec > ;
#[doc = "The FW Region 9 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 9 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_permission_0;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_permission_1 (rw) register accessor: The FW Region 9 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 9 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_permission_1`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_permission_1")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion9Permission1 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_permission_1 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion9Permission1Spec > ;
#[doc = "The FW Region 9 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 9 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_permission_1;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_permission_2 (rw) register accessor: The FW Region 9 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 9 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_permission_2`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_permission_2")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion9Permission2 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_permission_2 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion9Permission2Spec > ;
#[doc = "The FW Region 9 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 9 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_permission_2;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_start_address_l (rw) register accessor: The FW Region 9 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 9 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_start_address_l`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_start_address_l")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion9StartAddressL = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_start_address_l :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion9StartAddressLSpec > ;
#[doc = "The FW Region 9 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 9 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_start_address_l;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_start_address_h (rw) register accessor: The FW Region 9 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 9 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_start_address_h`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_start_address_h")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion9StartAddressH = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_start_address_h :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion9StartAddressHSpec > ;
#[doc = "The FW Region 9 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 9 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_start_address_h;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_end_address_l (rw) register accessor: The FW Region 9 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 9 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_end_address_l`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_end_address_l")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion9EndAddressL = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_end_address_l :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion9EndAddressLSpec > ;
#[doc = "The FW Region 9 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 9 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_end_address_l;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_end_address_h (rw) register accessor: The FW Region 9 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 9 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_end_address_h`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_end_address_h")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion9EndAddressH = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_end_address_h :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion9EndAddressHSpec > ;
#[doc = "The FW Region 9 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 9 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_9_end_address_h;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_control (rw) register accessor: The FW Region 10 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 10 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_control`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_control")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion10Control = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_control :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion10ControlSpec > ;
#[doc = "The FW Region 10 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 10 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_control;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_permission_0 (rw) register accessor: The FW Region 10 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 10 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_permission_0`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_permission_0")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion10Permission0 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_permission_0 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion10Permission0Spec > ;
#[doc = "The FW Region 10 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 10 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_permission_0;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_permission_1 (rw) register accessor: The FW Region 10 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 10 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_permission_1`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_permission_1")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion10Permission1 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_permission_1 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion10Permission1Spec > ;
#[doc = "The FW Region 10 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 10 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_permission_1;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_permission_2 (rw) register accessor: The FW Region 10 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 10 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_permission_2`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_permission_2")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion10Permission2 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_permission_2 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion10Permission2Spec > ;
#[doc = "The FW Region 10 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 10 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_permission_2;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_start_address_l (rw) register accessor: The FW Region 10 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 10 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_start_address_l`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_start_address_l")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion10StartAddressL = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_start_address_l :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion10StartAddressLSpec > ;
#[doc = "The FW Region 10 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 10 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_start_address_l;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_start_address_h (rw) register accessor: The FW Region 10 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 10 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_start_address_h`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_start_address_h")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion10StartAddressH = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_start_address_h :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion10StartAddressHSpec > ;
#[doc = "The FW Region 10 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 10 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_start_address_h;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_end_address_l (rw) register accessor: The FW Region 10 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 10 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_end_address_l`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_end_address_l")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion10EndAddressL = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_end_address_l :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion10EndAddressLSpec > ;
#[doc = "The FW Region 10 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 10 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_end_address_l;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_end_address_h (rw) register accessor: The FW Region 10 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 10 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_end_address_h`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_end_address_h")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion10EndAddressH = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_end_address_h :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion10EndAddressHSpec > ;
#[doc = "The FW Region 10 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 10 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_10_end_address_h;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_control (rw) register accessor: The FW Region 11 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 11 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_control`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_control")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion11Control = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_control :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion11ControlSpec > ;
#[doc = "The FW Region 11 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 11 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_control;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_permission_0 (rw) register accessor: The FW Region 11 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 11 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_permission_0`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_permission_0")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion11Permission0 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_permission_0 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion11Permission0Spec > ;
#[doc = "The FW Region 11 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 11 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_permission_0;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_permission_1 (rw) register accessor: The FW Region 11 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 11 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_permission_1`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_permission_1")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion11Permission1 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_permission_1 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion11Permission1Spec > ;
#[doc = "The FW Region 11 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 11 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_permission_1;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_permission_2 (rw) register accessor: The FW Region 11 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 11 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_permission_2`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_permission_2")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion11Permission2 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_permission_2 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion11Permission2Spec > ;
#[doc = "The FW Region 11 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 11 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_permission_2;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_start_address_l (rw) register accessor: The FW Region 11 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 11 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_start_address_l`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_start_address_l")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion11StartAddressL = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_start_address_l :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion11StartAddressLSpec > ;
#[doc = "The FW Region 11 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 11 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_start_address_l;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_start_address_h (rw) register accessor: The FW Region 11 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 11 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_start_address_h`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_start_address_h")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion11StartAddressH = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_start_address_h :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion11StartAddressHSpec > ;
#[doc = "The FW Region 11 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 11 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_start_address_h;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_end_address_l (rw) register accessor: The FW Region 11 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 11 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_end_address_l`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_end_address_l")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion11EndAddressL = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_end_address_l :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion11EndAddressLSpec > ;
#[doc = "The FW Region 11 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 11 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_end_address_l;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_end_address_h (rw) register accessor: The FW Region 11 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 11 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_end_address_h`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_end_address_h")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion11EndAddressH = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_end_address_h :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion11EndAddressHSpec > ;
#[doc = "The FW Region 11 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 11 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_11_end_address_h;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_control (rw) register accessor: The FW Region 12 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 12 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_control`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_control")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion12Control = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_control :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion12ControlSpec > ;
#[doc = "The FW Region 12 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 12 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_control;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_permission_0 (rw) register accessor: The FW Region 12 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 12 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_permission_0`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_permission_0")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion12Permission0 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_permission_0 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion12Permission0Spec > ;
#[doc = "The FW Region 12 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 12 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_permission_0;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_permission_1 (rw) register accessor: The FW Region 12 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 12 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_permission_1`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_permission_1")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion12Permission1 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_permission_1 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion12Permission1Spec > ;
#[doc = "The FW Region 12 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 12 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_permission_1;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_permission_2 (rw) register accessor: The FW Region 12 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 12 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_permission_2`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_permission_2")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion12Permission2 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_permission_2 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion12Permission2Spec > ;
#[doc = "The FW Region 12 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 12 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_permission_2;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_start_address_l (rw) register accessor: The FW Region 12 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 12 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_start_address_l`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_start_address_l")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion12StartAddressL = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_start_address_l :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion12StartAddressLSpec > ;
#[doc = "The FW Region 12 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 12 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_start_address_l;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_start_address_h (rw) register accessor: The FW Region 12 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 12 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_start_address_h`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_start_address_h")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion12StartAddressH = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_start_address_h :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion12StartAddressHSpec > ;
#[doc = "The FW Region 12 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 12 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_start_address_h;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_end_address_l (rw) register accessor: The FW Region 12 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 12 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_end_address_l`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_end_address_l")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion12EndAddressL = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_end_address_l :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion12EndAddressLSpec > ;
#[doc = "The FW Region 12 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 12 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_end_address_l;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_end_address_h (rw) register accessor: The FW Region 12 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 12 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_end_address_h`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_end_address_h")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion12EndAddressH = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_end_address_h :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion12EndAddressHSpec > ;
#[doc = "The FW Region 12 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 12 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_12_end_address_h;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_control (rw) register accessor: The FW Region 13 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 13 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_control`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_control")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion13Control = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_control :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion13ControlSpec > ;
#[doc = "The FW Region 13 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 13 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_control;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_permission_0 (rw) register accessor: The FW Region 13 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 13 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_permission_0`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_permission_0")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion13Permission0 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_permission_0 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion13Permission0Spec > ;
#[doc = "The FW Region 13 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 13 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_permission_0;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_permission_1 (rw) register accessor: The FW Region 13 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 13 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_permission_1`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_permission_1")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion13Permission1 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_permission_1 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion13Permission1Spec > ;
#[doc = "The FW Region 13 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 13 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_permission_1;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_permission_2 (rw) register accessor: The FW Region 13 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 13 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_permission_2`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_permission_2")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion13Permission2 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_permission_2 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion13Permission2Spec > ;
#[doc = "The FW Region 13 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 13 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_permission_2;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_start_address_l (rw) register accessor: The FW Region 13 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 13 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_start_address_l`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_start_address_l")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion13StartAddressL = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_start_address_l :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion13StartAddressLSpec > ;
#[doc = "The FW Region 13 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 13 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_start_address_l;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_start_address_h (rw) register accessor: The FW Region 13 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 13 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_start_address_h`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_start_address_h")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion13StartAddressH = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_start_address_h :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion13StartAddressHSpec > ;
#[doc = "The FW Region 13 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 13 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_start_address_h;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_end_address_l (rw) register accessor: The FW Region 13 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 13 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_end_address_l`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_end_address_l")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion13EndAddressL = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_end_address_l :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion13EndAddressLSpec > ;
#[doc = "The FW Region 13 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 13 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_end_address_l;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_end_address_h (rw) register accessor: The FW Region 13 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 13 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_end_address_h`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_end_address_h")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion13EndAddressH = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_end_address_h :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion13EndAddressHSpec > ;
#[doc = "The FW Region 13 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 13 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_13_end_address_h;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_control (rw) register accessor: The FW Region 14 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 14 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_control`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_control")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion14Control = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_control :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion14ControlSpec > ;
#[doc = "The FW Region 14 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 14 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_control;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_permission_0 (rw) register accessor: The FW Region 14 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 14 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_permission_0`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_permission_0")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion14Permission0 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_permission_0 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion14Permission0Spec > ;
#[doc = "The FW Region 14 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 14 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_permission_0;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_permission_1 (rw) register accessor: The FW Region 14 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 14 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_permission_1`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_permission_1")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion14Permission1 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_permission_1 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion14Permission1Spec > ;
#[doc = "The FW Region 14 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 14 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_permission_1;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_permission_2 (rw) register accessor: The FW Region 14 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 14 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_permission_2`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_permission_2")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion14Permission2 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_permission_2 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion14Permission2Spec > ;
#[doc = "The FW Region 14 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 14 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_permission_2;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_start_address_l (rw) register accessor: The FW Region 14 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 14 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_start_address_l`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_start_address_l")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion14StartAddressL = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_start_address_l :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion14StartAddressLSpec > ;
#[doc = "The FW Region 14 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 14 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_start_address_l;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_start_address_h (rw) register accessor: The FW Region 14 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 14 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_start_address_h`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_start_address_h")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion14StartAddressH = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_start_address_h :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion14StartAddressHSpec > ;
#[doc = "The FW Region 14 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 14 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_start_address_h;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_end_address_l (rw) register accessor: The FW Region 14 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 14 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_end_address_l`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_end_address_l")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion14EndAddressL = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_end_address_l :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion14EndAddressLSpec > ;
#[doc = "The FW Region 14 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 14 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_end_address_l;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_end_address_h (rw) register accessor: The FW Region 14 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 14 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_end_address_h`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_end_address_h")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion14EndAddressH = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_end_address_h :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion14EndAddressHSpec > ;
#[doc = "The FW Region 14 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 14 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_14_end_address_h;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_control (rw) register accessor: The FW Region 15 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 15 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_control`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_control")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion15Control = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_control :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion15ControlSpec > ;
#[doc = "The FW Region 15 Control Register defines the control fields for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 15 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_control;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_permission_0 (rw) register accessor: The FW Region 15 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 15 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_permission_0`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_permission_0")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion15Permission0 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_permission_0 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion15Permission0Spec > ;
#[doc = "The FW Region 15 Permission 0 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 15 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_permission_0;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_permission_1 (rw) register accessor: The FW Region 15 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 15 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_permission_1`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_permission_1")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion15Permission1 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_permission_1 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion15Permission1Spec > ;
#[doc = "The FW Region 15 Permission 1 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 15 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_permission_1;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_permission_2 (rw) register accessor: The FW Region 15 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 15 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_permission_2`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_permission_2")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion15Permission2 = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_permission_2 :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion15Permission2Spec > ;
#[doc = "The FW Region 15 Permission 2 Register defines the permissions for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 15 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_permission_2;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_start_address_l (rw) register accessor: The FW Region 15 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 15 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_start_address_l`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_start_address_l")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion15StartAddressL = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_start_address_l :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion15StartAddressLSpec > ;
#[doc = "The FW Region 15 Start Address Low Register defines the start address bits 31 to 0 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 15 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_start_address_l;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_start_address_h (rw) register accessor: The FW Region 15 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 15 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_start_address_h`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_start_address_h")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion15StartAddressH = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_start_address_h :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion15StartAddressHSpec > ;
#[doc = "The FW Region 15 Start Address High Register defines the start address bits 47 to 32 for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 15 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_start_address_h;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_end_address_l (rw) register accessor: The FW Region 15 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 15 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_end_address_l`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_end_address_l")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion15EndAddressL = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_end_address_l :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion15EndAddressLSpec > ;
#[doc = "The FW Region 15 End Address Low Register defines the end address bits 31 to 0 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 15 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_end_address_l;
#[doc = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_end_address_h (rw) register accessor: The FW Region 15 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 15 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_end_address_h`]
module"]
#[doc(alias = "FW_REGS_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_end_address_h")]
pub type FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion15EndAddressH = crate :: Reg < fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_end_address_h :: FwRegsBrScrm64bClk2ToScrpMiscClk2L0FwRegion15EndAddressHSpec > ;
#[doc = "The FW Region 15 End Address High Register defines the end address bits 47 to 32 to include for the slave br_scrm_64b_clk2_to_scrp_misc_clk2_l0 region 15 firewall."]
pub mod fw_regs_br_scrm_64b_clk2_to_scrp_misc_clk2_l0_fw_region_15_end_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_0_control (rw) register accessor: The FW Region 0 Control Register defines the control fields for the slave Imsram32kx64e_main_6.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_0_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_0_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_0_control`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_0_control")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion0Control = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_0_control :: FwRegsImsram32kx64eMain6SlvFwRegion0ControlSpec > ;
#[doc = "The FW Region 0 Control Register defines the control fields for the slave Imsram32kx64e_main_6.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_0_control;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_0_permission_0 (rw) register accessor: The FW Region 0 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_0_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_0_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_0_permission_0`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_0_permission_0")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion0Permission0 = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_0_permission_0 :: FwRegsImsram32kx64eMain6SlvFwRegion0Permission0Spec > ;
#[doc = "The FW Region 0 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_0_permission_0;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_0_permission_1 (rw) register accessor: The FW Region 0 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_0_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_0_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_0_permission_1`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_0_permission_1")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion0Permission1 = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_0_permission_1 :: FwRegsImsram32kx64eMain6SlvFwRegion0Permission1Spec > ;
#[doc = "The FW Region 0 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_0_permission_1;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_0_permission_2 (rw) register accessor: The FW Region 0 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_0_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_0_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_0_permission_2`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_0_permission_2")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion0Permission2 = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_0_permission_2 :: FwRegsImsram32kx64eMain6SlvFwRegion0Permission2Spec > ;
#[doc = "The FW Region 0 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_0_permission_2;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_0_start_address_l (rw) register accessor: The FW Region 0 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_6.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_0_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_0_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_0_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_0_start_address_l")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion0StartAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_0_start_address_l :: FwRegsImsram32kx64eMain6SlvFwRegion0StartAddressLSpec > ;
#[doc = "The FW Region 0 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_6.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_0_start_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_0_start_address_h (rw) register accessor: The FW Region 0 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_6.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_0_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_0_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_0_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_0_start_address_h")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion0StartAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_0_start_address_h :: FwRegsImsram32kx64eMain6SlvFwRegion0StartAddressHSpec > ;
#[doc = "The FW Region 0 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_6.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_0_start_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_0_end_address_l (rw) register accessor: The FW Region 0 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_6.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_0_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_0_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_0_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_0_end_address_l")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion0EndAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_0_end_address_l :: FwRegsImsram32kx64eMain6SlvFwRegion0EndAddressLSpec > ;
#[doc = "The FW Region 0 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_6.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_0_end_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_0_end_address_h (rw) register accessor: The FW Region 0 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_6.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_0_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_0_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_0_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_0_end_address_h")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion0EndAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_0_end_address_h :: FwRegsImsram32kx64eMain6SlvFwRegion0EndAddressHSpec > ;
#[doc = "The FW Region 0 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_6.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_0_end_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_1_control (rw) register accessor: The FW Region 1 Control Register defines the control fields for the slave Imsram32kx64e_main_6.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_1_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_1_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_1_control`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_1_control")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion1Control = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_1_control :: FwRegsImsram32kx64eMain6SlvFwRegion1ControlSpec > ;
#[doc = "The FW Region 1 Control Register defines the control fields for the slave Imsram32kx64e_main_6.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_1_control;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_1_permission_0 (rw) register accessor: The FW Region 1 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_1_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_1_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_1_permission_0`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_1_permission_0")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion1Permission0 = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_1_permission_0 :: FwRegsImsram32kx64eMain6SlvFwRegion1Permission0Spec > ;
#[doc = "The FW Region 1 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_1_permission_0;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_1_permission_1 (rw) register accessor: The FW Region 1 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_1_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_1_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_1_permission_1`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_1_permission_1")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion1Permission1 = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_1_permission_1 :: FwRegsImsram32kx64eMain6SlvFwRegion1Permission1Spec > ;
#[doc = "The FW Region 1 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_1_permission_1;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_1_permission_2 (rw) register accessor: The FW Region 1 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_1_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_1_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_1_permission_2`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_1_permission_2")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion1Permission2 = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_1_permission_2 :: FwRegsImsram32kx64eMain6SlvFwRegion1Permission2Spec > ;
#[doc = "The FW Region 1 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_1_permission_2;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_1_start_address_l (rw) register accessor: The FW Region 1 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_6.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_1_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_1_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_1_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_1_start_address_l")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion1StartAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_1_start_address_l :: FwRegsImsram32kx64eMain6SlvFwRegion1StartAddressLSpec > ;
#[doc = "The FW Region 1 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_6.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_1_start_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_1_start_address_h (rw) register accessor: The FW Region 1 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_6.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_1_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_1_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_1_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_1_start_address_h")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion1StartAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_1_start_address_h :: FwRegsImsram32kx64eMain6SlvFwRegion1StartAddressHSpec > ;
#[doc = "The FW Region 1 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_6.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_1_start_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_1_end_address_l (rw) register accessor: The FW Region 1 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_6.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_1_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_1_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_1_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_1_end_address_l")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion1EndAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_1_end_address_l :: FwRegsImsram32kx64eMain6SlvFwRegion1EndAddressLSpec > ;
#[doc = "The FW Region 1 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_6.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_1_end_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_1_end_address_h (rw) register accessor: The FW Region 1 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_6.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_1_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_1_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_1_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_1_end_address_h")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion1EndAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_1_end_address_h :: FwRegsImsram32kx64eMain6SlvFwRegion1EndAddressHSpec > ;
#[doc = "The FW Region 1 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_6.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_1_end_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_2_control (rw) register accessor: The FW Region 2 Control Register defines the control fields for the slave Imsram32kx64e_main_6.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_2_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_2_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_2_control`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_2_control")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion2Control = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_2_control :: FwRegsImsram32kx64eMain6SlvFwRegion2ControlSpec > ;
#[doc = "The FW Region 2 Control Register defines the control fields for the slave Imsram32kx64e_main_6.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_2_control;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_2_permission_0 (rw) register accessor: The FW Region 2 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_2_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_2_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_2_permission_0`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_2_permission_0")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion2Permission0 = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_2_permission_0 :: FwRegsImsram32kx64eMain6SlvFwRegion2Permission0Spec > ;
#[doc = "The FW Region 2 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_2_permission_0;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_2_permission_1 (rw) register accessor: The FW Region 2 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_2_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_2_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_2_permission_1`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_2_permission_1")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion2Permission1 = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_2_permission_1 :: FwRegsImsram32kx64eMain6SlvFwRegion2Permission1Spec > ;
#[doc = "The FW Region 2 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_2_permission_1;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_2_permission_2 (rw) register accessor: The FW Region 2 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_2_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_2_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_2_permission_2`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_2_permission_2")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion2Permission2 = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_2_permission_2 :: FwRegsImsram32kx64eMain6SlvFwRegion2Permission2Spec > ;
#[doc = "The FW Region 2 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_2_permission_2;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_2_start_address_l (rw) register accessor: The FW Region 2 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_6.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_2_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_2_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_2_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_2_start_address_l")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion2StartAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_2_start_address_l :: FwRegsImsram32kx64eMain6SlvFwRegion2StartAddressLSpec > ;
#[doc = "The FW Region 2 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_6.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_2_start_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_2_start_address_h (rw) register accessor: The FW Region 2 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_6.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_2_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_2_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_2_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_2_start_address_h")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion2StartAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_2_start_address_h :: FwRegsImsram32kx64eMain6SlvFwRegion2StartAddressHSpec > ;
#[doc = "The FW Region 2 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_6.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_2_start_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_2_end_address_l (rw) register accessor: The FW Region 2 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_6.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_2_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_2_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_2_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_2_end_address_l")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion2EndAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_2_end_address_l :: FwRegsImsram32kx64eMain6SlvFwRegion2EndAddressLSpec > ;
#[doc = "The FW Region 2 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_6.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_2_end_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_2_end_address_h (rw) register accessor: The FW Region 2 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_6.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_2_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_2_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_2_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_2_end_address_h")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion2EndAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_2_end_address_h :: FwRegsImsram32kx64eMain6SlvFwRegion2EndAddressHSpec > ;
#[doc = "The FW Region 2 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_6.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_2_end_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_3_control (rw) register accessor: The FW Region 3 Control Register defines the control fields for the slave Imsram32kx64e_main_6.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_3_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_3_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_3_control`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_3_control")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion3Control = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_3_control :: FwRegsImsram32kx64eMain6SlvFwRegion3ControlSpec > ;
#[doc = "The FW Region 3 Control Register defines the control fields for the slave Imsram32kx64e_main_6.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_3_control;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_3_permission_0 (rw) register accessor: The FW Region 3 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_3_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_3_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_3_permission_0`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_3_permission_0")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion3Permission0 = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_3_permission_0 :: FwRegsImsram32kx64eMain6SlvFwRegion3Permission0Spec > ;
#[doc = "The FW Region 3 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_3_permission_0;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_3_permission_1 (rw) register accessor: The FW Region 3 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_3_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_3_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_3_permission_1`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_3_permission_1")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion3Permission1 = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_3_permission_1 :: FwRegsImsram32kx64eMain6SlvFwRegion3Permission1Spec > ;
#[doc = "The FW Region 3 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_3_permission_1;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_3_permission_2 (rw) register accessor: The FW Region 3 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_3_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_3_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_3_permission_2`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_3_permission_2")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion3Permission2 = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_3_permission_2 :: FwRegsImsram32kx64eMain6SlvFwRegion3Permission2Spec > ;
#[doc = "The FW Region 3 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_3_permission_2;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_3_start_address_l (rw) register accessor: The FW Region 3 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_6.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_3_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_3_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_3_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_3_start_address_l")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion3StartAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_3_start_address_l :: FwRegsImsram32kx64eMain6SlvFwRegion3StartAddressLSpec > ;
#[doc = "The FW Region 3 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_6.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_3_start_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_3_start_address_h (rw) register accessor: The FW Region 3 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_6.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_3_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_3_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_3_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_3_start_address_h")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion3StartAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_3_start_address_h :: FwRegsImsram32kx64eMain6SlvFwRegion3StartAddressHSpec > ;
#[doc = "The FW Region 3 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_6.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_3_start_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_3_end_address_l (rw) register accessor: The FW Region 3 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_6.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_3_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_3_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_3_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_3_end_address_l")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion3EndAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_3_end_address_l :: FwRegsImsram32kx64eMain6SlvFwRegion3EndAddressLSpec > ;
#[doc = "The FW Region 3 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_6.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_3_end_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_3_end_address_h (rw) register accessor: The FW Region 3 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_6.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_3_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_3_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_3_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_3_end_address_h")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion3EndAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_3_end_address_h :: FwRegsImsram32kx64eMain6SlvFwRegion3EndAddressHSpec > ;
#[doc = "The FW Region 3 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_6.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_3_end_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_4_control (rw) register accessor: The FW Region 4 Control Register defines the control fields for the slave Imsram32kx64e_main_6.slv region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_4_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_4_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_4_control`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_4_control")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion4Control = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_4_control :: FwRegsImsram32kx64eMain6SlvFwRegion4ControlSpec > ;
#[doc = "The FW Region 4 Control Register defines the control fields for the slave Imsram32kx64e_main_6.slv region 4 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_4_control;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_4_permission_0 (rw) register accessor: The FW Region 4 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_4_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_4_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_4_permission_0`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_4_permission_0")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion4Permission0 = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_4_permission_0 :: FwRegsImsram32kx64eMain6SlvFwRegion4Permission0Spec > ;
#[doc = "The FW Region 4 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 4 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_4_permission_0;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_4_permission_1 (rw) register accessor: The FW Region 4 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_4_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_4_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_4_permission_1`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_4_permission_1")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion4Permission1 = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_4_permission_1 :: FwRegsImsram32kx64eMain6SlvFwRegion4Permission1Spec > ;
#[doc = "The FW Region 4 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 4 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_4_permission_1;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_4_permission_2 (rw) register accessor: The FW Region 4 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_4_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_4_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_4_permission_2`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_4_permission_2")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion4Permission2 = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_4_permission_2 :: FwRegsImsram32kx64eMain6SlvFwRegion4Permission2Spec > ;
#[doc = "The FW Region 4 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 4 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_4_permission_2;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_4_start_address_l (rw) register accessor: The FW Region 4 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_6.slv region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_4_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_4_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_4_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_4_start_address_l")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion4StartAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_4_start_address_l :: FwRegsImsram32kx64eMain6SlvFwRegion4StartAddressLSpec > ;
#[doc = "The FW Region 4 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_6.slv region 4 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_4_start_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_4_start_address_h (rw) register accessor: The FW Region 4 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_6.slv region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_4_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_4_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_4_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_4_start_address_h")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion4StartAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_4_start_address_h :: FwRegsImsram32kx64eMain6SlvFwRegion4StartAddressHSpec > ;
#[doc = "The FW Region 4 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_6.slv region 4 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_4_start_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_4_end_address_l (rw) register accessor: The FW Region 4 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_6.slv region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_4_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_4_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_4_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_4_end_address_l")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion4EndAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_4_end_address_l :: FwRegsImsram32kx64eMain6SlvFwRegion4EndAddressLSpec > ;
#[doc = "The FW Region 4 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_6.slv region 4 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_4_end_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_4_end_address_h (rw) register accessor: The FW Region 4 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_6.slv region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_4_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_4_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_4_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_4_end_address_h")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion4EndAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_4_end_address_h :: FwRegsImsram32kx64eMain6SlvFwRegion4EndAddressHSpec > ;
#[doc = "The FW Region 4 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_6.slv region 4 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_4_end_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_5_control (rw) register accessor: The FW Region 5 Control Register defines the control fields for the slave Imsram32kx64e_main_6.slv region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_5_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_5_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_5_control`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_5_control")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion5Control = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_5_control :: FwRegsImsram32kx64eMain6SlvFwRegion5ControlSpec > ;
#[doc = "The FW Region 5 Control Register defines the control fields for the slave Imsram32kx64e_main_6.slv region 5 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_5_control;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_5_permission_0 (rw) register accessor: The FW Region 5 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_5_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_5_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_5_permission_0`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_5_permission_0")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion5Permission0 = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_5_permission_0 :: FwRegsImsram32kx64eMain6SlvFwRegion5Permission0Spec > ;
#[doc = "The FW Region 5 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 5 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_5_permission_0;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_5_permission_1 (rw) register accessor: The FW Region 5 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_5_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_5_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_5_permission_1`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_5_permission_1")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion5Permission1 = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_5_permission_1 :: FwRegsImsram32kx64eMain6SlvFwRegion5Permission1Spec > ;
#[doc = "The FW Region 5 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 5 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_5_permission_1;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_5_permission_2 (rw) register accessor: The FW Region 5 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_5_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_5_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_5_permission_2`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_5_permission_2")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion5Permission2 = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_5_permission_2 :: FwRegsImsram32kx64eMain6SlvFwRegion5Permission2Spec > ;
#[doc = "The FW Region 5 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 5 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_5_permission_2;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_5_start_address_l (rw) register accessor: The FW Region 5 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_6.slv region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_5_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_5_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_5_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_5_start_address_l")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion5StartAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_5_start_address_l :: FwRegsImsram32kx64eMain6SlvFwRegion5StartAddressLSpec > ;
#[doc = "The FW Region 5 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_6.slv region 5 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_5_start_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_5_start_address_h (rw) register accessor: The FW Region 5 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_6.slv region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_5_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_5_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_5_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_5_start_address_h")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion5StartAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_5_start_address_h :: FwRegsImsram32kx64eMain6SlvFwRegion5StartAddressHSpec > ;
#[doc = "The FW Region 5 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_6.slv region 5 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_5_start_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_5_end_address_l (rw) register accessor: The FW Region 5 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_6.slv region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_5_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_5_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_5_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_5_end_address_l")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion5EndAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_5_end_address_l :: FwRegsImsram32kx64eMain6SlvFwRegion5EndAddressLSpec > ;
#[doc = "The FW Region 5 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_6.slv region 5 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_5_end_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_5_end_address_h (rw) register accessor: The FW Region 5 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_6.slv region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_5_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_5_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_5_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_5_end_address_h")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion5EndAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_5_end_address_h :: FwRegsImsram32kx64eMain6SlvFwRegion5EndAddressHSpec > ;
#[doc = "The FW Region 5 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_6.slv region 5 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_5_end_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_6_control (rw) register accessor: The FW Region 6 Control Register defines the control fields for the slave Imsram32kx64e_main_6.slv region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_6_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_6_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_6_control`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_6_control")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion6Control = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_6_control :: FwRegsImsram32kx64eMain6SlvFwRegion6ControlSpec > ;
#[doc = "The FW Region 6 Control Register defines the control fields for the slave Imsram32kx64e_main_6.slv region 6 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_6_control;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_6_permission_0 (rw) register accessor: The FW Region 6 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_6_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_6_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_6_permission_0`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_6_permission_0")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion6Permission0 = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_6_permission_0 :: FwRegsImsram32kx64eMain6SlvFwRegion6Permission0Spec > ;
#[doc = "The FW Region 6 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 6 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_6_permission_0;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_6_permission_1 (rw) register accessor: The FW Region 6 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_6_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_6_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_6_permission_1`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_6_permission_1")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion6Permission1 = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_6_permission_1 :: FwRegsImsram32kx64eMain6SlvFwRegion6Permission1Spec > ;
#[doc = "The FW Region 6 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 6 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_6_permission_1;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_6_permission_2 (rw) register accessor: The FW Region 6 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_6_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_6_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_6_permission_2`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_6_permission_2")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion6Permission2 = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_6_permission_2 :: FwRegsImsram32kx64eMain6SlvFwRegion6Permission2Spec > ;
#[doc = "The FW Region 6 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 6 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_6_permission_2;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_6_start_address_l (rw) register accessor: The FW Region 6 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_6.slv region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_6_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_6_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_6_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_6_start_address_l")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion6StartAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_6_start_address_l :: FwRegsImsram32kx64eMain6SlvFwRegion6StartAddressLSpec > ;
#[doc = "The FW Region 6 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_6.slv region 6 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_6_start_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_6_start_address_h (rw) register accessor: The FW Region 6 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_6.slv region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_6_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_6_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_6_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_6_start_address_h")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion6StartAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_6_start_address_h :: FwRegsImsram32kx64eMain6SlvFwRegion6StartAddressHSpec > ;
#[doc = "The FW Region 6 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_6.slv region 6 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_6_start_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_6_end_address_l (rw) register accessor: The FW Region 6 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_6.slv region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_6_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_6_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_6_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_6_end_address_l")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion6EndAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_6_end_address_l :: FwRegsImsram32kx64eMain6SlvFwRegion6EndAddressLSpec > ;
#[doc = "The FW Region 6 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_6.slv region 6 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_6_end_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_6_end_address_h (rw) register accessor: The FW Region 6 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_6.slv region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_6_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_6_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_6_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_6_end_address_h")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion6EndAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_6_end_address_h :: FwRegsImsram32kx64eMain6SlvFwRegion6EndAddressHSpec > ;
#[doc = "The FW Region 6 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_6.slv region 6 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_6_end_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_7_control (rw) register accessor: The FW Region 7 Control Register defines the control fields for the slave Imsram32kx64e_main_6.slv region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_7_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_7_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_7_control`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_7_control")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion7Control = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_7_control :: FwRegsImsram32kx64eMain6SlvFwRegion7ControlSpec > ;
#[doc = "The FW Region 7 Control Register defines the control fields for the slave Imsram32kx64e_main_6.slv region 7 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_7_control;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_7_permission_0 (rw) register accessor: The FW Region 7 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_7_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_7_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_7_permission_0`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_7_permission_0")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion7Permission0 = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_7_permission_0 :: FwRegsImsram32kx64eMain6SlvFwRegion7Permission0Spec > ;
#[doc = "The FW Region 7 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 7 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_7_permission_0;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_7_permission_1 (rw) register accessor: The FW Region 7 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_7_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_7_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_7_permission_1`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_7_permission_1")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion7Permission1 = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_7_permission_1 :: FwRegsImsram32kx64eMain6SlvFwRegion7Permission1Spec > ;
#[doc = "The FW Region 7 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 7 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_7_permission_1;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_7_permission_2 (rw) register accessor: The FW Region 7 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_7_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_7_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_7_permission_2`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_7_permission_2")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion7Permission2 = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_7_permission_2 :: FwRegsImsram32kx64eMain6SlvFwRegion7Permission2Spec > ;
#[doc = "The FW Region 7 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_6.slv region 7 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_7_permission_2;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_7_start_address_l (rw) register accessor: The FW Region 7 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_6.slv region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_7_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_7_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_7_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_7_start_address_l")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion7StartAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_7_start_address_l :: FwRegsImsram32kx64eMain6SlvFwRegion7StartAddressLSpec > ;
#[doc = "The FW Region 7 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_6.slv region 7 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_7_start_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_7_start_address_h (rw) register accessor: The FW Region 7 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_6.slv region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_7_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_7_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_7_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_7_start_address_h")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion7StartAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_7_start_address_h :: FwRegsImsram32kx64eMain6SlvFwRegion7StartAddressHSpec > ;
#[doc = "The FW Region 7 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_6.slv region 7 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_7_start_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_7_end_address_l (rw) register accessor: The FW Region 7 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_6.slv region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_7_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_7_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_7_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_7_end_address_l")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion7EndAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_7_end_address_l :: FwRegsImsram32kx64eMain6SlvFwRegion7EndAddressLSpec > ;
#[doc = "The FW Region 7 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_6.slv region 7 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_7_end_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_7_end_address_h (rw) register accessor: The FW Region 7 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_6.slv region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_6_slv_fw_region_7_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_6_slv_fw_region_7_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_6_slv_fw_region_7_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_6_slv_fw_region_7_end_address_h")]
pub type FwRegsImsram32kx64eMain6SlvFwRegion7EndAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_6_slv_fw_region_7_end_address_h :: FwRegsImsram32kx64eMain6SlvFwRegion7EndAddressHSpec > ;
#[doc = "The FW Region 7 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_6.slv region 7 firewall."]
pub mod fw_regs_imsram32kx64e_main_6_slv_fw_region_7_end_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_0_control (rw) register accessor: The FW Region 0 Control Register defines the control fields for the slave Imsram32kx64e_main_7.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_0_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_0_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_0_control`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_0_control")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion0Control = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_0_control :: FwRegsImsram32kx64eMain7SlvFwRegion0ControlSpec > ;
#[doc = "The FW Region 0 Control Register defines the control fields for the slave Imsram32kx64e_main_7.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_0_control;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_0_permission_0 (rw) register accessor: The FW Region 0 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_0_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_0_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_0_permission_0`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_0_permission_0")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion0Permission0 = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_0_permission_0 :: FwRegsImsram32kx64eMain7SlvFwRegion0Permission0Spec > ;
#[doc = "The FW Region 0 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_0_permission_0;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_0_permission_1 (rw) register accessor: The FW Region 0 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_0_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_0_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_0_permission_1`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_0_permission_1")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion0Permission1 = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_0_permission_1 :: FwRegsImsram32kx64eMain7SlvFwRegion0Permission1Spec > ;
#[doc = "The FW Region 0 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_0_permission_1;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_0_permission_2 (rw) register accessor: The FW Region 0 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_0_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_0_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_0_permission_2`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_0_permission_2")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion0Permission2 = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_0_permission_2 :: FwRegsImsram32kx64eMain7SlvFwRegion0Permission2Spec > ;
#[doc = "The FW Region 0 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_0_permission_2;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_0_start_address_l (rw) register accessor: The FW Region 0 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_7.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_0_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_0_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_0_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_0_start_address_l")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion0StartAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_0_start_address_l :: FwRegsImsram32kx64eMain7SlvFwRegion0StartAddressLSpec > ;
#[doc = "The FW Region 0 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_7.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_0_start_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_0_start_address_h (rw) register accessor: The FW Region 0 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_7.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_0_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_0_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_0_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_0_start_address_h")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion0StartAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_0_start_address_h :: FwRegsImsram32kx64eMain7SlvFwRegion0StartAddressHSpec > ;
#[doc = "The FW Region 0 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_7.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_0_start_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_0_end_address_l (rw) register accessor: The FW Region 0 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_7.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_0_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_0_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_0_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_0_end_address_l")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion0EndAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_0_end_address_l :: FwRegsImsram32kx64eMain7SlvFwRegion0EndAddressLSpec > ;
#[doc = "The FW Region 0 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_7.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_0_end_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_0_end_address_h (rw) register accessor: The FW Region 0 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_7.slv region 0 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_0_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_0_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_0_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_0_end_address_h")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion0EndAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_0_end_address_h :: FwRegsImsram32kx64eMain7SlvFwRegion0EndAddressHSpec > ;
#[doc = "The FW Region 0 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_7.slv region 0 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_0_end_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_1_control (rw) register accessor: The FW Region 1 Control Register defines the control fields for the slave Imsram32kx64e_main_7.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_1_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_1_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_1_control`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_1_control")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion1Control = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_1_control :: FwRegsImsram32kx64eMain7SlvFwRegion1ControlSpec > ;
#[doc = "The FW Region 1 Control Register defines the control fields for the slave Imsram32kx64e_main_7.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_1_control;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_1_permission_0 (rw) register accessor: The FW Region 1 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_1_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_1_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_1_permission_0`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_1_permission_0")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion1Permission0 = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_1_permission_0 :: FwRegsImsram32kx64eMain7SlvFwRegion1Permission0Spec > ;
#[doc = "The FW Region 1 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_1_permission_0;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_1_permission_1 (rw) register accessor: The FW Region 1 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_1_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_1_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_1_permission_1`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_1_permission_1")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion1Permission1 = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_1_permission_1 :: FwRegsImsram32kx64eMain7SlvFwRegion1Permission1Spec > ;
#[doc = "The FW Region 1 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_1_permission_1;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_1_permission_2 (rw) register accessor: The FW Region 1 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_1_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_1_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_1_permission_2`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_1_permission_2")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion1Permission2 = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_1_permission_2 :: FwRegsImsram32kx64eMain7SlvFwRegion1Permission2Spec > ;
#[doc = "The FW Region 1 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_1_permission_2;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_1_start_address_l (rw) register accessor: The FW Region 1 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_7.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_1_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_1_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_1_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_1_start_address_l")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion1StartAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_1_start_address_l :: FwRegsImsram32kx64eMain7SlvFwRegion1StartAddressLSpec > ;
#[doc = "The FW Region 1 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_7.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_1_start_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_1_start_address_h (rw) register accessor: The FW Region 1 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_7.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_1_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_1_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_1_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_1_start_address_h")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion1StartAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_1_start_address_h :: FwRegsImsram32kx64eMain7SlvFwRegion1StartAddressHSpec > ;
#[doc = "The FW Region 1 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_7.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_1_start_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_1_end_address_l (rw) register accessor: The FW Region 1 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_7.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_1_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_1_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_1_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_1_end_address_l")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion1EndAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_1_end_address_l :: FwRegsImsram32kx64eMain7SlvFwRegion1EndAddressLSpec > ;
#[doc = "The FW Region 1 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_7.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_1_end_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_1_end_address_h (rw) register accessor: The FW Region 1 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_7.slv region 1 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_1_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_1_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_1_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_1_end_address_h")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion1EndAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_1_end_address_h :: FwRegsImsram32kx64eMain7SlvFwRegion1EndAddressHSpec > ;
#[doc = "The FW Region 1 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_7.slv region 1 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_1_end_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_2_control (rw) register accessor: The FW Region 2 Control Register defines the control fields for the slave Imsram32kx64e_main_7.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_2_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_2_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_2_control`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_2_control")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion2Control = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_2_control :: FwRegsImsram32kx64eMain7SlvFwRegion2ControlSpec > ;
#[doc = "The FW Region 2 Control Register defines the control fields for the slave Imsram32kx64e_main_7.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_2_control;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_2_permission_0 (rw) register accessor: The FW Region 2 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_2_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_2_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_2_permission_0`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_2_permission_0")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion2Permission0 = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_2_permission_0 :: FwRegsImsram32kx64eMain7SlvFwRegion2Permission0Spec > ;
#[doc = "The FW Region 2 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_2_permission_0;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_2_permission_1 (rw) register accessor: The FW Region 2 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_2_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_2_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_2_permission_1`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_2_permission_1")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion2Permission1 = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_2_permission_1 :: FwRegsImsram32kx64eMain7SlvFwRegion2Permission1Spec > ;
#[doc = "The FW Region 2 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_2_permission_1;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_2_permission_2 (rw) register accessor: The FW Region 2 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_2_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_2_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_2_permission_2`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_2_permission_2")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion2Permission2 = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_2_permission_2 :: FwRegsImsram32kx64eMain7SlvFwRegion2Permission2Spec > ;
#[doc = "The FW Region 2 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_2_permission_2;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_2_start_address_l (rw) register accessor: The FW Region 2 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_7.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_2_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_2_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_2_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_2_start_address_l")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion2StartAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_2_start_address_l :: FwRegsImsram32kx64eMain7SlvFwRegion2StartAddressLSpec > ;
#[doc = "The FW Region 2 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_7.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_2_start_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_2_start_address_h (rw) register accessor: The FW Region 2 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_7.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_2_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_2_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_2_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_2_start_address_h")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion2StartAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_2_start_address_h :: FwRegsImsram32kx64eMain7SlvFwRegion2StartAddressHSpec > ;
#[doc = "The FW Region 2 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_7.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_2_start_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_2_end_address_l (rw) register accessor: The FW Region 2 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_7.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_2_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_2_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_2_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_2_end_address_l")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion2EndAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_2_end_address_l :: FwRegsImsram32kx64eMain7SlvFwRegion2EndAddressLSpec > ;
#[doc = "The FW Region 2 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_7.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_2_end_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_2_end_address_h (rw) register accessor: The FW Region 2 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_7.slv region 2 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_2_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_2_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_2_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_2_end_address_h")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion2EndAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_2_end_address_h :: FwRegsImsram32kx64eMain7SlvFwRegion2EndAddressHSpec > ;
#[doc = "The FW Region 2 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_7.slv region 2 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_2_end_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_3_control (rw) register accessor: The FW Region 3 Control Register defines the control fields for the slave Imsram32kx64e_main_7.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_3_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_3_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_3_control`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_3_control")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion3Control = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_3_control :: FwRegsImsram32kx64eMain7SlvFwRegion3ControlSpec > ;
#[doc = "The FW Region 3 Control Register defines the control fields for the slave Imsram32kx64e_main_7.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_3_control;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_3_permission_0 (rw) register accessor: The FW Region 3 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_3_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_3_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_3_permission_0`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_3_permission_0")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion3Permission0 = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_3_permission_0 :: FwRegsImsram32kx64eMain7SlvFwRegion3Permission0Spec > ;
#[doc = "The FW Region 3 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_3_permission_0;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_3_permission_1 (rw) register accessor: The FW Region 3 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_3_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_3_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_3_permission_1`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_3_permission_1")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion3Permission1 = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_3_permission_1 :: FwRegsImsram32kx64eMain7SlvFwRegion3Permission1Spec > ;
#[doc = "The FW Region 3 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_3_permission_1;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_3_permission_2 (rw) register accessor: The FW Region 3 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_3_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_3_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_3_permission_2`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_3_permission_2")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion3Permission2 = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_3_permission_2 :: FwRegsImsram32kx64eMain7SlvFwRegion3Permission2Spec > ;
#[doc = "The FW Region 3 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_3_permission_2;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_3_start_address_l (rw) register accessor: The FW Region 3 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_7.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_3_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_3_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_3_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_3_start_address_l")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion3StartAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_3_start_address_l :: FwRegsImsram32kx64eMain7SlvFwRegion3StartAddressLSpec > ;
#[doc = "The FW Region 3 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_7.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_3_start_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_3_start_address_h (rw) register accessor: The FW Region 3 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_7.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_3_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_3_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_3_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_3_start_address_h")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion3StartAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_3_start_address_h :: FwRegsImsram32kx64eMain7SlvFwRegion3StartAddressHSpec > ;
#[doc = "The FW Region 3 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_7.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_3_start_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_3_end_address_l (rw) register accessor: The FW Region 3 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_7.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_3_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_3_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_3_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_3_end_address_l")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion3EndAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_3_end_address_l :: FwRegsImsram32kx64eMain7SlvFwRegion3EndAddressLSpec > ;
#[doc = "The FW Region 3 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_7.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_3_end_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_3_end_address_h (rw) register accessor: The FW Region 3 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_7.slv region 3 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_3_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_3_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_3_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_3_end_address_h")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion3EndAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_3_end_address_h :: FwRegsImsram32kx64eMain7SlvFwRegion3EndAddressHSpec > ;
#[doc = "The FW Region 3 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_7.slv region 3 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_3_end_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_4_control (rw) register accessor: The FW Region 4 Control Register defines the control fields for the slave Imsram32kx64e_main_7.slv region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_4_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_4_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_4_control`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_4_control")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion4Control = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_4_control :: FwRegsImsram32kx64eMain7SlvFwRegion4ControlSpec > ;
#[doc = "The FW Region 4 Control Register defines the control fields for the slave Imsram32kx64e_main_7.slv region 4 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_4_control;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_4_permission_0 (rw) register accessor: The FW Region 4 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_4_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_4_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_4_permission_0`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_4_permission_0")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion4Permission0 = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_4_permission_0 :: FwRegsImsram32kx64eMain7SlvFwRegion4Permission0Spec > ;
#[doc = "The FW Region 4 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 4 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_4_permission_0;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_4_permission_1 (rw) register accessor: The FW Region 4 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_4_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_4_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_4_permission_1`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_4_permission_1")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion4Permission1 = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_4_permission_1 :: FwRegsImsram32kx64eMain7SlvFwRegion4Permission1Spec > ;
#[doc = "The FW Region 4 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 4 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_4_permission_1;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_4_permission_2 (rw) register accessor: The FW Region 4 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_4_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_4_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_4_permission_2`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_4_permission_2")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion4Permission2 = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_4_permission_2 :: FwRegsImsram32kx64eMain7SlvFwRegion4Permission2Spec > ;
#[doc = "The FW Region 4 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 4 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_4_permission_2;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_4_start_address_l (rw) register accessor: The FW Region 4 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_7.slv region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_4_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_4_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_4_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_4_start_address_l")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion4StartAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_4_start_address_l :: FwRegsImsram32kx64eMain7SlvFwRegion4StartAddressLSpec > ;
#[doc = "The FW Region 4 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_7.slv region 4 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_4_start_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_4_start_address_h (rw) register accessor: The FW Region 4 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_7.slv region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_4_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_4_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_4_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_4_start_address_h")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion4StartAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_4_start_address_h :: FwRegsImsram32kx64eMain7SlvFwRegion4StartAddressHSpec > ;
#[doc = "The FW Region 4 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_7.slv region 4 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_4_start_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_4_end_address_l (rw) register accessor: The FW Region 4 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_7.slv region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_4_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_4_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_4_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_4_end_address_l")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion4EndAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_4_end_address_l :: FwRegsImsram32kx64eMain7SlvFwRegion4EndAddressLSpec > ;
#[doc = "The FW Region 4 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_7.slv region 4 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_4_end_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_4_end_address_h (rw) register accessor: The FW Region 4 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_7.slv region 4 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_4_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_4_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_4_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_4_end_address_h")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion4EndAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_4_end_address_h :: FwRegsImsram32kx64eMain7SlvFwRegion4EndAddressHSpec > ;
#[doc = "The FW Region 4 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_7.slv region 4 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_4_end_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_5_control (rw) register accessor: The FW Region 5 Control Register defines the control fields for the slave Imsram32kx64e_main_7.slv region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_5_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_5_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_5_control`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_5_control")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion5Control = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_5_control :: FwRegsImsram32kx64eMain7SlvFwRegion5ControlSpec > ;
#[doc = "The FW Region 5 Control Register defines the control fields for the slave Imsram32kx64e_main_7.slv region 5 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_5_control;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_5_permission_0 (rw) register accessor: The FW Region 5 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_5_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_5_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_5_permission_0`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_5_permission_0")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion5Permission0 = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_5_permission_0 :: FwRegsImsram32kx64eMain7SlvFwRegion5Permission0Spec > ;
#[doc = "The FW Region 5 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 5 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_5_permission_0;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_5_permission_1 (rw) register accessor: The FW Region 5 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_5_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_5_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_5_permission_1`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_5_permission_1")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion5Permission1 = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_5_permission_1 :: FwRegsImsram32kx64eMain7SlvFwRegion5Permission1Spec > ;
#[doc = "The FW Region 5 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 5 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_5_permission_1;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_5_permission_2 (rw) register accessor: The FW Region 5 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_5_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_5_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_5_permission_2`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_5_permission_2")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion5Permission2 = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_5_permission_2 :: FwRegsImsram32kx64eMain7SlvFwRegion5Permission2Spec > ;
#[doc = "The FW Region 5 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 5 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_5_permission_2;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_5_start_address_l (rw) register accessor: The FW Region 5 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_7.slv region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_5_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_5_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_5_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_5_start_address_l")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion5StartAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_5_start_address_l :: FwRegsImsram32kx64eMain7SlvFwRegion5StartAddressLSpec > ;
#[doc = "The FW Region 5 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_7.slv region 5 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_5_start_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_5_start_address_h (rw) register accessor: The FW Region 5 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_7.slv region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_5_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_5_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_5_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_5_start_address_h")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion5StartAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_5_start_address_h :: FwRegsImsram32kx64eMain7SlvFwRegion5StartAddressHSpec > ;
#[doc = "The FW Region 5 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_7.slv region 5 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_5_start_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_5_end_address_l (rw) register accessor: The FW Region 5 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_7.slv region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_5_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_5_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_5_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_5_end_address_l")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion5EndAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_5_end_address_l :: FwRegsImsram32kx64eMain7SlvFwRegion5EndAddressLSpec > ;
#[doc = "The FW Region 5 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_7.slv region 5 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_5_end_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_5_end_address_h (rw) register accessor: The FW Region 5 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_7.slv region 5 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_5_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_5_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_5_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_5_end_address_h")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion5EndAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_5_end_address_h :: FwRegsImsram32kx64eMain7SlvFwRegion5EndAddressHSpec > ;
#[doc = "The FW Region 5 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_7.slv region 5 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_5_end_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_6_control (rw) register accessor: The FW Region 6 Control Register defines the control fields for the slave Imsram32kx64e_main_7.slv region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_6_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_6_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_6_control`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_6_control")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion6Control = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_6_control :: FwRegsImsram32kx64eMain7SlvFwRegion6ControlSpec > ;
#[doc = "The FW Region 6 Control Register defines the control fields for the slave Imsram32kx64e_main_7.slv region 6 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_6_control;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_6_permission_0 (rw) register accessor: The FW Region 6 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_6_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_6_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_6_permission_0`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_6_permission_0")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion6Permission0 = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_6_permission_0 :: FwRegsImsram32kx64eMain7SlvFwRegion6Permission0Spec > ;
#[doc = "The FW Region 6 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 6 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_6_permission_0;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_6_permission_1 (rw) register accessor: The FW Region 6 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_6_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_6_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_6_permission_1`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_6_permission_1")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion6Permission1 = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_6_permission_1 :: FwRegsImsram32kx64eMain7SlvFwRegion6Permission1Spec > ;
#[doc = "The FW Region 6 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 6 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_6_permission_1;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_6_permission_2 (rw) register accessor: The FW Region 6 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_6_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_6_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_6_permission_2`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_6_permission_2")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion6Permission2 = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_6_permission_2 :: FwRegsImsram32kx64eMain7SlvFwRegion6Permission2Spec > ;
#[doc = "The FW Region 6 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 6 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_6_permission_2;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_6_start_address_l (rw) register accessor: The FW Region 6 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_7.slv region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_6_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_6_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_6_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_6_start_address_l")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion6StartAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_6_start_address_l :: FwRegsImsram32kx64eMain7SlvFwRegion6StartAddressLSpec > ;
#[doc = "The FW Region 6 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_7.slv region 6 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_6_start_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_6_start_address_h (rw) register accessor: The FW Region 6 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_7.slv region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_6_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_6_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_6_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_6_start_address_h")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion6StartAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_6_start_address_h :: FwRegsImsram32kx64eMain7SlvFwRegion6StartAddressHSpec > ;
#[doc = "The FW Region 6 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_7.slv region 6 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_6_start_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_6_end_address_l (rw) register accessor: The FW Region 6 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_7.slv region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_6_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_6_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_6_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_6_end_address_l")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion6EndAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_6_end_address_l :: FwRegsImsram32kx64eMain7SlvFwRegion6EndAddressLSpec > ;
#[doc = "The FW Region 6 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_7.slv region 6 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_6_end_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_6_end_address_h (rw) register accessor: The FW Region 6 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_7.slv region 6 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_6_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_6_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_6_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_6_end_address_h")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion6EndAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_6_end_address_h :: FwRegsImsram32kx64eMain7SlvFwRegion6EndAddressHSpec > ;
#[doc = "The FW Region 6 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_7.slv region 6 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_6_end_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_7_control (rw) register accessor: The FW Region 7 Control Register defines the control fields for the slave Imsram32kx64e_main_7.slv region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_7_control::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_7_control::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_7_control`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_7_control")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion7Control = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_7_control :: FwRegsImsram32kx64eMain7SlvFwRegion7ControlSpec > ;
#[doc = "The FW Region 7 Control Register defines the control fields for the slave Imsram32kx64e_main_7.slv region 7 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_7_control;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_7_permission_0 (rw) register accessor: The FW Region 7 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_7_permission_0::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_7_permission_0::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_7_permission_0`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_7_permission_0")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion7Permission0 = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_7_permission_0 :: FwRegsImsram32kx64eMain7SlvFwRegion7Permission0Spec > ;
#[doc = "The FW Region 7 Permission 0 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 7 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_7_permission_0;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_7_permission_1 (rw) register accessor: The FW Region 7 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_7_permission_1::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_7_permission_1::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_7_permission_1`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_7_permission_1")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion7Permission1 = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_7_permission_1 :: FwRegsImsram32kx64eMain7SlvFwRegion7Permission1Spec > ;
#[doc = "The FW Region 7 Permission 1 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 7 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_7_permission_1;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_7_permission_2 (rw) register accessor: The FW Region 7 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_7_permission_2::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_7_permission_2::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_7_permission_2`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_7_permission_2")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion7Permission2 = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_7_permission_2 :: FwRegsImsram32kx64eMain7SlvFwRegion7Permission2Spec > ;
#[doc = "The FW Region 7 Permission 2 Register defines the permissions for the slave Imsram32kx64e_main_7.slv region 7 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_7_permission_2;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_7_start_address_l (rw) register accessor: The FW Region 7 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_7.slv region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_7_start_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_7_start_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_7_start_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_7_start_address_l")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion7StartAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_7_start_address_l :: FwRegsImsram32kx64eMain7SlvFwRegion7StartAddressLSpec > ;
#[doc = "The FW Region 7 Start Address Low Register defines the start address bits 31 to 0 for the slave Imsram32kx64e_main_7.slv region 7 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_7_start_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_7_start_address_h (rw) register accessor: The FW Region 7 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_7.slv region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_7_start_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_7_start_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_7_start_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_7_start_address_h")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion7StartAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_7_start_address_h :: FwRegsImsram32kx64eMain7SlvFwRegion7StartAddressHSpec > ;
#[doc = "The FW Region 7 Start Address High Register defines the start address bits 47 to 32 for the slave Imsram32kx64e_main_7.slv region 7 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_7_start_address_h;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_7_end_address_l (rw) register accessor: The FW Region 7 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_7.slv region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_7_end_address_l::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_7_end_address_l::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_7_end_address_l`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_7_end_address_l")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion7EndAddressL = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_7_end_address_l :: FwRegsImsram32kx64eMain7SlvFwRegion7EndAddressLSpec > ;
#[doc = "The FW Region 7 End Address Low Register defines the end address bits 31 to 0 to include for the slave Imsram32kx64e_main_7.slv region 7 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_7_end_address_l;
#[doc = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_7_end_address_h (rw) register accessor: The FW Region 7 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_7.slv region 7 firewall.\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`fw_regs_imsram32kx64e_main_7_slv_fw_region_7_end_address_h::R`].  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`fw_regs_imsram32kx64e_main_7_slv_fw_region_7_end_address_h::W`]. You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [`mod@fw_regs_imsram32kx64e_main_7_slv_fw_region_7_end_address_h`]
module"]
#[doc(alias = "FW_REGS_Imsram32kx64e_main_7_slv_fw_region_7_end_address_h")]
pub type FwRegsImsram32kx64eMain7SlvFwRegion7EndAddressH = crate :: Reg < fw_regs_imsram32kx64e_main_7_slv_fw_region_7_end_address_h :: FwRegsImsram32kx64eMain7SlvFwRegion7EndAddressHSpec > ;
#[doc = "The FW Region 7 End Address High Register defines the end address bits 47 to 32 to include for the slave Imsram32kx64e_main_7.slv region 7 firewall."]
pub mod fw_regs_imsram32kx64e_main_7_slv_fw_region_7_end_address_h;
