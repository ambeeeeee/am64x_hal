#[doc = "Register `CFG_WDSTATUS` reader"]
pub type R = crate::R<CfgWdstatusSpec>;
#[doc = "Register `CFG_WDSTATUS` writer"]
pub type W = crate::W<CfgWdstatusSpec>;
#[doc = "Field `AWDST` reader - 0:0\\]
User and priviledge mode (read): 0 = AWD pin 0 > 1 threshold not exceeded 1 = AWD pin 0 > 1 threshold exceeded Priviledge mode (write): 0 = leaves the current value unchanged 1 = clears the bit to 0"]
pub type AwdstR = crate::BitReader;
#[doc = "Field `AWDST` writer - 0:0\\]
User and priviledge mode (read): 0 = AWD pin 0 > 1 threshold not exceeded 1 = AWD pin 0 > 1 threshold exceeded Priviledge mode (write): 0 = leaves the current value unchanged 1 = clears the bit to 0"]
pub type AwdstW<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `DWDST` reader - 1:1\\]
status flag and is maintained for compatibility reasons. User and priviledge mode (read): 0 = DWD timeout period not expired 1 = DWD timeout period has expired Priviledge mode (write): 0 = leaves the current value unchanged 1 = clears the bit to 0"]
pub type DwdstR = crate::BitReader;
#[doc = "Field `DWDST` writer - 1:1\\]
status flag and is maintained for compatibility reasons. User and priviledge mode (read): 0 = DWD timeout period not expired 1 = DWD timeout period has expired Priviledge mode (write): 0 = leaves the current value unchanged 1 = clears the bit to 0"]
pub type DwdstW<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `KEYST` reader - 2:2\\]
This bit denotes a reset generated by a wrong key or a wrong key-sequence written to the RTIWDKEY register. User and priviledge mode (read): 0 = no wrong key or key-sequence written 1 = wrong key or key-sequence written to RTIWDKEY register Priviledge mode (write): 0 = leaves the current value unchanged 1 = clears the bit to 0"]
pub type KeystR = crate::BitReader;
#[doc = "Field `KEYST` writer - 2:2\\]
This bit denotes a reset generated by a wrong key or a wrong key-sequence written to the RTIWDKEY register. User and priviledge mode (read): 0 = no wrong key or key-sequence written 1 = wrong key or key-sequence written to RTIWDKEY register Priviledge mode (write): 0 = leaves the current value unchanged 1 = clears the bit to 0"]
pub type KeystW<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `START` reader - 3:3\\]
This bit denotes whether the start-time defined by the windowed watchdog configuration has been violated. This indicates that the WWD was serviced before the service window was opened. User and priviledge mode (read): 0 = no start-time window violation has occurred. 1 = the start-time defined by the windowed watchdog configuration has been violated. Priviledge mode (write): 0 = leaves the current value unchanged. 1 = clears the bit to 0."]
pub type StartR = crate::BitReader;
#[doc = "Field `START` writer - 3:3\\]
This bit denotes whether the start-time defined by the windowed watchdog configuration has been violated. This indicates that the WWD was serviced before the service window was opened. User and priviledge mode (read): 0 = no start-time window violation has occurred. 1 = the start-time defined by the windowed watchdog configuration has been violated. Priviledge mode (write): 0 = leaves the current value unchanged. 1 = clears the bit to 0."]
pub type StartW<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `END` reader - 4:4\\]
This bit denotes whether the end-time defined by the windowed watchdog configuration has been violated. This bit is effectively a copy of the DWD ST status flag. User and priviledge mode (read): 0 = no end-time window violation has occurred. 1 = the end-time defined by the windowed watchdog configuration has been violated. Priviledge mode (write): 0 = leaves the current value unchanged. 1 = clears the bit to 0."]
pub type EndR = crate::BitReader;
#[doc = "Field `END` writer - 4:4\\]
This bit denotes whether the end-time defined by the windowed watchdog configuration has been violated. This bit is effectively a copy of the DWD ST status flag. User and priviledge mode (read): 0 = no end-time window violation has occurred. 1 = the end-time defined by the windowed watchdog configuration has been violated. Priviledge mode (write): 0 = leaves the current value unchanged. 1 = clears the bit to 0."]
pub type EndW<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `DWWD` reader - 5:5\\]
This bit denotes whether the time-window defined by the windowed watchdog configuration has been violated, or if a wrong key or key sequence was written to service the watchdog. User and priviledge mode (read): 0 = no time-window violation has occurred. 1 = a time-window violation has occurred. The watchdog will generate either a system reset or a non-maskable interrupt to the CPU in this case. Priviledge mode (write): 0 = leaves the current value unchanged. 1 = clears the bit to 0. This will also clear all other status flags in the RTIWDSTATUS reg- ister except for the AWD ST flag. Clearing of the status flags will deassert the non- maskable interrupt generated due to violation of the DWWD."]
pub type DwwdR = crate::BitReader;
#[doc = "Field `DWWD` writer - 5:5\\]
This bit denotes whether the time-window defined by the windowed watchdog configuration has been violated, or if a wrong key or key sequence was written to service the watchdog. User and priviledge mode (read): 0 = no time-window violation has occurred. 1 = a time-window violation has occurred. The watchdog will generate either a system reset or a non-maskable interrupt to the CPU in this case. Priviledge mode (write): 0 = leaves the current value unchanged. 1 = clears the bit to 0. This will also clear all other status flags in the RTIWDSTATUS reg- ister except for the AWD ST flag. Clearing of the status flags will deassert the non- maskable interrupt generated due to violation of the DWWD."]
pub type DwwdW<'a, REG> = crate::BitWriter<'a, REG>;
impl R {
    #[doc = "Bit 0 - 0:0\\]
User and priviledge mode (read): 0 = AWD pin 0 > 1 threshold not exceeded 1 = AWD pin 0 > 1 threshold exceeded Priviledge mode (write): 0 = leaves the current value unchanged 1 = clears the bit to 0"]
    #[inline(always)]
    pub fn awdst(&self) -> AwdstR {
        AwdstR::new((self.bits & 1) != 0)
    }
    #[doc = "Bit 1 - 1:1\\]
status flag and is maintained for compatibility reasons. User and priviledge mode (read): 0 = DWD timeout period not expired 1 = DWD timeout period has expired Priviledge mode (write): 0 = leaves the current value unchanged 1 = clears the bit to 0"]
    #[inline(always)]
    pub fn dwdst(&self) -> DwdstR {
        DwdstR::new(((self.bits >> 1) & 1) != 0)
    }
    #[doc = "Bit 2 - 2:2\\]
This bit denotes a reset generated by a wrong key or a wrong key-sequence written to the RTIWDKEY register. User and priviledge mode (read): 0 = no wrong key or key-sequence written 1 = wrong key or key-sequence written to RTIWDKEY register Priviledge mode (write): 0 = leaves the current value unchanged 1 = clears the bit to 0"]
    #[inline(always)]
    pub fn keyst(&self) -> KeystR {
        KeystR::new(((self.bits >> 2) & 1) != 0)
    }
    #[doc = "Bit 3 - 3:3\\]
This bit denotes whether the start-time defined by the windowed watchdog configuration has been violated. This indicates that the WWD was serviced before the service window was opened. User and priviledge mode (read): 0 = no start-time window violation has occurred. 1 = the start-time defined by the windowed watchdog configuration has been violated. Priviledge mode (write): 0 = leaves the current value unchanged. 1 = clears the bit to 0."]
    #[inline(always)]
    pub fn start(&self) -> StartR {
        StartR::new(((self.bits >> 3) & 1) != 0)
    }
    #[doc = "Bit 4 - 4:4\\]
This bit denotes whether the end-time defined by the windowed watchdog configuration has been violated. This bit is effectively a copy of the DWD ST status flag. User and priviledge mode (read): 0 = no end-time window violation has occurred. 1 = the end-time defined by the windowed watchdog configuration has been violated. Priviledge mode (write): 0 = leaves the current value unchanged. 1 = clears the bit to 0."]
    #[inline(always)]
    pub fn end(&self) -> EndR {
        EndR::new(((self.bits >> 4) & 1) != 0)
    }
    #[doc = "Bit 5 - 5:5\\]
This bit denotes whether the time-window defined by the windowed watchdog configuration has been violated, or if a wrong key or key sequence was written to service the watchdog. User and priviledge mode (read): 0 = no time-window violation has occurred. 1 = a time-window violation has occurred. The watchdog will generate either a system reset or a non-maskable interrupt to the CPU in this case. Priviledge mode (write): 0 = leaves the current value unchanged. 1 = clears the bit to 0. This will also clear all other status flags in the RTIWDSTATUS reg- ister except for the AWD ST flag. Clearing of the status flags will deassert the non- maskable interrupt generated due to violation of the DWWD."]
    #[inline(always)]
    pub fn dwwd(&self) -> DwwdR {
        DwwdR::new(((self.bits >> 5) & 1) != 0)
    }
}
impl W {
    #[doc = "Bit 0 - 0:0\\]
User and priviledge mode (read): 0 = AWD pin 0 > 1 threshold not exceeded 1 = AWD pin 0 > 1 threshold exceeded Priviledge mode (write): 0 = leaves the current value unchanged 1 = clears the bit to 0"]
    #[inline(always)]
    #[must_use]
    pub fn awdst(&mut self) -> AwdstW<CfgWdstatusSpec> {
        AwdstW::new(self, 0)
    }
    #[doc = "Bit 1 - 1:1\\]
status flag and is maintained for compatibility reasons. User and priviledge mode (read): 0 = DWD timeout period not expired 1 = DWD timeout period has expired Priviledge mode (write): 0 = leaves the current value unchanged 1 = clears the bit to 0"]
    #[inline(always)]
    #[must_use]
    pub fn dwdst(&mut self) -> DwdstW<CfgWdstatusSpec> {
        DwdstW::new(self, 1)
    }
    #[doc = "Bit 2 - 2:2\\]
This bit denotes a reset generated by a wrong key or a wrong key-sequence written to the RTIWDKEY register. User and priviledge mode (read): 0 = no wrong key or key-sequence written 1 = wrong key or key-sequence written to RTIWDKEY register Priviledge mode (write): 0 = leaves the current value unchanged 1 = clears the bit to 0"]
    #[inline(always)]
    #[must_use]
    pub fn keyst(&mut self) -> KeystW<CfgWdstatusSpec> {
        KeystW::new(self, 2)
    }
    #[doc = "Bit 3 - 3:3\\]
This bit denotes whether the start-time defined by the windowed watchdog configuration has been violated. This indicates that the WWD was serviced before the service window was opened. User and priviledge mode (read): 0 = no start-time window violation has occurred. 1 = the start-time defined by the windowed watchdog configuration has been violated. Priviledge mode (write): 0 = leaves the current value unchanged. 1 = clears the bit to 0."]
    #[inline(always)]
    #[must_use]
    pub fn start(&mut self) -> StartW<CfgWdstatusSpec> {
        StartW::new(self, 3)
    }
    #[doc = "Bit 4 - 4:4\\]
This bit denotes whether the end-time defined by the windowed watchdog configuration has been violated. This bit is effectively a copy of the DWD ST status flag. User and priviledge mode (read): 0 = no end-time window violation has occurred. 1 = the end-time defined by the windowed watchdog configuration has been violated. Priviledge mode (write): 0 = leaves the current value unchanged. 1 = clears the bit to 0."]
    #[inline(always)]
    #[must_use]
    pub fn end(&mut self) -> EndW<CfgWdstatusSpec> {
        EndW::new(self, 4)
    }
    #[doc = "Bit 5 - 5:5\\]
This bit denotes whether the time-window defined by the windowed watchdog configuration has been violated, or if a wrong key or key sequence was written to service the watchdog. User and priviledge mode (read): 0 = no time-window violation has occurred. 1 = a time-window violation has occurred. The watchdog will generate either a system reset or a non-maskable interrupt to the CPU in this case. Priviledge mode (write): 0 = leaves the current value unchanged. 1 = clears the bit to 0. This will also clear all other status flags in the RTIWDSTATUS reg- ister except for the AWD ST flag. Clearing of the status flags will deassert the non- maskable interrupt generated due to violation of the DWWD."]
    #[inline(always)]
    #[must_use]
    pub fn dwwd(&mut self) -> DwwdW<CfgWdstatusSpec> {
        DwwdW::new(self, 5)
    }
}
#[doc = "CFG_WDSTATUS\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`cfg_wdstatus::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`cfg_wdstatus::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
pub struct CfgWdstatusSpec;
impl crate::RegisterSpec for CfgWdstatusSpec {
    type Ux = u32;
}
#[doc = "`read()` method returns [`cfg_wdstatus::R`](R) reader structure"]
impl crate::Readable for CfgWdstatusSpec {}
#[doc = "`write(|w| ..)` method takes [`cfg_wdstatus::W`](W) writer structure"]
impl crate::Writable for CfgWdstatusSpec {
    type Safety = crate::Unsafe;
    const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
    const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
}
#[doc = "`reset()` method sets CFG_WDSTATUS to value 0"]
impl crate::Resettable for CfgWdstatusSpec {
    const RESET_VALUE: u32 = 0;
}
