#[doc = "Register `CFG0_MCU_M4FSS0_LBIST_CTRL_PROXY` reader"]
pub type R = crate::R<Cfg0McuM4fss0LbistCtrlProxySpec>;
#[doc = "Register `CFG0_MCU_M4FSS0_LBIST_CTRL_PROXY` writer"]
pub type W = crate::W<Cfg0McuM4fss0LbistCtrlProxySpec>;
#[doc = "Field `MCU_M4FSS0_LBIST_CTRL_DIVIDE_RATIO_PROXY` reader - 4:0\\]
LBIST clock divide ratio"]
pub type McuM4fss0LbistCtrlDivideRatioProxyR = crate::FieldReader;
#[doc = "Field `MCU_M4FSS0_LBIST_CTRL_DIVIDE_RATIO_PROXY` writer - 4:0\\]
LBIST clock divide ratio"]
pub type McuM4fss0LbistCtrlDivideRatioProxyW<'a, REG> = crate::FieldWriter<'a, REG, 5>;
#[doc = "Field `MCU_M4FSS0_LBIST_CTRL_LOAD_DIV_PROXY` reader - 7:7\\]
Loads LBIST clock divide ratio on transition from 0 to 1"]
pub type McuM4fss0LbistCtrlLoadDivProxyR = crate::BitReader;
#[doc = "Field `MCU_M4FSS0_LBIST_CTRL_LOAD_DIV_PROXY` writer - 7:7\\]
Loads LBIST clock divide ratio on transition from 0 to 1"]
pub type McuM4fss0LbistCtrlLoadDivProxyW<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `MCU_M4FSS0_LBIST_CTRL_DC_DEF_PROXY` reader - 9:8\\]
Clock delay after scan_active switching"]
pub type McuM4fss0LbistCtrlDcDefProxyR = crate::FieldReader;
#[doc = "Field `MCU_M4FSS0_LBIST_CTRL_DC_DEF_PROXY` writer - 9:8\\]
Clock delay after scan_active switching"]
pub type McuM4fss0LbistCtrlDcDefProxyW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
#[doc = "Field `MCU_M4FSS0_LBIST_CTRL_RUNBIST_MODE_PROXY` reader - 15:12\\]
Runbist mode active if all bits are 1"]
pub type McuM4fss0LbistCtrlRunbistModeProxyR = crate::FieldReader;
#[doc = "Field `MCU_M4FSS0_LBIST_CTRL_RUNBIST_MODE_PROXY` writer - 15:12\\]
Runbist mode active if all bits are 1"]
pub type McuM4fss0LbistCtrlRunbistModeProxyW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
#[doc = "Field `MCU_M4FSS0_LBIST_CTRL_SUBCHIP_ID_PROXY` reader - 20:16\\]
Specifies which sub-chip is to be tested"]
pub type McuM4fss0LbistCtrlSubchipIdProxyR = crate::FieldReader;
#[doc = "Field `MCU_M4FSS0_LBIST_CTRL_SUBCHIP_ID_PROXY` writer - 20:16\\]
Specifies which sub-chip is to be tested"]
pub type McuM4fss0LbistCtrlSubchipIdProxyW<'a, REG> = crate::FieldWriter<'a, REG, 5>;
#[doc = "Field `MCU_M4FSS0_LBIST_CTRL_BIST_RUN_PROXY` reader - 27:24\\]
This bitfield is not used. The bist_run control for DMSC is generated by the POST state machine. The bitfield still reflects the efuse value."]
pub type McuM4fss0LbistCtrlBistRunProxyR = crate::FieldReader;
#[doc = "Field `MCU_M4FSS0_LBIST_CTRL_BIST_RUN_PROXY` writer - 27:24\\]
This bitfield is not used. The bist_run control for DMSC is generated by the POST state machine. The bitfield still reflects the efuse value."]
pub type McuM4fss0LbistCtrlBistRunProxyW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
#[doc = "Field `MCU_M4FSS0_LBIST_CTRL_BIST_RESET_PROXY` reader - 31:31\\]
This bitfield is not used. The bist_reset control for DMSC is generated by the POST state machine. The bitfield still reflects the efuse value."]
pub type McuM4fss0LbistCtrlBistResetProxyR = crate::BitReader;
#[doc = "Field `MCU_M4FSS0_LBIST_CTRL_BIST_RESET_PROXY` writer - 31:31\\]
This bitfield is not used. The bist_reset control for DMSC is generated by the POST state machine. The bitfield still reflects the efuse value."]
pub type McuM4fss0LbistCtrlBistResetProxyW<'a, REG> = crate::BitWriter<'a, REG>;
impl R {
    #[doc = "Bits 0:4 - 4:0\\]
LBIST clock divide ratio"]
    #[inline(always)]
    pub fn mcu_m4fss0_lbist_ctrl_divide_ratio_proxy(&self) -> McuM4fss0LbistCtrlDivideRatioProxyR {
        McuM4fss0LbistCtrlDivideRatioProxyR::new((self.bits & 0x1f) as u8)
    }
    #[doc = "Bit 7 - 7:7\\]
Loads LBIST clock divide ratio on transition from 0 to 1"]
    #[inline(always)]
    pub fn mcu_m4fss0_lbist_ctrl_load_div_proxy(&self) -> McuM4fss0LbistCtrlLoadDivProxyR {
        McuM4fss0LbistCtrlLoadDivProxyR::new(((self.bits >> 7) & 1) != 0)
    }
    #[doc = "Bits 8:9 - 9:8\\]
Clock delay after scan_active switching"]
    #[inline(always)]
    pub fn mcu_m4fss0_lbist_ctrl_dc_def_proxy(&self) -> McuM4fss0LbistCtrlDcDefProxyR {
        McuM4fss0LbistCtrlDcDefProxyR::new(((self.bits >> 8) & 3) as u8)
    }
    #[doc = "Bits 12:15 - 15:12\\]
Runbist mode active if all bits are 1"]
    #[inline(always)]
    pub fn mcu_m4fss0_lbist_ctrl_runbist_mode_proxy(&self) -> McuM4fss0LbistCtrlRunbistModeProxyR {
        McuM4fss0LbistCtrlRunbistModeProxyR::new(((self.bits >> 12) & 0x0f) as u8)
    }
    #[doc = "Bits 16:20 - 20:16\\]
Specifies which sub-chip is to be tested"]
    #[inline(always)]
    pub fn mcu_m4fss0_lbist_ctrl_subchip_id_proxy(&self) -> McuM4fss0LbistCtrlSubchipIdProxyR {
        McuM4fss0LbistCtrlSubchipIdProxyR::new(((self.bits >> 16) & 0x1f) as u8)
    }
    #[doc = "Bits 24:27 - 27:24\\]
This bitfield is not used. The bist_run control for DMSC is generated by the POST state machine. The bitfield still reflects the efuse value."]
    #[inline(always)]
    pub fn mcu_m4fss0_lbist_ctrl_bist_run_proxy(&self) -> McuM4fss0LbistCtrlBistRunProxyR {
        McuM4fss0LbistCtrlBistRunProxyR::new(((self.bits >> 24) & 0x0f) as u8)
    }
    #[doc = "Bit 31 - 31:31\\]
This bitfield is not used. The bist_reset control for DMSC is generated by the POST state machine. The bitfield still reflects the efuse value."]
    #[inline(always)]
    pub fn mcu_m4fss0_lbist_ctrl_bist_reset_proxy(&self) -> McuM4fss0LbistCtrlBistResetProxyR {
        McuM4fss0LbistCtrlBistResetProxyR::new(((self.bits >> 31) & 1) != 0)
    }
}
impl W {
    #[doc = "Bits 0:4 - 4:0\\]
LBIST clock divide ratio"]
    #[inline(always)]
    #[must_use]
    pub fn mcu_m4fss0_lbist_ctrl_divide_ratio_proxy(
        &mut self,
    ) -> McuM4fss0LbistCtrlDivideRatioProxyW<Cfg0McuM4fss0LbistCtrlProxySpec> {
        McuM4fss0LbistCtrlDivideRatioProxyW::new(self, 0)
    }
    #[doc = "Bit 7 - 7:7\\]
Loads LBIST clock divide ratio on transition from 0 to 1"]
    #[inline(always)]
    #[must_use]
    pub fn mcu_m4fss0_lbist_ctrl_load_div_proxy(
        &mut self,
    ) -> McuM4fss0LbistCtrlLoadDivProxyW<Cfg0McuM4fss0LbistCtrlProxySpec> {
        McuM4fss0LbistCtrlLoadDivProxyW::new(self, 7)
    }
    #[doc = "Bits 8:9 - 9:8\\]
Clock delay after scan_active switching"]
    #[inline(always)]
    #[must_use]
    pub fn mcu_m4fss0_lbist_ctrl_dc_def_proxy(
        &mut self,
    ) -> McuM4fss0LbistCtrlDcDefProxyW<Cfg0McuM4fss0LbistCtrlProxySpec> {
        McuM4fss0LbistCtrlDcDefProxyW::new(self, 8)
    }
    #[doc = "Bits 12:15 - 15:12\\]
Runbist mode active if all bits are 1"]
    #[inline(always)]
    #[must_use]
    pub fn mcu_m4fss0_lbist_ctrl_runbist_mode_proxy(
        &mut self,
    ) -> McuM4fss0LbistCtrlRunbistModeProxyW<Cfg0McuM4fss0LbistCtrlProxySpec> {
        McuM4fss0LbistCtrlRunbistModeProxyW::new(self, 12)
    }
    #[doc = "Bits 16:20 - 20:16\\]
Specifies which sub-chip is to be tested"]
    #[inline(always)]
    #[must_use]
    pub fn mcu_m4fss0_lbist_ctrl_subchip_id_proxy(
        &mut self,
    ) -> McuM4fss0LbistCtrlSubchipIdProxyW<Cfg0McuM4fss0LbistCtrlProxySpec> {
        McuM4fss0LbistCtrlSubchipIdProxyW::new(self, 16)
    }
    #[doc = "Bits 24:27 - 27:24\\]
This bitfield is not used. The bist_run control for DMSC is generated by the POST state machine. The bitfield still reflects the efuse value."]
    #[inline(always)]
    #[must_use]
    pub fn mcu_m4fss0_lbist_ctrl_bist_run_proxy(
        &mut self,
    ) -> McuM4fss0LbistCtrlBistRunProxyW<Cfg0McuM4fss0LbistCtrlProxySpec> {
        McuM4fss0LbistCtrlBistRunProxyW::new(self, 24)
    }
    #[doc = "Bit 31 - 31:31\\]
This bitfield is not used. The bist_reset control for DMSC is generated by the POST state machine. The bitfield still reflects the efuse value."]
    #[inline(always)]
    #[must_use]
    pub fn mcu_m4fss0_lbist_ctrl_bist_reset_proxy(
        &mut self,
    ) -> McuM4fss0LbistCtrlBistResetProxyW<Cfg0McuM4fss0LbistCtrlProxySpec> {
        McuM4fss0LbistCtrlBistResetProxyW::new(self, 31)
    }
}
#[doc = "CFG0_MCU_M4FSS0_LBIST_CTRL_PROXY\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`cfg0_mcu_m4fss0_lbist_ctrl_proxy::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`cfg0_mcu_m4fss0_lbist_ctrl_proxy::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
pub struct Cfg0McuM4fss0LbistCtrlProxySpec;
impl crate::RegisterSpec for Cfg0McuM4fss0LbistCtrlProxySpec {
    type Ux = u32;
}
#[doc = "`read()` method returns [`cfg0_mcu_m4fss0_lbist_ctrl_proxy::R`](R) reader structure"]
impl crate::Readable for Cfg0McuM4fss0LbistCtrlProxySpec {}
#[doc = "`write(|w| ..)` method takes [`cfg0_mcu_m4fss0_lbist_ctrl_proxy::W`](W) writer structure"]
impl crate::Writable for Cfg0McuM4fss0LbistCtrlProxySpec {
    type Safety = crate::Unsafe;
    const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
    const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
}
#[doc = "`reset()` method sets CFG0_MCU_M4FSS0_LBIST_CTRL_PROXY to value 0"]
impl crate::Resettable for Cfg0McuM4fss0LbistCtrlProxySpec {
    const RESET_VALUE: u32 = 0;
}
