#[doc = "Register `CFG0_MCU_M4FSS0_LBIST_CTRL` reader"]
pub type R = crate::R<Cfg0McuM4fss0LbistCtrlSpec>;
#[doc = "Register `CFG0_MCU_M4FSS0_LBIST_CTRL` writer"]
pub type W = crate::W<Cfg0McuM4fss0LbistCtrlSpec>;
#[doc = "Field `MCU_M4FSS0_LBIST_CTRL_DIVIDE_RATIO` reader - 4:0\\]
LBIST clock divide ratio"]
pub type McuM4fss0LbistCtrlDivideRatioR = crate::FieldReader;
#[doc = "Field `MCU_M4FSS0_LBIST_CTRL_DIVIDE_RATIO` writer - 4:0\\]
LBIST clock divide ratio"]
pub type McuM4fss0LbistCtrlDivideRatioW<'a, REG> = crate::FieldWriter<'a, REG, 5>;
#[doc = "Field `MCU_M4FSS0_LBIST_CTRL_LOAD_DIV` reader - 7:7\\]
Loads LBIST clock divide ratio on transition from 0 to 1"]
pub type McuM4fss0LbistCtrlLoadDivR = crate::BitReader;
#[doc = "Field `MCU_M4FSS0_LBIST_CTRL_LOAD_DIV` writer - 7:7\\]
Loads LBIST clock divide ratio on transition from 0 to 1"]
pub type McuM4fss0LbistCtrlLoadDivW<'a, REG> = crate::BitWriter<'a, REG>;
#[doc = "Field `MCU_M4FSS0_LBIST_CTRL_DC_DEF` reader - 9:8\\]
Clock delay after scan_active switching"]
pub type McuM4fss0LbistCtrlDcDefR = crate::FieldReader;
#[doc = "Field `MCU_M4FSS0_LBIST_CTRL_DC_DEF` writer - 9:8\\]
Clock delay after scan_active switching"]
pub type McuM4fss0LbistCtrlDcDefW<'a, REG> = crate::FieldWriter<'a, REG, 2>;
#[doc = "Field `MCU_M4FSS0_LBIST_CTRL_RUNBIST_MODE` reader - 15:12\\]
Runbist mode active if all bits are 1"]
pub type McuM4fss0LbistCtrlRunbistModeR = crate::FieldReader;
#[doc = "Field `MCU_M4FSS0_LBIST_CTRL_RUNBIST_MODE` writer - 15:12\\]
Runbist mode active if all bits are 1"]
pub type McuM4fss0LbistCtrlRunbistModeW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
#[doc = "Field `MCU_M4FSS0_LBIST_CTRL_SUBCHIP_ID` reader - 20:16\\]
Specifies which sub-chip is to be tested"]
pub type McuM4fss0LbistCtrlSubchipIdR = crate::FieldReader;
#[doc = "Field `MCU_M4FSS0_LBIST_CTRL_SUBCHIP_ID` writer - 20:16\\]
Specifies which sub-chip is to be tested"]
pub type McuM4fss0LbistCtrlSubchipIdW<'a, REG> = crate::FieldWriter<'a, REG, 5>;
#[doc = "Field `MCU_M4FSS0_LBIST_CTRL_BIST_RUN` reader - 27:24\\]
This bitfield is not used. The bist_run control for DMSC is generated by the POST state machine. The bitfield still reflects the efuse value."]
pub type McuM4fss0LbistCtrlBistRunR = crate::FieldReader;
#[doc = "Field `MCU_M4FSS0_LBIST_CTRL_BIST_RUN` writer - 27:24\\]
This bitfield is not used. The bist_run control for DMSC is generated by the POST state machine. The bitfield still reflects the efuse value."]
pub type McuM4fss0LbistCtrlBistRunW<'a, REG> = crate::FieldWriter<'a, REG, 4>;
#[doc = "Field `MCU_M4FSS0_LBIST_CTRL_BIST_RESET` reader - 31:31\\]
This bitfield is not used. The bist_reset control for DMSC is generated by the POST state machine. The bitfield still reflects the efuse value."]
pub type McuM4fss0LbistCtrlBistResetR = crate::BitReader;
#[doc = "Field `MCU_M4FSS0_LBIST_CTRL_BIST_RESET` writer - 31:31\\]
This bitfield is not used. The bist_reset control for DMSC is generated by the POST state machine. The bitfield still reflects the efuse value."]
pub type McuM4fss0LbistCtrlBistResetW<'a, REG> = crate::BitWriter<'a, REG>;
impl R {
    #[doc = "Bits 0:4 - 4:0\\]
LBIST clock divide ratio"]
    #[inline(always)]
    pub fn mcu_m4fss0_lbist_ctrl_divide_ratio(&self) -> McuM4fss0LbistCtrlDivideRatioR {
        McuM4fss0LbistCtrlDivideRatioR::new((self.bits & 0x1f) as u8)
    }
    #[doc = "Bit 7 - 7:7\\]
Loads LBIST clock divide ratio on transition from 0 to 1"]
    #[inline(always)]
    pub fn mcu_m4fss0_lbist_ctrl_load_div(&self) -> McuM4fss0LbistCtrlLoadDivR {
        McuM4fss0LbistCtrlLoadDivR::new(((self.bits >> 7) & 1) != 0)
    }
    #[doc = "Bits 8:9 - 9:8\\]
Clock delay after scan_active switching"]
    #[inline(always)]
    pub fn mcu_m4fss0_lbist_ctrl_dc_def(&self) -> McuM4fss0LbistCtrlDcDefR {
        McuM4fss0LbistCtrlDcDefR::new(((self.bits >> 8) & 3) as u8)
    }
    #[doc = "Bits 12:15 - 15:12\\]
Runbist mode active if all bits are 1"]
    #[inline(always)]
    pub fn mcu_m4fss0_lbist_ctrl_runbist_mode(&self) -> McuM4fss0LbistCtrlRunbistModeR {
        McuM4fss0LbistCtrlRunbistModeR::new(((self.bits >> 12) & 0x0f) as u8)
    }
    #[doc = "Bits 16:20 - 20:16\\]
Specifies which sub-chip is to be tested"]
    #[inline(always)]
    pub fn mcu_m4fss0_lbist_ctrl_subchip_id(&self) -> McuM4fss0LbistCtrlSubchipIdR {
        McuM4fss0LbistCtrlSubchipIdR::new(((self.bits >> 16) & 0x1f) as u8)
    }
    #[doc = "Bits 24:27 - 27:24\\]
This bitfield is not used. The bist_run control for DMSC is generated by the POST state machine. The bitfield still reflects the efuse value."]
    #[inline(always)]
    pub fn mcu_m4fss0_lbist_ctrl_bist_run(&self) -> McuM4fss0LbistCtrlBistRunR {
        McuM4fss0LbistCtrlBistRunR::new(((self.bits >> 24) & 0x0f) as u8)
    }
    #[doc = "Bit 31 - 31:31\\]
This bitfield is not used. The bist_reset control for DMSC is generated by the POST state machine. The bitfield still reflects the efuse value."]
    #[inline(always)]
    pub fn mcu_m4fss0_lbist_ctrl_bist_reset(&self) -> McuM4fss0LbistCtrlBistResetR {
        McuM4fss0LbistCtrlBistResetR::new(((self.bits >> 31) & 1) != 0)
    }
}
impl W {
    #[doc = "Bits 0:4 - 4:0\\]
LBIST clock divide ratio"]
    #[inline(always)]
    #[must_use]
    pub fn mcu_m4fss0_lbist_ctrl_divide_ratio(
        &mut self,
    ) -> McuM4fss0LbistCtrlDivideRatioW<Cfg0McuM4fss0LbistCtrlSpec> {
        McuM4fss0LbistCtrlDivideRatioW::new(self, 0)
    }
    #[doc = "Bit 7 - 7:7\\]
Loads LBIST clock divide ratio on transition from 0 to 1"]
    #[inline(always)]
    #[must_use]
    pub fn mcu_m4fss0_lbist_ctrl_load_div(
        &mut self,
    ) -> McuM4fss0LbistCtrlLoadDivW<Cfg0McuM4fss0LbistCtrlSpec> {
        McuM4fss0LbistCtrlLoadDivW::new(self, 7)
    }
    #[doc = "Bits 8:9 - 9:8\\]
Clock delay after scan_active switching"]
    #[inline(always)]
    #[must_use]
    pub fn mcu_m4fss0_lbist_ctrl_dc_def(
        &mut self,
    ) -> McuM4fss0LbistCtrlDcDefW<Cfg0McuM4fss0LbistCtrlSpec> {
        McuM4fss0LbistCtrlDcDefW::new(self, 8)
    }
    #[doc = "Bits 12:15 - 15:12\\]
Runbist mode active if all bits are 1"]
    #[inline(always)]
    #[must_use]
    pub fn mcu_m4fss0_lbist_ctrl_runbist_mode(
        &mut self,
    ) -> McuM4fss0LbistCtrlRunbistModeW<Cfg0McuM4fss0LbistCtrlSpec> {
        McuM4fss0LbistCtrlRunbistModeW::new(self, 12)
    }
    #[doc = "Bits 16:20 - 20:16\\]
Specifies which sub-chip is to be tested"]
    #[inline(always)]
    #[must_use]
    pub fn mcu_m4fss0_lbist_ctrl_subchip_id(
        &mut self,
    ) -> McuM4fss0LbistCtrlSubchipIdW<Cfg0McuM4fss0LbistCtrlSpec> {
        McuM4fss0LbistCtrlSubchipIdW::new(self, 16)
    }
    #[doc = "Bits 24:27 - 27:24\\]
This bitfield is not used. The bist_run control for DMSC is generated by the POST state machine. The bitfield still reflects the efuse value."]
    #[inline(always)]
    #[must_use]
    pub fn mcu_m4fss0_lbist_ctrl_bist_run(
        &mut self,
    ) -> McuM4fss0LbistCtrlBistRunW<Cfg0McuM4fss0LbistCtrlSpec> {
        McuM4fss0LbistCtrlBistRunW::new(self, 24)
    }
    #[doc = "Bit 31 - 31:31\\]
This bitfield is not used. The bist_reset control for DMSC is generated by the POST state machine. The bitfield still reflects the efuse value."]
    #[inline(always)]
    #[must_use]
    pub fn mcu_m4fss0_lbist_ctrl_bist_reset(
        &mut self,
    ) -> McuM4fss0LbistCtrlBistResetW<Cfg0McuM4fss0LbistCtrlSpec> {
        McuM4fss0LbistCtrlBistResetW::new(self, 31)
    }
}
#[doc = "CFG0_MCU_M4FSS0_LBIST_CTRL\n\nYou can [`read`](crate::generic::Reg::read) this register and get [`cfg0_mcu_m4fss0_lbist_ctrl::R`](R).  You can [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero) this register using [`cfg0_mcu_m4fss0_lbist_ctrl::W`](W). You can also [`modify`](crate::generic::Reg::modify) this register. See [API](https://docs.rs/svd2rust/#read--modify--write-api)."]
pub struct Cfg0McuM4fss0LbistCtrlSpec;
impl crate::RegisterSpec for Cfg0McuM4fss0LbistCtrlSpec {
    type Ux = u32;
}
#[doc = "`read()` method returns [`cfg0_mcu_m4fss0_lbist_ctrl::R`](R) reader structure"]
impl crate::Readable for Cfg0McuM4fss0LbistCtrlSpec {}
#[doc = "`write(|w| ..)` method takes [`cfg0_mcu_m4fss0_lbist_ctrl::W`](W) writer structure"]
impl crate::Writable for Cfg0McuM4fss0LbistCtrlSpec {
    type Safety = crate::Unsafe;
    const ZERO_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
    const ONE_TO_MODIFY_FIELDS_BITMAP: u32 = 0;
}
#[doc = "`reset()` method sets CFG0_MCU_M4FSS0_LBIST_CTRL to value 0"]
impl crate::Resettable for Cfg0McuM4fss0LbistCtrlSpec {
    const RESET_VALUE: u32 = 0;
}
